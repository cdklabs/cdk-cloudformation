// Generated by cdk-import
import * as cdk from '@aws-cdk/core';

/**
 * Schema for Module Fragment of type Logzio::awsCostAndUsage::cur::MODULE
 *
 * @schema CfnModuleProps
 */
export interface CfnModuleProps {
  /**
   * @schema CfnModuleProps#Parameters
   */
  readonly parameters?: CfnModulePropsParameters;

  /**
   * @schema CfnModuleProps#Resources
   */
  readonly resources?: CfnModulePropsResources;

}

/**
 * Converts an object of type 'CfnModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModuleProps(obj: CfnModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsParameters
 */
export interface CfnModulePropsParameters {
  /**
   * The name for the bucket which will contain the report files. The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-), and must follow Amazon S3 bucket restrictions and limitations.
   *
   * @schema CfnModulePropsParameters#S3BucketName
   */
  readonly s3BucketName?: CfnModulePropsParametersS3BucketName;

  /**
   * The name of report that you want to create. The name must be unique, is case sensitive and can't include spaces.
   *
   * @schema CfnModulePropsParameters#ReportName
   */
  readonly reportName?: CfnModulePropsParametersReportName;

  /**
   * The prefix that AWS adds to the report name when AWS delivers the report. Your prefix can't include spaces.
   *
   * @schema CfnModulePropsParameters#ReportPrefix
   */
  readonly reportPrefix?: CfnModulePropsParametersReportPrefix;

  /**
   * The granularity of the line items in the report. (Enabling hourly reports does not mean that a new report is generated every hour. It means that data in the report is aggregated with a granularity of one hour.)
   *
   * @schema CfnModulePropsParameters#ReportTimeUnit
   */
  readonly reportTimeUnit?: CfnModulePropsParametersReportTimeUnit;

  /**
   * Choose INCLUDE if you want AWS to include additional details about individual resources IDs in the report (This might significantly increase report size and might affect performance. AWS Lambda can run for up to 15 minutes with up to 10240 MB, and the process time for the whole file must end within this timeframe.), or DON'T INCLUDE otherwise.
   *
   * @schema CfnModulePropsParameters#ReportAdditionalSchemaElements
   */
  readonly reportAdditionalSchemaElements?: CfnModulePropsParametersReportAdditionalSchemaElements;

  /**
   * The Logz.io listener URL fot your region. (For more details, see the regions page:  https://docs.logz.io/user-guide/accounts/account-region.html)
   *
   * @schema CfnModulePropsParameters#LogzioURL
   */
  readonly logzioUrl?: CfnModulePropsParametersLogzioUrl;

  /**
   * Your Logz.io logs token. (Can be retrieved from the Manage Token page.)
   *
   * @schema CfnModulePropsParameters#LogzioToken
   */
  readonly logzioToken?: CfnModulePropsParametersLogzioToken;

  /**
   * The amount of memory available to the function at runtime. Increasing the function memory also increases its CPU allocation. The value can be multiple of 1 MB. Minimum value is 128 MB and Maximum value is 10240 MB. We recommend to start with 1024 MB.
   *
   * @schema CfnModulePropsParameters#LambdaMemorySize
   */
  readonly lambdaMemorySize?: CfnModulePropsParametersLambdaMemorySize;

  /**
   * The amount of time that Lambda allows a function to run before stopping it. Minimum value is 1 second and Maximum value is 900 seconds. We recommend to start with 300 seconds (5 minutes).
   *
   * @schema CfnModulePropsParameters#LambdaTimeout
   */
  readonly lambdaTimeout?: CfnModulePropsParametersLambdaTimeout;

  /**
   * The scheduling expression that determines when and how often the Lambda function runs. We recommend to start with 10 hour rate.
   *
   * @schema CfnModulePropsParameters#CloudWatchEventScheduleExpression
   */
  readonly cloudWatchEventScheduleExpression?: CfnModulePropsParametersCloudWatchEventScheduleExpression;

}

/**
 * Converts an object of type 'CfnModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParameters(obj: CfnModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'S3BucketName': toJson_CfnModulePropsParametersS3BucketName(obj.s3BucketName),
    'ReportName': toJson_CfnModulePropsParametersReportName(obj.reportName),
    'ReportPrefix': toJson_CfnModulePropsParametersReportPrefix(obj.reportPrefix),
    'ReportTimeUnit': toJson_CfnModulePropsParametersReportTimeUnit(obj.reportTimeUnit),
    'ReportAdditionalSchemaElements': toJson_CfnModulePropsParametersReportAdditionalSchemaElements(obj.reportAdditionalSchemaElements),
    'LogzioURL': toJson_CfnModulePropsParametersLogzioUrl(obj.logzioUrl),
    'LogzioToken': toJson_CfnModulePropsParametersLogzioToken(obj.logzioToken),
    'LambdaMemorySize': toJson_CfnModulePropsParametersLambdaMemorySize(obj.lambdaMemorySize),
    'LambdaTimeout': toJson_CfnModulePropsParametersLambdaTimeout(obj.lambdaTimeout),
    'CloudWatchEventScheduleExpression': toJson_CfnModulePropsParametersCloudWatchEventScheduleExpression(obj.cloudWatchEventScheduleExpression),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResources
 */
export interface CfnModulePropsResources {
  /**
   * @schema CfnModulePropsResources#CUR
   */
  readonly cur?: CfnModulePropsResourcesCur;

  /**
   * @schema CfnModulePropsResources#S3BucketPolicy
   */
  readonly s3BucketPolicy?: CfnModulePropsResourcesS3BucketPolicy;

  /**
   * @schema CfnModulePropsResources#S3Bucket
   */
  readonly s3Bucket?: CfnModulePropsResourcesS3Bucket;

  /**
   * @schema CfnModulePropsResources#LambdaFunction
   */
  readonly lambdaFunction?: CfnModulePropsResourcesLambdaFunction;

  /**
   * @schema CfnModulePropsResources#IAMRole
   */
  readonly iamRole?: CfnModulePropsResourcesIamRole;

  /**
   * @schema CfnModulePropsResources#EventRule
   */
  readonly eventRule?: CfnModulePropsResourcesEventRule;

  /**
   * @schema CfnModulePropsResources#LambdaPermission
   */
  readonly lambdaPermission?: CfnModulePropsResourcesLambdaPermission;

}

/**
 * Converts an object of type 'CfnModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResources(obj: CfnModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CUR': toJson_CfnModulePropsResourcesCur(obj.cur),
    'S3BucketPolicy': toJson_CfnModulePropsResourcesS3BucketPolicy(obj.s3BucketPolicy),
    'S3Bucket': toJson_CfnModulePropsResourcesS3Bucket(obj.s3Bucket),
    'LambdaFunction': toJson_CfnModulePropsResourcesLambdaFunction(obj.lambdaFunction),
    'IAMRole': toJson_CfnModulePropsResourcesIamRole(obj.iamRole),
    'EventRule': toJson_CfnModulePropsResourcesEventRule(obj.eventRule),
    'LambdaPermission': toJson_CfnModulePropsResourcesLambdaPermission(obj.lambdaPermission),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The name for the bucket which will contain the report files. The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-), and must follow Amazon S3 bucket restrictions and limitations.
 *
 * @schema CfnModulePropsParametersS3BucketName
 */
export interface CfnModulePropsParametersS3BucketName {
  /**
   * @schema CfnModulePropsParametersS3BucketName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersS3BucketName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersS3BucketName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersS3BucketName(obj: CfnModulePropsParametersS3BucketName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The name of report that you want to create. The name must be unique, is case sensitive and can't include spaces.
 *
 * @schema CfnModulePropsParametersReportName
 */
export interface CfnModulePropsParametersReportName {
  /**
   * @schema CfnModulePropsParametersReportName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersReportName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersReportName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersReportName(obj: CfnModulePropsParametersReportName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The prefix that AWS adds to the report name when AWS delivers the report. Your prefix can't include spaces.
 *
 * @schema CfnModulePropsParametersReportPrefix
 */
export interface CfnModulePropsParametersReportPrefix {
  /**
   * @schema CfnModulePropsParametersReportPrefix#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersReportPrefix#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersReportPrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersReportPrefix(obj: CfnModulePropsParametersReportPrefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The granularity of the line items in the report. (Enabling hourly reports does not mean that a new report is generated every hour. It means that data in the report is aggregated with a granularity of one hour.)
 *
 * @schema CfnModulePropsParametersReportTimeUnit
 */
export interface CfnModulePropsParametersReportTimeUnit {
  /**
   * @schema CfnModulePropsParametersReportTimeUnit#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersReportTimeUnit#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersReportTimeUnit' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersReportTimeUnit(obj: CfnModulePropsParametersReportTimeUnit | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose INCLUDE if you want AWS to include additional details about individual resources IDs in the report (This might significantly increase report size and might affect performance. AWS Lambda can run for up to 15 minutes with up to 10240 MB, and the process time for the whole file must end within this timeframe.), or DON'T INCLUDE otherwise.
 *
 * @schema CfnModulePropsParametersReportAdditionalSchemaElements
 */
export interface CfnModulePropsParametersReportAdditionalSchemaElements {
  /**
   * @schema CfnModulePropsParametersReportAdditionalSchemaElements#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersReportAdditionalSchemaElements#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersReportAdditionalSchemaElements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersReportAdditionalSchemaElements(obj: CfnModulePropsParametersReportAdditionalSchemaElements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Logz.io listener URL fot your region. (For more details, see the regions page:  https://docs.logz.io/user-guide/accounts/account-region.html)
 *
 * @schema CfnModulePropsParametersLogzioUrl
 */
export interface CfnModulePropsParametersLogzioUrl {
  /**
   * @schema CfnModulePropsParametersLogzioUrl#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioUrl#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioUrl' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioUrl(obj: CfnModulePropsParametersLogzioUrl | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Your Logz.io logs token. (Can be retrieved from the Manage Token page.)
 *
 * @schema CfnModulePropsParametersLogzioToken
 */
export interface CfnModulePropsParametersLogzioToken {
  /**
   * @schema CfnModulePropsParametersLogzioToken#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioToken#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioToken(obj: CfnModulePropsParametersLogzioToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The amount of memory available to the function at runtime. Increasing the function memory also increases its CPU allocation. The value can be multiple of 1 MB. Minimum value is 128 MB and Maximum value is 10240 MB. We recommend to start with 1024 MB.
 *
 * @schema CfnModulePropsParametersLambdaMemorySize
 */
export interface CfnModulePropsParametersLambdaMemorySize {
  /**
   * @schema CfnModulePropsParametersLambdaMemorySize#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLambdaMemorySize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLambdaMemorySize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLambdaMemorySize(obj: CfnModulePropsParametersLambdaMemorySize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The amount of time that Lambda allows a function to run before stopping it. Minimum value is 1 second and Maximum value is 900 seconds. We recommend to start with 300 seconds (5 minutes).
 *
 * @schema CfnModulePropsParametersLambdaTimeout
 */
export interface CfnModulePropsParametersLambdaTimeout {
  /**
   * @schema CfnModulePropsParametersLambdaTimeout#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLambdaTimeout#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLambdaTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLambdaTimeout(obj: CfnModulePropsParametersLambdaTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The scheduling expression that determines when and how often the Lambda function runs. We recommend to start with 10 hour rate.
 *
 * @schema CfnModulePropsParametersCloudWatchEventScheduleExpression
 */
export interface CfnModulePropsParametersCloudWatchEventScheduleExpression {
  /**
   * @schema CfnModulePropsParametersCloudWatchEventScheduleExpression#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersCloudWatchEventScheduleExpression#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersCloudWatchEventScheduleExpression' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersCloudWatchEventScheduleExpression(obj: CfnModulePropsParametersCloudWatchEventScheduleExpression | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesCur
 */
export interface CfnModulePropsResourcesCur {
  /**
   * @schema CfnModulePropsResourcesCur#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesCur#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesCur' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesCur(obj: CfnModulePropsResourcesCur | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesS3BucketPolicy
 */
export interface CfnModulePropsResourcesS3BucketPolicy {
  /**
   * @schema CfnModulePropsResourcesS3BucketPolicy#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesS3BucketPolicy#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesS3BucketPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesS3BucketPolicy(obj: CfnModulePropsResourcesS3BucketPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesS3Bucket
 */
export interface CfnModulePropsResourcesS3Bucket {
  /**
   * @schema CfnModulePropsResourcesS3Bucket#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesS3Bucket#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesS3Bucket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesS3Bucket(obj: CfnModulePropsResourcesS3Bucket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesLambdaFunction
 */
export interface CfnModulePropsResourcesLambdaFunction {
  /**
   * @schema CfnModulePropsResourcesLambdaFunction#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesLambdaFunction#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesLambdaFunction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesLambdaFunction(obj: CfnModulePropsResourcesLambdaFunction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesIamRole
 */
export interface CfnModulePropsResourcesIamRole {
  /**
   * @schema CfnModulePropsResourcesIamRole#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesIamRole#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesIamRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesIamRole(obj: CfnModulePropsResourcesIamRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesEventRule
 */
export interface CfnModulePropsResourcesEventRule {
  /**
   * @schema CfnModulePropsResourcesEventRule#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesEventRule#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesEventRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesEventRule(obj: CfnModulePropsResourcesEventRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesLambdaPermission
 */
export interface CfnModulePropsResourcesLambdaPermission {
  /**
   * @schema CfnModulePropsResourcesLambdaPermission#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesLambdaPermission#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesLambdaPermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesLambdaPermission(obj: CfnModulePropsResourcesLambdaPermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `Logzio::awsCostAndUsage::cur::MODULE`
 *
 * @cloudformationResource Logzio::awsCostAndUsage::cur::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Logzio::awsCostAndUsage::cur::MODULE";

  /**
   * Resource props.
   */
  public readonly props: CfnModuleProps;


  /**
   * Create a new `Logzio::awsCostAndUsage::cur::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: cdk.Construct, id: string, props: CfnModuleProps) {
    super(scope, id, { type: CfnModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnModuleProps(props)! });

    this.props = props;

  }
}