"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnSkill = exports.toJson_Overrides = exports.toJson_SkillPackage = exports.toJson_AuthenticationConfiguration = exports.toJson_CfnSkillProps = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Generated by cdk-import
const cdk = require("@aws-cdk/core");
/**
 * Converts an object of type 'CfnSkillProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_CfnSkillProps(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'AuthenticationConfiguration': toJson_AuthenticationConfiguration(obj.authenticationConfiguration),
        'VendorId': obj.vendorId,
        'SkillPackage': toJson_SkillPackage(obj.skillPackage),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
exports.toJson_CfnSkillProps = toJson_CfnSkillProps;
/**
 * Converts an object of type 'AuthenticationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_AuthenticationConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'ClientId': obj.clientId,
        'RefreshToken': obj.refreshToken,
        'ClientSecret': obj.clientSecret,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
exports.toJson_AuthenticationConfiguration = toJson_AuthenticationConfiguration;
/**
 * Converts an object of type 'SkillPackage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_SkillPackage(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'S3BucketRole': obj.s3BucketRole,
        'Overrides': toJson_Overrides(obj.overrides),
        'S3ObjectVersion': obj.s3ObjectVersion,
        'S3Bucket': obj.s3Bucket,
        'S3Key': obj.s3Key,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
exports.toJson_SkillPackage = toJson_SkillPackage;
/**
 * Converts an object of type 'Overrides' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_Overrides(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'Manifest': obj.manifest,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
exports.toJson_Overrides = toJson_Overrides;
/**
 * A CloudFormation `Alexa::ASK::Skill`.
 *
 * @external
 * @cloudformationResource Alexa::ASK::Skill
 * @link http://unknown-url
 */
class CfnSkill extends cdk.CfnResource {
    /**
     * Create a new `Alexa::ASK::Skill`.
     *
     * @param scope - scope in which this resource is defined.
     * @param id - scoped id of the resource.
     * @param props - resource properties.
     * @external
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnSkill.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnSkillProps(props) });
        this.authenticationConfiguration = props.authenticationConfiguration;
        this.vendorId = props.vendorId;
        this.skillPackage = props.skillPackage;
        this.attrId = cdk.Token.asString(this.getAtt('Id'));
    }
}
exports.CfnSkill = CfnSkill;
_a = JSII_RTTI_SYMBOL_1;
CfnSkill[_a] = { fqn: "@cdk-cloudformation/alexa-ask-skill.CfnSkill", version: "0.0.0" };
/**
 * The CloudFormation resource type name for this resource class.
 *
 * @external
 */
CfnSkill.CFN_RESOURCE_TYPE_NAME = "Alexa::ASK::Skill";
//# sourceMappingURL=data:application/json;base64,