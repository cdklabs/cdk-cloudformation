// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A resource provider for Aqua Enterprise Server.
 *
 * @schema CfnServerProps
 */
export interface CfnServerProps {
  /**
   * EKS cluster name
   *
   * @schema CfnServerProps#ClusterID
   */
  readonly clusterId?: string;

  /**
   * Secrets Manager ARN for kubeconfig file
   *
   * @schema CfnServerProps#KubeConfig
   */
  readonly kubeConfig?: string;

  /**
   * IAM to use with EKS cluster authentication, if not resource execution role will be used
   *
   * @schema CfnServerProps#RoleArn
   */
  readonly roleArn?: string;

  /**
   * Namespace to use with helm. Created if doesn't exist and default will be used if not provided
   *
   * @schema CfnServerProps#Namespace
   */
  readonly namespace?: string;

  /**
   * Name for the helm release
   *
   * @schema CfnServerProps#Name
   */
  readonly name?: string;

  /**
   * Custom Values can optionally be specified
   *
   * @schema CfnServerProps#Values
   */
  readonly values?: any;

  /**
   * String representation of a values.yaml file
   *
   * @schema CfnServerProps#ValueYaml
   */
  readonly valueYaml?: string;

  /**
   * Version can be specified, if not latest will be used
   *
   * @schema CfnServerProps#Version
   */
  readonly version?: string;

  /**
   * Custom Value Yaml file can optionally be specified
   *
   * @schema CfnServerProps#ValueOverrideURL
   */
  readonly valueOverrideUrl?: string;

  /**
   * Timeout for resource provider. Default 60 mins
   *
   * @schema CfnServerProps#TimeOut
   */
  readonly timeOut?: number;

  /**
   * For network connectivity to Cluster inside VPC
   *
   * @schema CfnServerProps#VPCConfiguration
   */
  readonly vpcConfiguration?: CfnServerPropsVpcConfiguration;

}

/**
 * Converts an object of type 'CfnServerProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnServerProps(obj: CfnServerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClusterID': obj.clusterId,
    'KubeConfig': obj.kubeConfig,
    'RoleArn': obj.roleArn,
    'Namespace': obj.namespace,
    'Name': obj.name,
    'Values': obj.values,
    'ValueYaml': obj.valueYaml,
    'Version': obj.version,
    'ValueOverrideURL': obj.valueOverrideUrl,
    'TimeOut': obj.timeOut,
    'VPCConfiguration': toJson_CfnServerPropsVpcConfiguration(obj.vpcConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * For network connectivity to Cluster inside VPC
 *
 * @schema CfnServerPropsVpcConfiguration
 */
export interface CfnServerPropsVpcConfiguration {
  /**
   * Specify one or more security groups
   *
   * @schema CfnServerPropsVpcConfiguration#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * Specify one or more subnets
   *
   * @schema CfnServerPropsVpcConfiguration#SubnetIds
   */
  readonly subnetIds?: string[];

}

/**
 * Converts an object of type 'CfnServerPropsVpcConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnServerPropsVpcConfiguration(obj: CfnServerPropsVpcConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'SubnetIds': obj.subnetIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `Aqua::Enterprise::Server`
 *
 * @cloudformationResource Aqua::Enterprise::Server
 * @stability external
 * @link https://github.com/aquasecurity/aqua-helm.git
 */
export class CfnServer extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Aqua::Enterprise::Server";

  /**
   * Resource props.
   */
  public readonly props: CfnServerProps;

  /**
   * Attribute `Aqua::Enterprise::Server.ID`
   * @link https://github.com/aquasecurity/aqua-helm.git
   */
  public readonly attrId: string;

  /**
   * Create a new `Aqua::Enterprise::Server`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnServerProps) {
    super(scope, id, { type: CfnServer.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnServerProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('ID'));
  }
}