// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A Monitor policy to configure monitoring of endpoint health
 *
 * @schema CfnMonitorProps
 */
export interface CfnMonitorProps {
  /**
   * The account identifier
   *
   * @schema CfnMonitorProps#AccountIdentifier
   */
  readonly accountIdentifier?: string;

  /**
   * A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if type is "http" or "https". Default: "".
   *
   * @schema CfnMonitorProps#ExpectedBody
   */
  readonly expectedBody?: string;

  /**
   * The expected HTTP response code or code range of the health check. Eg 2xx. Only valid and required if type is "http" or "https".
   *
   * @schema CfnMonitorProps#ExpectedCodes
   */
  readonly expectedCodes: string;

  /**
   * The method to use for the health check. Valid values are any valid HTTP verb if type is "http" or "https", or connection_established if type is "tcp". Default: "GET" if type is "http" or "https", "connection_established" if type is "tcp", and empty otherwise.
   *
   * @schema CfnMonitorProps#Method
   */
  readonly method?: string;

  /**
   * The timeout (in seconds) before marking the health check as failed. Default: 5.
   *
   * @schema CfnMonitorProps#Timeout
   */
  readonly timeout?: number;

  /**
   * The endpoint path to health check against. Default: "/". Only valid if type is "http" or "https".
   *
   * @schema CfnMonitorProps#Path
   */
  readonly path?: string;

  /**
   * The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Default: 60.
   *
   * @schema CfnMonitorProps#Interval
   */
  readonly interval?: number;

  /**
   * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Default: 2.
   *
   * @schema CfnMonitorProps#Retries
   */
  readonly retries?: number;

  /**
   * The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. Fields documented below. Only valid if type is "http" or "https".
   *
   * @schema CfnMonitorProps#Header
   */
  readonly header?: any;

  /**
   * The protocol to use for the healthcheck. Currently supported protocols are 'HTTP', 'HTTPS', 'TCP', 'UDP-ICMP', 'ICMP-PING', and 'SMTP'. Default: "http".
   *
   * @schema CfnMonitorProps#Type
   */
  readonly type?: string;

  /**
   * The port number to use for the healthcheck, required when creating a TCP monitor. Valid values are in the range 0-65535.
   *
   * @schema CfnMonitorProps#Port
   */
  readonly port?: number;

  /**
   * Free text description.
   *
   * @schema CfnMonitorProps#Description
   */
  readonly description?: string;

  /**
   * Do not validate the certificate when monitor use HTTPS. Only valid if type is "http" or "https".
   *
   * @schema CfnMonitorProps#AllowInsecure
   */
  readonly allowInsecure?: boolean;

  /**
   * Follow redirects if returned by the origin. Only valid if type is "http" or "https".
   *
   * @schema CfnMonitorProps#FollowRedirects
   */
  readonly followRedirects?: boolean;

  /**
   * Assign this monitor to emulate the specified zone while probing. Only valid if type is "http" or "https".
   *
   * @schema CfnMonitorProps#ProbeZone
   */
  readonly probeZone?: string;
}

/**
 * Converts an object of type 'CfnMonitorProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnMonitorProps(obj: CfnMonitorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AccountIdentifier': obj.accountIdentifier,
    'ExpectedBody': obj.expectedBody,
    'ExpectedCodes': obj.expectedCodes,
    'Method': obj.method,
    'Timeout': obj.timeout,
    'Path': obj.path,
    'Interval': obj.interval,
    'Retries': obj.retries,
    'Header': obj.header,
    'Type': obj.type,
    'Port': obj.port,
    'Description': obj.description,
    'AllowInsecure': obj.allowInsecure,
    'FollowRedirects': obj.followRedirects,
    'ProbeZone': obj.probeZone,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * A CloudFormation `Cloudflare::LoadBalancer::Monitor`
 *
 * @cloudformationResource Cloudflare::LoadBalancer::Monitor
 * @stability external
 * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
 */
export class CfnMonitor extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Cloudflare::LoadBalancer::Monitor";

  /**
   * Resource props.
   */
  public readonly props: CfnMonitorProps;

  /**
   * Attribute `Cloudflare::LoadBalancer::Monitor.Id`
   * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
   */
  public readonly attrId: string;
  /**
   * Attribute `Cloudflare::LoadBalancer::Monitor.CreatedOn`
   * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
   */
  public readonly attrCreatedOn: string;
  /**
   * Attribute `Cloudflare::LoadBalancer::Monitor.ModifiedOn`
   * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
   */
  public readonly attrModifiedOn: string;

  /**
   * Create a new `Cloudflare::LoadBalancer::Monitor`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnMonitorProps) {
    super(scope, id, { type: CfnMonitor.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnMonitorProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrCreatedOn = cdk.Token.asString(this.getAtt('CreatedOn'));
    this.attrModifiedOn = cdk.Token.asString(this.getAtt('ModifiedOn'));
  }
}