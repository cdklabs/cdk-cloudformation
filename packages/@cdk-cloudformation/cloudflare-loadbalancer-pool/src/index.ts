// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A resource to manage a pool of origin servers
 *
 * @schema CfnPoolProps
 */
export interface CfnPoolProps {
  /**
   * A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
   *
   * @schema CfnPoolProps#Name
   */
  readonly name: string;

  /**
   * The account identifier
   *
   * @schema CfnPoolProps#AccountIdentifier
   */
  readonly accountIdentifier?: string;

  /**
   * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy
   *
   * @schema CfnPoolProps#Origins
   */
  readonly origins: Origin[];

  /**
   * Filter pool and origin health notifications by resource type or health status. Use null to reset
   *
   * @schema CfnPoolProps#NotificationFilter
   */
  readonly notificationFilter?: Filter;

  /**
   * A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan
   *
   * @schema CfnPoolProps#CheckRegions
   */
  readonly checkRegions?: string[];

  /**
   * Free text description.
   *
   * @schema CfnPoolProps#Description
   */
  readonly description?: string;

  /**
   * Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
   *
   * @schema CfnPoolProps#Enabled
   */
  readonly enabled?: boolean;

  /**
   * The latitude this pool is physically located at; used for proximity steering. Values should be between -90 and 90.
   *
   * @schema CfnPoolProps#Latitude
   */
  readonly latitude?: number;

  /**
   * The longitude this pool is physically located at; used for proximity steering. Values should be between -180 and 180.
   *
   * @schema CfnPoolProps#Longitude
   */
  readonly longitude?: number;

  /**
   * @schema CfnPoolProps#LoadShedding
   */
  readonly loadShedding?: LoadShedding;

  /**
   * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Default: 1.
   *
   * @schema CfnPoolProps#MinimumOrigins
   */
  readonly minimumOrigins?: number;

  /**
   * The ID of the Monitor to use for health checking origins within this pool.
   *
   * @schema CfnPoolProps#Monitor
   */
  readonly monitor?: string;

  /**
   * he email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
   *
   * @schema CfnPoolProps#NotificationEmail
   */
  readonly notificationEmail?: string;

  /**
   * Set an origin steering policy to control origin selection within a pool.
   *
   * @schema CfnPoolProps#OriginSteering
   */
  readonly originSteering?: CfnPoolPropsOriginSteering;
}

/**
 * Converts an object of type 'CfnPoolProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnPoolProps(obj: CfnPoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'AccountIdentifier': obj.accountIdentifier,
    'Origins': obj.origins?.map(y => toJson_Origin(y)),
    'NotificationFilter': toJson_Filter(obj.notificationFilter),
    'CheckRegions': obj.checkRegions?.map(y => y),
    'Description': obj.description,
    'Enabled': obj.enabled,
    'Latitude': obj.latitude,
    'Longitude': obj.longitude,
    'LoadShedding': toJson_LoadShedding(obj.loadShedding),
    'MinimumOrigins': obj.minimumOrigins,
    'Monitor': obj.monitor,
    'NotificationEmail': obj.notificationEmail,
    'OriginSteering': toJson_CfnPoolPropsOriginSteering(obj.originSteering),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema Origin
 */
export interface Origin {
  /**
   * @schema Origin#Name
   */
  readonly name?: string;

  /**
   * @schema Origin#Address
   */
  readonly address?: string;

  /**
   * @schema Origin#Enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema Origin#Weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'Origin' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Origin(obj: Origin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Address': obj.address,
    'Enabled': obj.enabled,
    'Weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Filter pool and origin health notifications by resource type or health status. Use null to reset
 *
 * @schema Filter
 */
export interface Filter {
  /**
   * @schema Filter#Pool
   */
  readonly pool?: FilterPool;
}

/**
 * Converts an object of type 'Filter' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Filter(obj: Filter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Pool': toJson_FilterPool(obj.pool),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Configures load shedding policies and percentages for the pool
 *
 * @schema LoadShedding
 */
export interface LoadShedding {
  /**
   * The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
   *
   * @schema LoadShedding#DefaultPercent
   */
  readonly defaultPercent?: number;

  /**
   * The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
   *
   * @schema LoadShedding#DefaultPolicy
   */
  readonly defaultPolicy?: LoadSheddingDefaultPolicy;

  /**
   * The percent of existing sessions to shed from the pool, according to the session policy.
   *
   * @schema LoadShedding#SessionPercent
   */
  readonly sessionPercent?: number;

  /**
   * Session Policy
   *
   * @schema LoadShedding#SessionPolicy
   */
  readonly sessionPolicy?: LoadSheddingSessionPolicy;
}

/**
 * Converts an object of type 'LoadShedding' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_LoadShedding(obj: LoadShedding | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DefaultPercent': obj.defaultPercent,
    'DefaultPolicy': obj.defaultPolicy,
    'SessionPercent': obj.sessionPercent,
    'SessionPolicy': obj.sessionPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Set an origin steering policy to control origin selection within a pool.
 *
 * @schema CfnPoolPropsOriginSteering
 */
export interface CfnPoolPropsOriginSteering {
  /**
   * The type of origin steering policy to use, either random or hash (based on CF-Connecting-IP).
   *
   * @schema CfnPoolPropsOriginSteering#Policy
   */
  readonly policy?: CfnPoolPropsOriginSteeringPolicy;
}

/**
 * Converts an object of type 'CfnPoolPropsOriginSteering' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnPoolPropsOriginSteering(obj: CfnPoolPropsOriginSteering | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Policy': obj.policy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema FilterPool
 */
export interface FilterPool {
  /**
   * @schema FilterPool#Healthy
   */
  readonly healthy?: boolean;
}

/**
 * Converts an object of type 'FilterPool' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FilterPool(obj: FilterPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Healthy': obj.healthy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
 *
 * @schema LoadSheddingDefaultPolicy
 */
export enum LoadSheddingDefaultPolicy {
  /** hash */
  HASH = "hash",
  /** random */
  RANDOM = "random",
}

/**
 * Session Policy
 *
 * @schema LoadSheddingSessionPolicy
 */
export enum LoadSheddingSessionPolicy {
  /** hash */
  HASH = "hash",
}

/**
 * The type of origin steering policy to use, either random or hash (based on CF-Connecting-IP).
 *
 * @schema CfnPoolPropsOriginSteeringPolicy
 */
export enum CfnPoolPropsOriginSteeringPolicy {
  /** hash */
  HASH = "hash",
  /** random */
  RANDOM = "random",
}


/**
 * A CloudFormation `Cloudflare::LoadBalancer::Pool`
 *
 * @cloudformationResource Cloudflare::LoadBalancer::Pool
 * @stability external
 * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
 */
export class CfnPool extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Cloudflare::LoadBalancer::Pool";

  /**
   * Resource props.
   */
  public readonly props: CfnPoolProps;

  /**
   * Attribute `Cloudflare::LoadBalancer::Pool.Id`
   * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
   */
  public readonly attrId: string;
  /**
   * Attribute `Cloudflare::LoadBalancer::Pool.CreatedOn`
   * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
   */
  public readonly attrCreatedOn: string;
  /**
   * Attribute `Cloudflare::LoadBalancer::Pool.ModifiedOn`
   * @link https://github.com/aws-ia/cloudformation-cloudflare-resource-providers.git
   */
  public readonly attrModifiedOn: string;

  /**
   * Create a new `Cloudflare::LoadBalancer::Pool`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnPoolProps) {
    super(scope, id, { type: CfnPool.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnPoolProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrCreatedOn = cdk.Token.asString(this.getAtt('CreatedOn'));
    this.attrModifiedOn = cdk.Token.asString(this.getAtt('ModifiedOn'));
  }
}