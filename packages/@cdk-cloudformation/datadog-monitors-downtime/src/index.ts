// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Datadog Monitors Downtime 3.0.0
 *
 * @schema CfnDowntimeProps
 */
export interface CfnDowntimeProps {
  /**
   * Whether or not this downtime is currently active
   *
   * @schema CfnDowntimeProps#Active
   */
  readonly active?: boolean;

  /**
   * POSIX Timestamp of cancellation of this downtime (null if not canceled)
   *
   * @schema CfnDowntimeProps#Canceled
   */
  readonly canceled?: number;

  /**
   * Id of the user who created this downtime
   *
   * @schema CfnDowntimeProps#CreatorId
   */
  readonly creatorId?: number;

  /**
   * Whether or not this downtime is disabled
   *
   * @schema CfnDowntimeProps#Disabled
   */
  readonly disabled?: boolean;

  /**
   * Type of this downtime
   *
   * @schema CfnDowntimeProps#DowntimeType
   */
  readonly downtimeType?: number;

  /**
   * POSIX timestamp to end the downtime. If not provided, the downtime is in effect indefinitely (i.e. until you cancel it).
   *
   * @schema CfnDowntimeProps#End
   */
  readonly end?: number;

  /**
   * Id of this downtime
   *
   * @schema CfnDowntimeProps#Id
   */
  readonly id?: number;

  /**
   * Message on the downtime
   *
   * @schema CfnDowntimeProps#Message
   */
  readonly message?: string;

  /**
   * A single monitor to which the downtime applies. If not provided, the downtime applies to all monitors.
   *
   * @schema CfnDowntimeProps#MonitorId
   */
  readonly monitorId?: number;

  /**
   * A comma-separated list of monitor tags, to which the downtime applies. The resulting downtime applies to monitors that match ALL provided monitor tags.
   *
   * @schema CfnDowntimeProps#MonitorTags
   */
  readonly monitorTags?: string[];

  /**
   * The ID of the parent downtime to this one
   *
   * @schema CfnDowntimeProps#ParentId
   */
  readonly parentId?: number;

  /**
   * The scope(s) to which the downtime applies
   *
   * @schema CfnDowntimeProps#Scope
   */
  readonly scope: string[];

  /**
   * POSIX timestamp to start the downtime. If not provided, the downtime starts the moment it is created.
   *
   * @schema CfnDowntimeProps#Start
   */
  readonly start?: number;

  /**
   * The timezone for the downtime
   *
   * @schema CfnDowntimeProps#Timezone
   */
  readonly timezone?: string;

  /**
   * Id of the user who updated this downtime
   *
   * @schema CfnDowntimeProps#UpdaterId
   */
  readonly updaterId?: number;

}

/**
 * Converts an object of type 'CfnDowntimeProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnDowntimeProps(obj: CfnDowntimeProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Active': obj.active,
    'Canceled': obj.canceled,
    'CreatorId': obj.creatorId,
    'Disabled': obj.disabled,
    'DowntimeType': obj.downtimeType,
    'End': obj.end,
    'Id': obj.id,
    'Message': obj.message,
    'MonitorId': obj.monitorId,
    'MonitorTags': obj.monitorTags?.map(y => y),
    'ParentId': obj.parentId,
    'Scope': obj.scope?.map(y => y),
    'Start': obj.start,
    'Timezone': obj.timezone,
    'UpdaterId': obj.updaterId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `Datadog::Monitors::Downtime`
 *
 * @cloudformationResource Datadog::Monitors::Downtime
 * @stability external
 * @link http://unknown-url
 */
export class CfnDowntime extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Datadog::Monitors::Downtime";

  /**
   * Resource props.
   */
  public readonly props: CfnDowntimeProps;


  /**
   * Create a new `Datadog::Monitors::Downtime`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnDowntimeProps) {
    super(scope, id, { type: CfnDowntime.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnDowntimeProps(props)! });

    this.props = props;

  }
}