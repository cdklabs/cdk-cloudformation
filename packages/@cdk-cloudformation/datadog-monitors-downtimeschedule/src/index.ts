// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Datadog Downtime Schedule 1.0.0
 *
 * @schema CfnDowntimeScheduleProps
 */
export interface CfnDowntimeScheduleProps {
  /**
   * The timezone in which to display the downtime's start and end times in Datadog applications. The timezone is not used as an offset for scheduling.
   *
   * @schema CfnDowntimeScheduleProps#DisplayTimezone
   */
  readonly displayTimezone?: string;

  /**
   * A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
   *
   * @schema CfnDowntimeScheduleProps#Message
   */
  readonly message?: string;

  /**
   * If the first recovery notification during a downtime should be muted.
   *
   * @schema CfnDowntimeScheduleProps#MuteFirstRecoveryNotification
   */
  readonly muteFirstRecoveryNotification?: boolean;

  /**
   * The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
   *
   * @schema CfnDowntimeScheduleProps#Scope
   */
  readonly scope: string;

  /**
   * States that will trigger a monitor notification when the `notify_end_types` action occurs.
   *
   * @schema CfnDowntimeScheduleProps#NotifyEndStates
   */
  readonly notifyEndStates?: string[];

  /**
   * Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
   *
   * @schema CfnDowntimeScheduleProps#NotifyEndTypes
   */
  readonly notifyEndTypes?: string[];

  /**
   * @schema CfnDowntimeScheduleProps#MonitorIdentifier
   */
  readonly monitorIdentifier: any;

  /**
   * The schedule that defines when the monitor starts, stops, and recurs. There are two types of schedules: one-time and recurring. Recurring schedules may have up to five RRULE-based recurrences. If no schedules are provided, the downtime will begin immediately and never end.
   *
   * @schema CfnDowntimeScheduleProps#Schedule
   */
  readonly schedule?: any;

}

/**
 * Converts an object of type 'CfnDowntimeScheduleProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnDowntimeScheduleProps(obj: CfnDowntimeScheduleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DisplayTimezone': obj.displayTimezone,
    'Message': obj.message,
    'MuteFirstRecoveryNotification': obj.muteFirstRecoveryNotification,
    'Scope': obj.scope,
    'NotifyEndStates': obj.notifyEndStates?.map(y => y),
    'NotifyEndTypes': obj.notifyEndTypes?.map(y => y),
    'MonitorIdentifier': obj.monitorIdentifier,
    'Schedule': obj.schedule,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * A CloudFormation `Datadog::Monitors::DowntimeSchedule`
 *
 * @cloudformationResource Datadog::Monitors::DowntimeSchedule
 * @stability external
 * @link http://unknown-url
 */
export class CfnDowntimeSchedule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Datadog::Monitors::DowntimeSchedule";

  /**
   * Resource props.
   */
  public readonly props: CfnDowntimeScheduleProps;

  /**
   * Attribute `Datadog::Monitors::DowntimeSchedule.Id`
   * @link http://unknown-url
   */
  public readonly attrId: string;

  /**
   * Create a new `Datadog::Monitors::DowntimeSchedule`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnDowntimeScheduleProps) {
    super(scope, id, { type: CfnDowntimeSchedule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnDowntimeScheduleProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('Id'));
  }
}