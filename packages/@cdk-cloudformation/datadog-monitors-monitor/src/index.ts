// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Datadog Monitor 4.0.0
 *
 * @schema CfnMonitorProps
 */
export interface CfnMonitorProps {
  /**
   * @schema CfnMonitorProps#Creator
   */
  readonly creator?: Creator;

  /**
   * ID of the monitor
   *
   * @schema CfnMonitorProps#Id
   */
  readonly id?: number;

  /**
   * A message to include with notifications for the monitor
   *
   * @schema CfnMonitorProps#Message
   */
  readonly message?: string;

  /**
   * Name of the monitor
   *
   * @schema CfnMonitorProps#Name
   */
  readonly name?: string;

  /**
   * Tags associated with the monitor
   *
   * @schema CfnMonitorProps#Tags
   */
  readonly tags?: string[];

  /**
   * The monitor options
   *
   * @schema CfnMonitorProps#Options
   */
  readonly options?: MonitorOptions;

  /**
   * The monitor query
   *
   * @schema CfnMonitorProps#Query
   */
  readonly query: string;

  /**
   * The type of the monitor
   *
   * @schema CfnMonitorProps#Type
   */
  readonly type: CfnMonitorPropsType;

  /**
   * Whether or not the monitor is multi alert
   *
   * @schema CfnMonitorProps#Multi
   */
  readonly multi?: boolean;

}

/**
 * Converts an object of type 'CfnMonitorProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnMonitorProps(obj: CfnMonitorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Creator': toJson_Creator(obj.creator),
    'Id': obj.id,
    'Message': obj.message,
    'Name': obj.name,
    'Tags': obj.tags?.map(y => y),
    'Options': toJson_MonitorOptions(obj.options),
    'Query': obj.query,
    'Type': obj.type,
    'Multi': obj.multi,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Creator
 */
export interface Creator {
  /**
   * Name of the creator of the monitor
   *
   * @schema Creator#Name
   */
  readonly name?: string;

  /**
   * Handle of the creator of the monitor
   *
   * @schema Creator#Handle
   */
  readonly handle?: string;

  /**
   * Email of the creator of the monitor
   *
   * @schema Creator#Email
   */
  readonly email?: string;

}

/**
 * Converts an object of type 'Creator' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Creator(obj: Creator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Handle': obj.handle,
    'Email': obj.email,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MonitorOptions
 */
export interface MonitorOptions {
  /**
   * Whether or not to include a sample of the logs
   *
   * @schema MonitorOptions#EnableLogsSample
   */
  readonly enableLogsSample?: boolean;

  /**
   * Message to include with a re-notification when renotify_interval is set
   *
   * @schema MonitorOptions#EscalationMessage
   */
  readonly escalationMessage?: string;

  /**
   * Time in seconds to delay evaluation
   *
   * @schema MonitorOptions#EvaluationDelay
   */
  readonly evaluationDelay?: number;

  /**
   * Whether or not to include triggering tags into notification title
   *
   * @schema MonitorOptions#IncludeTags
   */
  readonly includeTags?: boolean;

  /**
   * Whether or not changes to this monitor should be restricted to the creator or admins
   *
   * @schema MonitorOptions#Locked
   */
  readonly locked?: boolean;

  /**
   * Number of locations allowed to fail before triggering alert
   *
   * @schema MonitorOptions#MinLocationFailed
   */
  readonly minLocationFailed?: number;

  /**
   * Time in seconds to allow a host to start reporting data before starting the evaluation of monitor results
   *
   * @schema MonitorOptions#NewHostDelay
   */
  readonly newHostDelay?: number;

  /**
   * Number of minutes data stopped reporting before notifying
   *
   * @schema MonitorOptions#NoDataTimeframe
   */
  readonly noDataTimeframe?: number;

  /**
   * Whether or not to notify tagged users when changes are made to the monitor
   *
   * @schema MonitorOptions#NotifyAudit
   */
  readonly notifyAudit?: boolean;

  /**
   * Whether or not to notify when data stops reporting
   *
   * @schema MonitorOptions#NotifyNoData
   */
  readonly notifyNoData?: boolean;

  /**
   * Number of minutes after the last notification before the monitor re-notifies on the current status
   *
   * @schema MonitorOptions#RenotifyInterval
   */
  readonly renotifyInterval?: number;

  /**
   * Whether or not the monitor requires a full window of data before it is evaluated
   *
   * @schema MonitorOptions#RequireFullWindow
   */
  readonly requireFullWindow?: boolean;

  /**
   * ID of the corresponding synthetics check
   *
   * @schema MonitorOptions#SyntheticsCheckID
   */
  readonly syntheticsCheckId?: number;

  /**
   * The threshold definitions
   *
   * @schema MonitorOptions#Thresholds
   */
  readonly thresholds?: MonitorThresholds;

  /**
   * The threshold window definitions
   *
   * @schema MonitorOptions#ThresholdWindows
   */
  readonly thresholdWindows?: MonitorThresholdWindows;

  /**
   * Number of hours of the monitor not reporting data before it automatically resolves
   *
   * @schema MonitorOptions#TimeoutH
   */
  readonly timeoutH?: number;

}

/**
 * Converts an object of type 'MonitorOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MonitorOptions(obj: MonitorOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EnableLogsSample': obj.enableLogsSample,
    'EscalationMessage': obj.escalationMessage,
    'EvaluationDelay': obj.evaluationDelay,
    'IncludeTags': obj.includeTags,
    'Locked': obj.locked,
    'MinLocationFailed': obj.minLocationFailed,
    'NewHostDelay': obj.newHostDelay,
    'NoDataTimeframe': obj.noDataTimeframe,
    'NotifyAudit': obj.notifyAudit,
    'NotifyNoData': obj.notifyNoData,
    'RenotifyInterval': obj.renotifyInterval,
    'RequireFullWindow': obj.requireFullWindow,
    'SyntheticsCheckID': obj.syntheticsCheckId,
    'Thresholds': toJson_MonitorThresholds(obj.thresholds),
    'ThresholdWindows': toJson_MonitorThresholdWindows(obj.thresholdWindows),
    'TimeoutH': obj.timeoutH,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The type of the monitor
 *
 * @schema CfnMonitorPropsType
 */
export enum CfnMonitorPropsType {
  /** composite */
  COMPOSITE = 'composite',
  /** event alert */
  EVENT_ALERT = 'event alert',
  /** log alert */
  LOG_ALERT = 'log alert',
  /** metric alert */
  METRIC_ALERT = 'metric alert',
  /** process alert */
  PROCESS_ALERT = 'process alert',
  /** query alert */
  QUERY_ALERT = 'query alert',
  /** service check */
  SERVICE_CHECK = 'service check',
  /** synthetics alert */
  SYNTHETICS_ALERT = 'synthetics alert',
  /** trace-analytics alert */
  TRACE_ANALYTICS_ALERT = 'trace-analytics alert',
  /** slo alert */
  SLO_ALERT = 'slo alert',
}

/**
 * @schema MonitorThresholds
 */
export interface MonitorThresholds {
  /**
   * Threshold value for triggering an alert
   *
   * @schema MonitorThresholds#Critical
   */
  readonly critical?: number;

  /**
   * Threshold value for recovering from an alert state
   *
   * @schema MonitorThresholds#CriticalRecovery
   */
  readonly criticalRecovery?: number;

  /**
   * Threshold value for recovering from an alert state
   *
   * @schema MonitorThresholds#OK
   */
  readonly ok?: number;

  /**
   * Threshold value for triggering a warning
   *
   * @schema MonitorThresholds#Warning
   */
  readonly warning?: number;

  /**
   * Threshold value for recovering from a warning state
   *
   * @schema MonitorThresholds#WarningRecovery
   */
  readonly warningRecovery?: number;

}

/**
 * Converts an object of type 'MonitorThresholds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MonitorThresholds(obj: MonitorThresholds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Critical': obj.critical,
    'CriticalRecovery': obj.criticalRecovery,
    'OK': obj.ok,
    'Warning': obj.warning,
    'WarningRecovery': obj.warningRecovery,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MonitorThresholdWindows
 */
export interface MonitorThresholdWindows {
  /**
   * How long a metric must be anomalous before triggering an alert
   *
   * @schema MonitorThresholdWindows#TriggerWindow
   */
  readonly triggerWindow?: string;

  /**
   * How long an anomalous metric must be normal before recovering from an alert state
   *
   * @schema MonitorThresholdWindows#RecoveryWindow
   */
  readonly recoveryWindow?: string;

}

/**
 * Converts an object of type 'MonitorThresholdWindows' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MonitorThresholdWindows(obj: MonitorThresholdWindows | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TriggerWindow': obj.triggerWindow,
    'RecoveryWindow': obj.recoveryWindow,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `Datadog::Monitors::Monitor`
 *
 * @cloudformationResource Datadog::Monitors::Monitor
 * @stability external
 * @link http://unknown-url
 */
export class CfnMonitor extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Datadog::Monitors::Monitor";

  /**
   * Resource props.
   */
  public readonly props: CfnMonitorProps;

  /**
   * Attribute `Datadog::Monitors::Monitor.Modified`
   * @link http://unknown-url
   */
  public readonly attrModified: string;
  /**
   * Attribute `Datadog::Monitors::Monitor.Deleted`
   * @link http://unknown-url
   */
  public readonly attrDeleted: string;
  /**
   * Attribute `Datadog::Monitors::Monitor.Created`
   * @link http://unknown-url
   */
  public readonly attrCreated: string;

  /**
   * Create a new `Datadog::Monitors::Monitor`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnMonitorProps) {
    super(scope, id, { type: CfnMonitor.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnMonitorProps(props)! });

    this.props = props;

    this.attrModified = cdk.Token.asString(this.getAtt('Modified'));
    this.attrDeleted = cdk.Token.asString(this.getAtt('Deleted'));
    this.attrCreated = cdk.Token.asString(this.getAtt('Created'));
  }
}