// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Manage a Site Reliability Guardian in Dynatrace
 *
 * @schema CfnSiteReliabilityGuardianProps
 */
export interface CfnSiteReliabilityGuardianProps {
  /**
   * The name of the Site Reliability Guardian.
   *
   * @schema CfnSiteReliabilityGuardianProps#Name
   */
  readonly name: string;

  /**
   * The description of the Site Reliability Guardian.
   *
   * @schema CfnSiteReliabilityGuardianProps#Description
   */
  readonly description?: string;

  /**
   * Define key/value pairs that further describe this guardian.
   *
   * @schema CfnSiteReliabilityGuardianProps#Tags
   */
  readonly tags: string[];

  /**
   * Define variables for dynamically defining DQL queries
   *
   * @schema CfnSiteReliabilityGuardianProps#Variables
   */
  readonly variables: Variable[];

  /**
   * Objectives are means for measuring the performance, availability, capacity, and security of your services.
   *
   * @schema CfnSiteReliabilityGuardianProps#Objectives
   */
  readonly objectives: Objective[];

}

/**
 * Converts an object of type 'CfnSiteReliabilityGuardianProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnSiteReliabilityGuardianProps(obj: CfnSiteReliabilityGuardianProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Description': obj.description,
    'Tags': obj.tags?.map(y => y),
    'Variables': obj.variables?.map(y => toJson_Variable(y)),
    'Objectives': obj.objectives?.map(y => toJson_Objective(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema Variable
 */
export interface Variable {
  /**
   * @schema Variable#Name
   */
  readonly name: string;

  /**
   * @schema Variable#Definition
   */
  readonly definition: string;

}

/**
 * Converts an object of type 'Variable' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Variable(obj: Variable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Definition': obj.definition,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema Objective
 */
export interface Objective {
  /**
   * @schema Objective#Name
   */
  readonly name: string;

  /**
   * @schema Objective#Description
   */
  readonly description?: string;

  /**
   * @schema Objective#ObjectiveType
   */
  readonly objectiveType: ObjectiveObjectiveType;

  /**
   * @schema Objective#ComparisonOperator
   */
  readonly comparisonOperator: ObjectiveComparisonOperator;

  /**
   * @schema Objective#DqlQuery
   */
  readonly dqlQuery?: string;

  /**
   * @schema Objective#Target
   */
  readonly target?: number;

  /**
   * @schema Objective#Warning
   */
  readonly warning?: number;

  /**
   * Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
   *
   * @schema Objective#ReferenceSlo
   */
  readonly referenceSlo?: string;

  /**
   * Auto-adaptive thresholds are a dynamic approach to baselining where the reference value for detecting anomalies changes over time.
   *
   * @schema Objective#AutoAdaptiveThresholdEnabled
   */
  readonly autoAdaptiveThresholdEnabled?: boolean;

}

/**
 * Converts an object of type 'Objective' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Objective(obj: Objective | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Description': obj.description,
    'ObjectiveType': obj.objectiveType,
    'ComparisonOperator': obj.comparisonOperator,
    'DqlQuery': obj.dqlQuery,
    'Target': obj.target,
    'Warning': obj.warning,
    'ReferenceSlo': obj.referenceSlo,
    'AutoAdaptiveThresholdEnabled': obj.autoAdaptiveThresholdEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ObjectiveObjectiveType
 */
export enum ObjectiveObjectiveType {
  /** DQL */
  DQL = "DQL",
  /** REFERENCE_SLO */
  REFERENCE_UNDERSCORE_SLO = "REFERENCE_SLO",
}

/**
 * @schema ObjectiveComparisonOperator
 */
export enum ObjectiveComparisonOperator {
  /** GREATER_THAN_OR_EQUAL */
  GREATER_UNDERSCORE_THAN_UNDERSCORE_OR_UNDERSCORE_EQUAL = "GREATER_THAN_OR_EQUAL",
  /** LESS_THAN_OR_EQUAL */
  LESS_UNDERSCORE_THAN_UNDERSCORE_OR_UNDERSCORE_EQUAL = "LESS_THAN_OR_EQUAL",
}


/**
 * A CloudFormation `Dynatrace::Automation::SiteReliabilityGuardian`
 *
 * @cloudformationResource Dynatrace::Automation::SiteReliabilityGuardian
 * @stability external
 * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
 */
export class CfnSiteReliabilityGuardian extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Dynatrace::Automation::SiteReliabilityGuardian";

  /**
   * Resource props.
   */
  public readonly props: CfnSiteReliabilityGuardianProps;

  /**
   * Attribute `Dynatrace::Automation::SiteReliabilityGuardian.ObjectId`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrObjectId: string;

  /**
   * Create a new `Dynatrace::Automation::SiteReliabilityGuardian`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnSiteReliabilityGuardianProps) {
    super(scope, id, { type: CfnSiteReliabilityGuardian.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnSiteReliabilityGuardianProps(props)! });

    this.props = props;

    this.attrObjectId = cdk.Token.asString(this.getAtt('ObjectId'));
  }
}