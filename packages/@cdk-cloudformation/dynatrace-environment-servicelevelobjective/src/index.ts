// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Manage a Service Level Objective in Dynatrace.
 *
 * @schema CfnServiceLevelObjectiveProps
 */
export interface CfnServiceLevelObjectiveProps {
  /**
   * The name of the SLO.
   *
   * @schema CfnServiceLevelObjectiveProps#Name
   */
  readonly name: string;

  /**
   * The description of the SLO.
   *
   * @schema CfnServiceLevelObjectiveProps#Description
   */
  readonly description?: string;

  /**
   * The name for a metric expression.
   *
   * @schema CfnServiceLevelObjectiveProps#MetricName
   */
  readonly metricName?: string;

  /**
   * The percentage-based metric expression for the calculation of the SLO.
   *
   * @schema CfnServiceLevelObjectiveProps#MetricExpression
   */
  readonly metricExpression?: string;

  /**
   * The evaluation type of the SLO.
   *
   * @schema CfnServiceLevelObjectiveProps#EvaluationType
   */
  readonly evaluationType: CfnServiceLevelObjectivePropsEvaluationType;

  /**
   * The entity filter for the SLO evaluation. Use the syntax of entity selector (https://dt-url.net/entityselector).
   *
   * @schema CfnServiceLevelObjectiveProps#Filter
   */
  readonly filter?: string;

  /**
   * The target value of the SLO.
   *
   * @schema CfnServiceLevelObjectiveProps#Target
   */
  readonly target?: number;

  /**
   * The warning value of the SLO.
   *
   * At warning state the SLO is still fulfilled but is getting close to failure.
   *
   * @schema CfnServiceLevelObjectiveProps#Warning
   */
  readonly warning?: number;

  /**
   * @schema CfnServiceLevelObjectiveProps#ErrorBudgetBurnRate
   */
  readonly errorBudgetBurnRate?: ErrorBudgetBurnRate;

  /**
   * The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.
   *
   * @schema CfnServiceLevelObjectiveProps#Timeframe
   */
  readonly timeframe: string;

  /**
   * The SLO is accessible through the settings if hasAccess is true.
   *
   * @schema CfnServiceLevelObjectiveProps#HasAccess
   */
  readonly hasAccess?: boolean;

}

/**
 * Converts an object of type 'CfnServiceLevelObjectiveProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServiceLevelObjectiveProps(obj: CfnServiceLevelObjectiveProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Description': obj.description,
    'MetricName': obj.metricName,
    'MetricExpression': obj.metricExpression,
    'EvaluationType': obj.evaluationType,
    'Filter': obj.filter,
    'Target': obj.target,
    'Warning': obj.warning,
    'ErrorBudgetBurnRate': toJson_ErrorBudgetBurnRate(obj.errorBudgetBurnRate),
    'Timeframe': obj.timeframe,
    'HasAccess': obj.hasAccess,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The evaluation type of the SLO.
 *
 * @schema CfnServiceLevelObjectivePropsEvaluationType
 */
export enum CfnServiceLevelObjectivePropsEvaluationType {
  /** AGGREGATE */
  AGGREGATE = "AGGREGATE",
}

/**
 * Error budget burn rate configuration of a service-level objective (SLO).
 *
 * @schema ErrorBudgetBurnRate
 */
export interface ErrorBudgetBurnRate {
  /**
   * The threshold between a slow and a fast burn rate.
   *
   * @schema ErrorBudgetBurnRate#FastBurnThreshold
   */
  readonly fastBurnThreshold: number;

  /**
   * The error budget burn rate visualization is enabled (true) or disabled (false).
   *
   * In case of false, no calculated values will be present here.
   *
   * @schema ErrorBudgetBurnRate#BurnRateVisualizationEnabled
   */
  readonly burnRateVisualizationEnabled: boolean;

}

/**
 * Converts an object of type 'ErrorBudgetBurnRate' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ErrorBudgetBurnRate(obj: ErrorBudgetBurnRate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FastBurnThreshold': obj.fastBurnThreshold,
    'BurnRateVisualizationEnabled': obj.burnRateVisualizationEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * A CloudFormation `Dynatrace::Environment::ServiceLevelObjective`
 *
 * @cloudformationResource Dynatrace::Environment::ServiceLevelObjective
 * @stability external
 * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
 */
export class CfnServiceLevelObjective extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Dynatrace::Environment::ServiceLevelObjective";

  /**
   * Resource props.
   */
  public readonly props: CfnServiceLevelObjectiveProps;

  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.Id`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrId: string;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.Enabled`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrEnabled: cdk.IResolvable;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.BurnRateMetricKey`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrBurnRateMetricKey: string;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.RelatedOpenProblems`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrRelatedOpenProblems: number;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.RelatedTotalProblems`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrRelatedTotalProblems: number;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.EvaluatedPercentage`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrEvaluatedPercentage: number;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.ErrorBudget`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrErrorBudget: number;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.MetricKey`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrMetricKey: string;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.Status`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrStatus: string;
  /**
   * Attribute `Dynatrace::Environment::ServiceLevelObjective.Error`
   * @link https://github.com/aws-ia/cloudformation-dynatrace-resource-providers.git
   */
  public readonly attrError: string;

  /**
   * Create a new `Dynatrace::Environment::ServiceLevelObjective`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnServiceLevelObjectiveProps) {
    super(scope, id, { type: CfnServiceLevelObjective.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnServiceLevelObjectiveProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrEnabled = this.getAtt('Enabled');
    this.attrBurnRateMetricKey = cdk.Token.asString(this.getAtt('BurnRateMetricKey'));
    this.attrRelatedOpenProblems = cdk.Token.asNumber(this.getAtt('RelatedOpenProblems'));
    this.attrRelatedTotalProblems = cdk.Token.asNumber(this.getAtt('RelatedTotalProblems'));
    this.attrEvaluatedPercentage = cdk.Token.asNumber(this.getAtt('EvaluatedPercentage'));
    this.attrErrorBudget = cdk.Token.asNumber(this.getAtt('ErrorBudget'));
    this.attrMetricKey = cdk.Token.asString(this.getAtt('MetricKey'));
    this.attrStatus = cdk.Token.asString(this.getAtt('Status'));
    this.attrError = cdk.Token.asString(this.getAtt('Error'));
  }
}