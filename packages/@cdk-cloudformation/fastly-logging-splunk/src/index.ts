// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Manage a Fastly Splunk Log.
 *
 * @schema CfnSplunkProps
 */
export interface CfnSplunkProps {
  /**
   * The version of the custom logging format used for the configured endpoint.
   *
   * @schema CfnSplunkProps#FormatVersion
   */
  readonly formatVersion?: CfnSplunkPropsFormatVersion;

  /**
   * The name for the real-time logging configuration.
   *
   * @schema CfnSplunkProps#Name
   */
  readonly name: string;

  /**
   * Where in the generated VCL the logging call should be placed.
   *
   * @schema CfnSplunkProps#Placement
   */
  readonly placement?: CfnSplunkPropsPlacement;

  /**
   * The maximum number of bytes sent in one request. Defaults 0 for unbounded. [Default 0]
   *
   * @schema CfnSplunkProps#RequestMaxBytes
   */
  readonly requestMaxBytes?: number;

  /**
   * The maximum number of logs sent in one request. Defaults 0 for unbounded. [Default 0]
   *
   * @schema CfnSplunkProps#RequestMaxEntries
   */
  readonly requestMaxEntries?: number;

  /**
   * The name of an existing condition in the configured endpoint, or leave blank to always execute.
   *
   * @schema CfnSplunkProps#ResponseCondition
   */
  readonly responseCondition?: string;

  /**
   * A secure certificate to authenticate a server with. Must be in PEM format.
   *
   * @schema CfnSplunkProps#TlsCaCert
   */
  readonly tlsCaCert?: string;

  /**
   * The client certificate used to make authenticated requests. Must be in PEM format.
   *
   * @schema CfnSplunkProps#TlsClientCert
   */
  readonly tlsClientCert?: string;

  /**
   * The client private key used to make authenticated requests. Must be in PEM format.
   *
   * @schema CfnSplunkProps#TlsClientKey
   */
  readonly tlsClientKey?: string;

  /**
   * The hostname to verify the server's certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported.
   *
   * @schema CfnSplunkProps#TlsHostname
   */
  readonly tlsHostname?: string;

  /**
   * A Splunk token for use in posting logs over HTTP to your collector.
   *
   * @schema CfnSplunkProps#Token
   */
  readonly token: string;

  /**
   * The URL to post logs to.
   *
   * @schema CfnSplunkProps#Url
   */
  readonly url: string;

  /**
   * Whether to use TLS. [Default 0]
   *
   * @schema CfnSplunkProps#UseTls
   */
  readonly useTls?: CfnSplunkPropsUseTls;

  /**
   * Alphanumeric string identifying the service. Read-only.
   *
   * @schema CfnSplunkProps#ServiceId
   */
  readonly serviceId?: string;

  /**
   * Id identifying the service version.
   *
   * @schema CfnSplunkProps#VersionId
   */
  readonly versionId?: number;

  /**
   * Integer identifying a domain version. Read-only.
   *
   * @schema CfnSplunkProps#Version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'CfnSplunkProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnSplunkProps(obj: CfnSplunkProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FormatVersion': obj.formatVersion,
    'Name': obj.name,
    'Placement': obj.placement,
    'RequestMaxBytes': obj.requestMaxBytes,
    'RequestMaxEntries': obj.requestMaxEntries,
    'ResponseCondition': obj.responseCondition,
    'TlsCaCert': obj.tlsCaCert,
    'TlsClientCert': obj.tlsClientCert,
    'TlsClientKey': obj.tlsClientKey,
    'TlsHostname': obj.tlsHostname,
    'Token': obj.token,
    'Url': obj.url,
    'UseTls': obj.useTls,
    'ServiceId': obj.serviceId,
    'VersionId': obj.versionId,
    'Version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The version of the custom logging format used for the configured endpoint.
 *
 * @schema CfnSplunkPropsFormatVersion
 */
export enum CfnSplunkPropsFormatVersion {
  /** 1 */
  VALUE_1 = 1,
  /** 2 */
  VALUE_2 = 2,
}

/**
 * Where in the generated VCL the logging call should be placed.
 *
 * @schema CfnSplunkPropsPlacement
 */
export enum CfnSplunkPropsPlacement {
  /** none */
  NONE = "none",
  /** waf_debug */
  WAF_UNDERSCORE_DEBUG = "waf_debug",
}

/**
 * Whether to use TLS. [Default 0]
 *
 * @schema CfnSplunkPropsUseTls
 */
export enum CfnSplunkPropsUseTls {
  /** 0 */
  VALUE_0 = 0,
  /** 1 */
  VALUE_1 = 1,
}


/**
 * A CloudFormation `Fastly::Logging::Splunk`
 *
 * @cloudformationResource Fastly::Logging::Splunk
 * @stability external
 * @link https://developer.fastly.com/reference/api/logging/splunk/
 */
export class CfnSplunk extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Fastly::Logging::Splunk";

  /**
   * Resource props.
   */
  public readonly props: CfnSplunkProps;

  /**
   * Attribute `Fastly::Logging::Splunk.CreatedAt`
   * @link https://developer.fastly.com/reference/api/logging/splunk/
   */
  public readonly attrCreatedAt: string;
  /**
   * Attribute `Fastly::Logging::Splunk.DeletedAt`
   * @link https://developer.fastly.com/reference/api/logging/splunk/
   */
  public readonly attrDeletedAt: string;
  /**
   * Attribute `Fastly::Logging::Splunk.UpdatedAt`
   * @link https://developer.fastly.com/reference/api/logging/splunk/
   */
  public readonly attrUpdatedAt: string;

  /**
   * Create a new `Fastly::Logging::Splunk`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnSplunkProps) {
    super(scope, id, { type: CfnSplunk.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnSplunkProps(props)! });

    this.props = props;

    this.attrCreatedAt = cdk.Token.asString(this.getAtt('CreatedAt'));
    this.attrDeletedAt = cdk.Token.asString(this.getAtt('DeletedAt'));
    this.attrUpdatedAt = cdk.Token.asString(this.getAtt('UpdatedAt'));
  }
}