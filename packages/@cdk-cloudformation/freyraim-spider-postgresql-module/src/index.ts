// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Schema for Module Fragment of type FreyrAIM::Spider::PostgreSQL::MODULE
 *
 * @schema CfnPostgreSqlModuleProps
 */
export interface CfnPostgreSqlModuleProps {
  /**
   * @schema CfnPostgreSqlModuleProps#Parameters
   */
  readonly parameters?: CfnPostgreSqlModulePropsParameters;

  /**
   * @schema CfnPostgreSqlModuleProps#Resources
   */
  readonly resources?: CfnPostgreSqlModulePropsResources;

}

/**
 * Converts an object of type 'CfnPostgreSqlModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModuleProps(obj: CfnPostgreSqlModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnPostgreSqlModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnPostgreSqlModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnPostgreSqlModulePropsParameters
 */
export interface CfnPostgreSqlModulePropsParameters {
  /**
   * The environment name
   *
   * @schema CfnPostgreSqlModulePropsParameters#EnvName
   */
  readonly envName?: CfnPostgreSqlModulePropsParametersEnvName;

  /**
   * Username for database access
   *
   * @schema CfnPostgreSqlModulePropsParameters#DBUsername
   */
  readonly dbUsername?: CfnPostgreSqlModulePropsParametersDbUsername;

  /**
   * Password database access
   *
   * @schema CfnPostgreSqlModulePropsParameters#DBPassword
   */
  readonly dbPassword?: CfnPostgreSqlModulePropsParametersDbPassword;

  /**
   * The environment name
   *
   * @schema CfnPostgreSqlModulePropsParameters#Test
   */
  readonly test?: CfnPostgreSqlModulePropsParametersTest;

}

/**
 * Converts an object of type 'CfnPostgreSqlModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModulePropsParameters(obj: CfnPostgreSqlModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EnvName': toJson_CfnPostgreSqlModulePropsParametersEnvName(obj.envName),
    'DBUsername': toJson_CfnPostgreSqlModulePropsParametersDbUsername(obj.dbUsername),
    'DBPassword': toJson_CfnPostgreSqlModulePropsParametersDbPassword(obj.dbPassword),
    'Test': toJson_CfnPostgreSqlModulePropsParametersTest(obj.test),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnPostgreSqlModulePropsResources
 */
export interface CfnPostgreSqlModulePropsResources {
  /**
   * @schema CfnPostgreSqlModulePropsResources#PostgreSQL
   */
  readonly postgreSql?: CfnPostgreSqlModulePropsResourcesPostgreSql;

}

/**
 * Converts an object of type 'CfnPostgreSqlModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModulePropsResources(obj: CfnPostgreSqlModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PostgreSQL': toJson_CfnPostgreSqlModulePropsResourcesPostgreSql(obj.postgreSql),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The environment name
 *
 * @schema CfnPostgreSqlModulePropsParametersEnvName
 */
export interface CfnPostgreSqlModulePropsParametersEnvName {
  /**
   * @schema CfnPostgreSqlModulePropsParametersEnvName#Type
   */
  readonly type: string;

  /**
   * @schema CfnPostgreSqlModulePropsParametersEnvName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnPostgreSqlModulePropsParametersEnvName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModulePropsParametersEnvName(obj: CfnPostgreSqlModulePropsParametersEnvName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Username for database access
 *
 * @schema CfnPostgreSqlModulePropsParametersDbUsername
 */
export interface CfnPostgreSqlModulePropsParametersDbUsername {
  /**
   * @schema CfnPostgreSqlModulePropsParametersDbUsername#Type
   */
  readonly type: string;

  /**
   * @schema CfnPostgreSqlModulePropsParametersDbUsername#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnPostgreSqlModulePropsParametersDbUsername' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModulePropsParametersDbUsername(obj: CfnPostgreSqlModulePropsParametersDbUsername | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Password database access
 *
 * @schema CfnPostgreSqlModulePropsParametersDbPassword
 */
export interface CfnPostgreSqlModulePropsParametersDbPassword {
  /**
   * @schema CfnPostgreSqlModulePropsParametersDbPassword#Type
   */
  readonly type: string;

  /**
   * @schema CfnPostgreSqlModulePropsParametersDbPassword#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnPostgreSqlModulePropsParametersDbPassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModulePropsParametersDbPassword(obj: CfnPostgreSqlModulePropsParametersDbPassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The environment name
 *
 * @schema CfnPostgreSqlModulePropsParametersTest
 */
export interface CfnPostgreSqlModulePropsParametersTest {
  /**
   * @schema CfnPostgreSqlModulePropsParametersTest#Type
   */
  readonly type: string;

  /**
   * @schema CfnPostgreSqlModulePropsParametersTest#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnPostgreSqlModulePropsParametersTest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModulePropsParametersTest(obj: CfnPostgreSqlModulePropsParametersTest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnPostgreSqlModulePropsResourcesPostgreSql
 */
export interface CfnPostgreSqlModulePropsResourcesPostgreSql {
  /**
   * @schema CfnPostgreSqlModulePropsResourcesPostgreSql#Type
   */
  readonly type?: string;

  /**
   * @schema CfnPostgreSqlModulePropsResourcesPostgreSql#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnPostgreSqlModulePropsResourcesPostgreSql' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnPostgreSqlModulePropsResourcesPostgreSql(obj: CfnPostgreSqlModulePropsResourcesPostgreSql | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `FreyrAIM::Spider::PostgreSQL::MODULE`
 *
 * @cloudformationResource FreyrAIM::Spider::PostgreSQL::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnPostgreSqlModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "FreyrAIM::Spider::PostgreSQL::MODULE";

  /**
   * Resource props.
   */
  public readonly props: CfnPostgreSqlModuleProps;


  /**
   * Create a new `FreyrAIM::Spider::PostgreSQL::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnPostgreSqlModuleProps) {
    super(scope, id, { type: CfnPostgreSqlModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnPostgreSqlModuleProps(props)! });

    this.props = props;

  }
}