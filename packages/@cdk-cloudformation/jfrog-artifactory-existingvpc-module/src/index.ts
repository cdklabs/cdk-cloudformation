// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Schema for Module Fragment of type JFrog::Artifactory::ExistingVpc::MODULE
 *
 * @schema CfnExistingVpcModuleProps
 */
export interface CfnExistingVpcModuleProps {
  /**
   * @schema CfnExistingVpcModuleProps#Parameters
   */
  readonly parameters?: CfnExistingVpcModulePropsParameters;

  /**
   * @schema CfnExistingVpcModuleProps#Resources
   */
  readonly resources?: CfnExistingVpcModulePropsResources;

}

/**
 * Converts an object of type 'CfnExistingVpcModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModuleProps(obj: CfnExistingVpcModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnExistingVpcModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnExistingVpcModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsParameters
 */
export interface CfnExistingVpcModulePropsParameters {
  /**
   * Logical Id of the MODULE
   *
   * @schema CfnExistingVpcModulePropsParameters#LogicalId
   */
  readonly logicalId?: CfnExistingVpcModulePropsParametersLogicalId;

  /**
   * Availability Zone 1 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
   *
   * @schema CfnExistingVpcModulePropsParameters#AvailabilityZone1
   */
  readonly availabilityZone1?: CfnExistingVpcModulePropsParametersAvailabilityZone1;

  /**
   * Availability Zone 2 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
   *
   * @schema CfnExistingVpcModulePropsParameters#AvailabilityZone2
   */
  readonly availabilityZone2?: CfnExistingVpcModulePropsParametersAvailabilityZone2;

  /**
   * Name of an existing key pair, which allows you to connect securely to your instance after it launches. This is the key pair you created in your preferred Region.
   *
   * @schema CfnExistingVpcModulePropsParameters#KeyPairName
   */
  readonly keyPairName?: CfnExistingVpcModulePropsParametersKeyPairName;

  /**
   * ID of your existing VPC (e.g., vpc-0343606e).
   *
   * @schema CfnExistingVpcModulePropsParameters#VpcId
   */
  readonly vpcId?: CfnExistingVpcModulePropsParametersVpcId;

  /**
   * CIDR block for the VPC.
   *
   * @schema CfnExistingVpcModulePropsParameters#VpcCidr
   */
  readonly vpcCidr?: CfnExistingVpcModulePropsParametersVpcCidr;

  /**
   * ID of the private subnet in Availability Zone 2 of your existing VPC (e.g., subnet-z0376dab).
   *
   * @schema CfnExistingVpcModulePropsParameters#PrivateSubnet2Id
   */
  readonly privateSubnet2Id?: CfnExistingVpcModulePropsParametersPrivateSubnet2Id;

  /**
   * ID of the private subnet in Availability Zone 1 of your existing VPC (e.g., subnet-z0376dab).
   *
   * @schema CfnExistingVpcModulePropsParameters#PrivateSubnet1Id
   */
  readonly privateSubnet1Id?: CfnExistingVpcModulePropsParametersPrivateSubnet1Id;

  /**
   * ID of the public subnet in Availability Zone 1 of your existing VPC (e.g., subnet-z0376dab).
   *
   * @schema CfnExistingVpcModulePropsParameters#PublicSubnet1Id
   */
  readonly publicSubnet1Id?: CfnExistingVpcModulePropsParametersPublicSubnet1Id;

  /**
   * ID of the public subnet in Availability Zone 1 of your existing VPC (e.g., subnet-z0376dab).
   *
   * @schema CfnExistingVpcModulePropsParameters#PublicSubnet2Id
   */
  readonly publicSubnet2Id?: CfnExistingVpcModulePropsParametersPublicSubnet2Id;

  /**
   * CIDR of the private subnet in Availability Zone 1 of your existing VPC (e.g., 10.0.0.0/19).
   *
   * @schema CfnExistingVpcModulePropsParameters#PrivateSubnet1Cidr
   */
  readonly privateSubnet1Cidr?: CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr;

  /**
   * CIDR of the private subnet in Availability Zone 2 of your existing VPC (e.g., 10.0.32.0/19).
   *
   * @schema CfnExistingVpcModulePropsParameters#PrivateSubnet2Cidr
   */
  readonly privateSubnet2Cidr?: CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr;

  /**
   * CIDR IP range that is permitted to access Artifactory. We recommend that you set this value to a trusted IP range. For example, you might want to grant only your corporate network access to the software.
   *
   * @schema CfnExistingVpcModulePropsParameters#AccessCidr
   */
  readonly accessCidr?: CfnExistingVpcModulePropsParametersAccessCidr;

  /**
   * Remote CIDR range that allows you to connect to the bastion instance by using SSH. We recommend that you set this value to a trusted IP range. For example, you might want to grant specific ranges inside your corporate network SSH access.
   *
   * @schema CfnExistingVpcModulePropsParameters#RemoteAccessCidr
   */
  readonly remoteAccessCidr?: CfnExistingVpcModulePropsParametersRemoteAccessCidr;

  /**
   * Choose whether this is internet facing or internal.
   *
   * @schema CfnExistingVpcModulePropsParameters#ELBScheme
   */
  readonly elbScheme?: CfnExistingVpcModulePropsParametersElbScheme;

  /**
   * If set to true, a bastion host will be created.
   *
   * @schema CfnExistingVpcModulePropsParameters#EnableBastion
   */
  readonly enableBastion?: CfnExistingVpcModulePropsParametersEnableBastion;

  /**
   * Size of the bastion instances.
   *
   * @schema CfnExistingVpcModulePropsParameters#BastionInstanceType
   */
  readonly bastionInstanceType?: CfnExistingVpcModulePropsParametersBastionInstanceType;

  /**
   * Size of the root volume on the bastion instances.
   *
   * @schema CfnExistingVpcModulePropsParameters#BastionRootVolumeSize
   */
  readonly bastionRootVolumeSize?: CfnExistingVpcModulePropsParametersBastionRootVolumeSize;

  /**
   * Choose whether to enable TCPForwarding via the bootstrapping of the bastion instance or not.
   *
   * @schema CfnExistingVpcModulePropsParameters#BastionEnableTcpForwarding
   */
  readonly bastionEnableTcpForwarding?: CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding;

  /**
   * Choose true to enable X11 via the bootstrapping of the bastion host. Setting this value to true will enable X Windows over SSH. X11 forwarding can be useful, but it is also a security risk, so it's recommended that you keep the default (false) setting.
   *
   * @schema CfnExistingVpcModulePropsParameters#BastionEnableX11Forwarding
   */
  readonly bastionEnableX11Forwarding?: CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding;

  /**
   * Linux distribution for the Amazon Machine Image (AMI) to be used for the bastion instances.
   *
   * @schema CfnExistingVpcModulePropsParameters#BastionOs
   */
  readonly bastionOs?: CfnExistingVpcModulePropsParametersBastionOs;

  /**
   * Number of bastion instances to create.
   *
   * @schema CfnExistingVpcModulePropsParameters#NumBastionHosts
   */
  readonly numBastionHosts?: CfnExistingVpcModulePropsParametersNumBastionHosts;

  /**
   * Size in gigabytes of the available storage (min 10GB); the Quick Start will create an Amazon Elastic Block Store (Amazon EBS) volumes of this size.
   *
   * @schema CfnExistingVpcModulePropsParameters#VolumeSize
   */
  readonly volumeSize?: CfnExistingVpcModulePropsParametersVolumeSize;

  /**
   * EC2 type for the Artifactory instances.
   *
   * @schema CfnExistingVpcModulePropsParameters#InstanceType
   */
  readonly instanceType?: CfnExistingVpcModulePropsParametersInstanceType;

  /**
   * Number of secondary Artifactory servers to complete your HA deployment. To align with Artifactory best practices, the minimum number is two and the maximum is seven. Do not select more instances than you have licenses for.
   *
   * @schema CfnExistingVpcModulePropsParameters#NumberOfSecondary
   */
  readonly numberOfSecondary?: CfnExistingVpcModulePropsParametersNumberOfSecondary;

  /**
   * JFrog Artifactory product you want to install into an AMI.
   *
   * @schema CfnExistingVpcModulePropsParameters#ArtifactoryProduct
   */
  readonly artifactoryProduct?: CfnExistingVpcModulePropsParametersArtifactoryProduct;

  /**
   * Version of Artifactory that you want to deploy into the Quick Start. See the release notes to select the version you want to deploy at https://www.jfrog.com/confluence/display/RTF/Release+Notes.
   *
   * @schema CfnExistingVpcModulePropsParameters#ArtifactoryVersion
   */
  readonly artifactoryVersion?: CfnExistingVpcModulePropsParametersArtifactoryVersion;

  /**
   * Secret name created in AWS Secrets Manager, which contains the Artifactory licenses.
   *
   * @schema CfnExistingVpcModulePropsParameters#SmLicenseName
   */
  readonly smLicenseName?: CfnExistingVpcModulePropsParametersSmLicenseName;

  /**
   * Secret name created in AWS Secrets Manager, which contains the SSL certificate and certificate key.
   *
   * @schema CfnExistingVpcModulePropsParameters#SmCertName
   */
  readonly smCertName?: CfnExistingVpcModulePropsParametersSmCertName;

  /**
   * Name of your Artifactory server. Ensure that this matches your certificate.
   *
   * @schema CfnExistingVpcModulePropsParameters#ArtifactoryServerName
   */
  readonly artifactoryServerName?: CfnExistingVpcModulePropsParametersArtifactoryServerName;

  /**
   * Master key for the Artifactory cluster. Generate a master key by using the command '$openssl rand -hex 16'.
   *
   * @schema CfnExistingVpcModulePropsParameters#MasterKey
   */
  readonly masterKey?: CfnExistingVpcModulePropsParametersMasterKey;

  /**
   * Set Java options to pass to the JVM for Artifactory. For more information, see the Artifactory system requirements at https://www.jfrog.com/confluence/display/RTF/System+Requirements#SystemRequirements-RecommendedHardware. Do not add Xms or Xmx settings without disabling DefaultJavaMemSettings.
   *
   * @schema CfnExistingVpcModulePropsParameters#ExtraJavaOptions
   */
  readonly extraJavaOptions?: CfnExistingVpcModulePropsParametersExtraJavaOptions;

  /**
   * Choose false to overwrite the standard memory-calculation options to pass to the Artifactory JVM. If you plan to overwrite them, ensure they are added to the ExtraJavaOptions to prevent the stack provision from failing.
   *
   * @schema CfnExistingVpcModulePropsParameters#DefaultJavaMemSettings
   */
  readonly defaultJavaMemSettings?: CfnExistingVpcModulePropsParametersDefaultJavaMemSettings;

  /**
   * Name of your database instance. The name must be unique across all instances owned by your AWS account in the current Region. The database instance identifier is case-insensitive, but it's stored in lowercase (as in "mydbinstance").
   *
   * @schema CfnExistingVpcModulePropsParameters#DatabaseName
   */
  readonly databaseName?: CfnExistingVpcModulePropsParametersDatabaseName;

  /**
   * Database engine that you want to run, which is currently locked to MySQL.
   *
   * @schema CfnExistingVpcModulePropsParameters#DatabaseEngine
   */
  readonly databaseEngine?: CfnExistingVpcModulePropsParametersDatabaseEngine;

  /**
   * Login ID for the master user of your database instance.
   *
   * @schema CfnExistingVpcModulePropsParameters#DatabaseUser
   */
  readonly databaseUser?: CfnExistingVpcModulePropsParametersDatabaseUser;

  /**
   * Password for the Artifactory database user.
   *
   * @schema CfnExistingVpcModulePropsParameters#DatabasePassword
   */
  readonly databasePassword?: CfnExistingVpcModulePropsParametersDatabasePassword;

  /**
   * Size of the database to be deployed as part of the Quick Start.
   *
   * @schema CfnExistingVpcModulePropsParameters#DatabaseInstance
   */
  readonly databaseInstance?: CfnExistingVpcModulePropsParametersDatabaseInstance;

  /**
   * Size in gigabytes of the available storage for the database instance.
   *
   * @schema CfnExistingVpcModulePropsParameters#DatabaseAllocatedStorage
   */
  readonly databaseAllocatedStorage?: CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage;

  /**
   * Preferred availability zone for Amazon RDS primary instance
   *
   * @schema CfnExistingVpcModulePropsParameters#DatabasePreferredAz
   */
  readonly databasePreferredAz?: CfnExistingVpcModulePropsParametersDatabasePreferredAz;

  /**
   * Choose false to create an Amazon RDS instance in a single Availability Zone.
   *
   * @schema CfnExistingVpcModulePropsParameters#MultiAzDatabase
   */
  readonly multiAzDatabase?: CfnExistingVpcModulePropsParametersMultiAzDatabase;

  /**
   * S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
   *
   * @schema CfnExistingVpcModulePropsParameters#QsS3BucketName
   */
  readonly qsS3BucketName?: CfnExistingVpcModulePropsParametersQsS3BucketName;

  /**
   * S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
   *
   * @schema CfnExistingVpcModulePropsParameters#QsS3KeyPrefix
   */
  readonly qsS3KeyPrefix?: CfnExistingVpcModulePropsParametersQsS3KeyPrefix;

  /**
   * AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. If you use your own bucket, you must specify your own value.
   *
   * @schema CfnExistingVpcModulePropsParameters#QsS3BucketRegion
   */
  readonly qsS3BucketRegion?: CfnExistingVpcModulePropsParametersQsS3BucketRegion;

  /**
   * Choose true to install JFrog Xray instance(s).
   *
   * @schema CfnExistingVpcModulePropsParameters#InstallXray
   */
  readonly installXray?: CfnExistingVpcModulePropsParametersInstallXray;

  /**
   * The version of Xray that you want to deploy into the Quick Start.
   *
   * @schema CfnExistingVpcModulePropsParameters#XrayVersion
   */
  readonly xrayVersion?: CfnExistingVpcModulePropsParametersXrayVersion;

  /**
   * The number of Xray instances servers to complete your HA deployment. The minimum number is one; the maximum is seven. Do not select more than instances than you have licenses for.
   *
   * @schema CfnExistingVpcModulePropsParameters#XrayNumberOfInstances
   */
  readonly xrayNumberOfInstances?: CfnExistingVpcModulePropsParametersXrayNumberOfInstances;

  /**
   * The EC2 instance type for the Xray instances.
   *
   * @schema CfnExistingVpcModulePropsParameters#XrayInstanceType
   */
  readonly xrayInstanceType?: CfnExistingVpcModulePropsParametersXrayInstanceType;

  /**
   * The login ID for the Xray database user.
   *
   * @schema CfnExistingVpcModulePropsParameters#XrayDatabaseUser
   */
  readonly xrayDatabaseUser?: CfnExistingVpcModulePropsParametersXrayDatabaseUser;

  /**
   * The password for the Xray database user.
   *
   * @schema CfnExistingVpcModulePropsParameters#XrayDatabasePassword
   */
  readonly xrayDatabasePassword?: CfnExistingVpcModulePropsParametersXrayDatabasePassword;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParameters(obj: CfnExistingVpcModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogicalId': toJson_CfnExistingVpcModulePropsParametersLogicalId(obj.logicalId),
    'AvailabilityZone1': toJson_CfnExistingVpcModulePropsParametersAvailabilityZone1(obj.availabilityZone1),
    'AvailabilityZone2': toJson_CfnExistingVpcModulePropsParametersAvailabilityZone2(obj.availabilityZone2),
    'KeyPairName': toJson_CfnExistingVpcModulePropsParametersKeyPairName(obj.keyPairName),
    'VpcId': toJson_CfnExistingVpcModulePropsParametersVpcId(obj.vpcId),
    'VpcCidr': toJson_CfnExistingVpcModulePropsParametersVpcCidr(obj.vpcCidr),
    'PrivateSubnet2Id': toJson_CfnExistingVpcModulePropsParametersPrivateSubnet2Id(obj.privateSubnet2Id),
    'PrivateSubnet1Id': toJson_CfnExistingVpcModulePropsParametersPrivateSubnet1Id(obj.privateSubnet1Id),
    'PublicSubnet1Id': toJson_CfnExistingVpcModulePropsParametersPublicSubnet1Id(obj.publicSubnet1Id),
    'PublicSubnet2Id': toJson_CfnExistingVpcModulePropsParametersPublicSubnet2Id(obj.publicSubnet2Id),
    'PrivateSubnet1Cidr': toJson_CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr(obj.privateSubnet1Cidr),
    'PrivateSubnet2Cidr': toJson_CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr(obj.privateSubnet2Cidr),
    'AccessCidr': toJson_CfnExistingVpcModulePropsParametersAccessCidr(obj.accessCidr),
    'RemoteAccessCidr': toJson_CfnExistingVpcModulePropsParametersRemoteAccessCidr(obj.remoteAccessCidr),
    'ELBScheme': toJson_CfnExistingVpcModulePropsParametersElbScheme(obj.elbScheme),
    'EnableBastion': toJson_CfnExistingVpcModulePropsParametersEnableBastion(obj.enableBastion),
    'BastionInstanceType': toJson_CfnExistingVpcModulePropsParametersBastionInstanceType(obj.bastionInstanceType),
    'BastionRootVolumeSize': toJson_CfnExistingVpcModulePropsParametersBastionRootVolumeSize(obj.bastionRootVolumeSize),
    'BastionEnableTcpForwarding': toJson_CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding(obj.bastionEnableTcpForwarding),
    'BastionEnableX11Forwarding': toJson_CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding(obj.bastionEnableX11Forwarding),
    'BastionOs': toJson_CfnExistingVpcModulePropsParametersBastionOs(obj.bastionOs),
    'NumBastionHosts': toJson_CfnExistingVpcModulePropsParametersNumBastionHosts(obj.numBastionHosts),
    'VolumeSize': toJson_CfnExistingVpcModulePropsParametersVolumeSize(obj.volumeSize),
    'InstanceType': toJson_CfnExistingVpcModulePropsParametersInstanceType(obj.instanceType),
    'NumberOfSecondary': toJson_CfnExistingVpcModulePropsParametersNumberOfSecondary(obj.numberOfSecondary),
    'ArtifactoryProduct': toJson_CfnExistingVpcModulePropsParametersArtifactoryProduct(obj.artifactoryProduct),
    'ArtifactoryVersion': toJson_CfnExistingVpcModulePropsParametersArtifactoryVersion(obj.artifactoryVersion),
    'SmLicenseName': toJson_CfnExistingVpcModulePropsParametersSmLicenseName(obj.smLicenseName),
    'SmCertName': toJson_CfnExistingVpcModulePropsParametersSmCertName(obj.smCertName),
    'ArtifactoryServerName': toJson_CfnExistingVpcModulePropsParametersArtifactoryServerName(obj.artifactoryServerName),
    'MasterKey': toJson_CfnExistingVpcModulePropsParametersMasterKey(obj.masterKey),
    'ExtraJavaOptions': toJson_CfnExistingVpcModulePropsParametersExtraJavaOptions(obj.extraJavaOptions),
    'DefaultJavaMemSettings': toJson_CfnExistingVpcModulePropsParametersDefaultJavaMemSettings(obj.defaultJavaMemSettings),
    'DatabaseName': toJson_CfnExistingVpcModulePropsParametersDatabaseName(obj.databaseName),
    'DatabaseEngine': toJson_CfnExistingVpcModulePropsParametersDatabaseEngine(obj.databaseEngine),
    'DatabaseUser': toJson_CfnExistingVpcModulePropsParametersDatabaseUser(obj.databaseUser),
    'DatabasePassword': toJson_CfnExistingVpcModulePropsParametersDatabasePassword(obj.databasePassword),
    'DatabaseInstance': toJson_CfnExistingVpcModulePropsParametersDatabaseInstance(obj.databaseInstance),
    'DatabaseAllocatedStorage': toJson_CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage(obj.databaseAllocatedStorage),
    'DatabasePreferredAz': toJson_CfnExistingVpcModulePropsParametersDatabasePreferredAz(obj.databasePreferredAz),
    'MultiAzDatabase': toJson_CfnExistingVpcModulePropsParametersMultiAzDatabase(obj.multiAzDatabase),
    'QsS3BucketName': toJson_CfnExistingVpcModulePropsParametersQsS3BucketName(obj.qsS3BucketName),
    'QsS3KeyPrefix': toJson_CfnExistingVpcModulePropsParametersQsS3KeyPrefix(obj.qsS3KeyPrefix),
    'QsS3BucketRegion': toJson_CfnExistingVpcModulePropsParametersQsS3BucketRegion(obj.qsS3BucketRegion),
    'InstallXray': toJson_CfnExistingVpcModulePropsParametersInstallXray(obj.installXray),
    'XrayVersion': toJson_CfnExistingVpcModulePropsParametersXrayVersion(obj.xrayVersion),
    'XrayNumberOfInstances': toJson_CfnExistingVpcModulePropsParametersXrayNumberOfInstances(obj.xrayNumberOfInstances),
    'XrayInstanceType': toJson_CfnExistingVpcModulePropsParametersXrayInstanceType(obj.xrayInstanceType),
    'XrayDatabaseUser': toJson_CfnExistingVpcModulePropsParametersXrayDatabaseUser(obj.xrayDatabaseUser),
    'XrayDatabasePassword': toJson_CfnExistingVpcModulePropsParametersXrayDatabasePassword(obj.xrayDatabasePassword),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResources
 */
export interface CfnExistingVpcModulePropsResources {
  /**
   * @schema CfnExistingVpcModulePropsResources#BastionStack
   */
  readonly bastionStack?: CfnExistingVpcModulePropsResourcesBastionStack;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryCoreInfraStack
   */
  readonly artifactoryCoreInfraStack?: CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryElb
   */
  readonly artifactoryElb?: CfnExistingVpcModulePropsResourcesArtifactoryElb;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactorySslTargetGroup
   */
  readonly artifactorySslTargetGroup?: CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryTargetGroup
   */
  readonly artifactoryTargetGroup?: CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactorySslElbListener
   */
  readonly artifactorySslElbListener?: CfnExistingVpcModulePropsResourcesArtifactorySslElbListener;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryElbListener
   */
  readonly artifactoryElbListener?: CfnExistingVpcModulePropsResourcesArtifactoryElbListener;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryInternalElb
   */
  readonly artifactoryInternalElb?: CfnExistingVpcModulePropsResourcesArtifactoryInternalElb;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryInternalTargetGroup
   */
  readonly artifactoryInternalTargetGroup?: CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryInternalElbListener
   */
  readonly artifactoryInternalElbListener?: CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryEc2Sg
   */
  readonly artifactoryEc2Sg?: CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryHostRole
   */
  readonly artifactoryHostRole?: CfnExistingVpcModulePropsResourcesArtifactoryHostRole;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryHostProfile
   */
  readonly artifactoryHostProfile?: CfnExistingVpcModulePropsResourcesArtifactoryHostProfile;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactoryPrimary
   */
  readonly artifactoryPrimary?: CfnExistingVpcModulePropsResourcesArtifactoryPrimary;

  /**
   * @schema CfnExistingVpcModulePropsResources#ArtifactorySecondary
   */
  readonly artifactorySecondary?: CfnExistingVpcModulePropsResourcesArtifactorySecondary;

  /**
   * @schema CfnExistingVpcModulePropsResources#XrayHostRole
   */
  readonly xrayHostRole?: CfnExistingVpcModulePropsResourcesXrayHostRole;

  /**
   * @schema CfnExistingVpcModulePropsResources#XrayHostProfile
   */
  readonly xrayHostProfile?: CfnExistingVpcModulePropsResourcesXrayHostProfile;

  /**
   * @schema CfnExistingVpcModulePropsResources#XrayExistingVpcStack
   */
  readonly xrayExistingVpcStack?: CfnExistingVpcModulePropsResourcesXrayExistingVpcStack;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResources(obj: CfnExistingVpcModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BastionStack': toJson_CfnExistingVpcModulePropsResourcesBastionStack(obj.bastionStack),
    'ArtifactoryCoreInfraStack': toJson_CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack(obj.artifactoryCoreInfraStack),
    'ArtifactoryElb': toJson_CfnExistingVpcModulePropsResourcesArtifactoryElb(obj.artifactoryElb),
    'ArtifactorySslTargetGroup': toJson_CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup(obj.artifactorySslTargetGroup),
    'ArtifactoryTargetGroup': toJson_CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup(obj.artifactoryTargetGroup),
    'ArtifactorySslElbListener': toJson_CfnExistingVpcModulePropsResourcesArtifactorySslElbListener(obj.artifactorySslElbListener),
    'ArtifactoryElbListener': toJson_CfnExistingVpcModulePropsResourcesArtifactoryElbListener(obj.artifactoryElbListener),
    'ArtifactoryInternalElb': toJson_CfnExistingVpcModulePropsResourcesArtifactoryInternalElb(obj.artifactoryInternalElb),
    'ArtifactoryInternalTargetGroup': toJson_CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup(obj.artifactoryInternalTargetGroup),
    'ArtifactoryInternalElbListener': toJson_CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener(obj.artifactoryInternalElbListener),
    'ArtifactoryEc2Sg': toJson_CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg(obj.artifactoryEc2Sg),
    'ArtifactoryHostRole': toJson_CfnExistingVpcModulePropsResourcesArtifactoryHostRole(obj.artifactoryHostRole),
    'ArtifactoryHostProfile': toJson_CfnExistingVpcModulePropsResourcesArtifactoryHostProfile(obj.artifactoryHostProfile),
    'ArtifactoryPrimary': toJson_CfnExistingVpcModulePropsResourcesArtifactoryPrimary(obj.artifactoryPrimary),
    'ArtifactorySecondary': toJson_CfnExistingVpcModulePropsResourcesArtifactorySecondary(obj.artifactorySecondary),
    'XrayHostRole': toJson_CfnExistingVpcModulePropsResourcesXrayHostRole(obj.xrayHostRole),
    'XrayHostProfile': toJson_CfnExistingVpcModulePropsResourcesXrayHostProfile(obj.xrayHostProfile),
    'XrayExistingVpcStack': toJson_CfnExistingVpcModulePropsResourcesXrayExistingVpcStack(obj.xrayExistingVpcStack),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Logical Id of the MODULE
 *
 * @schema CfnExistingVpcModulePropsParametersLogicalId
 */
export interface CfnExistingVpcModulePropsParametersLogicalId {
  /**
   * @schema CfnExistingVpcModulePropsParametersLogicalId#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersLogicalId#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersLogicalId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersLogicalId(obj: CfnExistingVpcModulePropsParametersLogicalId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Availability Zone 1 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
 *
 * @schema CfnExistingVpcModulePropsParametersAvailabilityZone1
 */
export interface CfnExistingVpcModulePropsParametersAvailabilityZone1 {
  /**
   * @schema CfnExistingVpcModulePropsParametersAvailabilityZone1#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersAvailabilityZone1#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersAvailabilityZone1' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersAvailabilityZone1(obj: CfnExistingVpcModulePropsParametersAvailabilityZone1 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Availability Zone 2 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
 *
 * @schema CfnExistingVpcModulePropsParametersAvailabilityZone2
 */
export interface CfnExistingVpcModulePropsParametersAvailabilityZone2 {
  /**
   * @schema CfnExistingVpcModulePropsParametersAvailabilityZone2#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersAvailabilityZone2#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersAvailabilityZone2' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersAvailabilityZone2(obj: CfnExistingVpcModulePropsParametersAvailabilityZone2 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of an existing key pair, which allows you to connect securely to your instance after it launches. This is the key pair you created in your preferred Region.
 *
 * @schema CfnExistingVpcModulePropsParametersKeyPairName
 */
export interface CfnExistingVpcModulePropsParametersKeyPairName {
  /**
   * @schema CfnExistingVpcModulePropsParametersKeyPairName#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersKeyPairName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersKeyPairName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersKeyPairName(obj: CfnExistingVpcModulePropsParametersKeyPairName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ID of your existing VPC (e.g., vpc-0343606e).
 *
 * @schema CfnExistingVpcModulePropsParametersVpcId
 */
export interface CfnExistingVpcModulePropsParametersVpcId {
  /**
   * @schema CfnExistingVpcModulePropsParametersVpcId#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersVpcId#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersVpcId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersVpcId(obj: CfnExistingVpcModulePropsParametersVpcId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for the VPC.
 *
 * @schema CfnExistingVpcModulePropsParametersVpcCidr
 */
export interface CfnExistingVpcModulePropsParametersVpcCidr {
  /**
   * @schema CfnExistingVpcModulePropsParametersVpcCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersVpcCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersVpcCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersVpcCidr(obj: CfnExistingVpcModulePropsParametersVpcCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ID of the private subnet in Availability Zone 2 of your existing VPC (e.g., subnet-z0376dab).
 *
 * @schema CfnExistingVpcModulePropsParametersPrivateSubnet2Id
 */
export interface CfnExistingVpcModulePropsParametersPrivateSubnet2Id {
  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet2Id#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet2Id#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersPrivateSubnet2Id' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersPrivateSubnet2Id(obj: CfnExistingVpcModulePropsParametersPrivateSubnet2Id | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ID of the private subnet in Availability Zone 1 of your existing VPC (e.g., subnet-z0376dab).
 *
 * @schema CfnExistingVpcModulePropsParametersPrivateSubnet1Id
 */
export interface CfnExistingVpcModulePropsParametersPrivateSubnet1Id {
  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet1Id#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet1Id#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersPrivateSubnet1Id' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersPrivateSubnet1Id(obj: CfnExistingVpcModulePropsParametersPrivateSubnet1Id | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ID of the public subnet in Availability Zone 1 of your existing VPC (e.g., subnet-z0376dab).
 *
 * @schema CfnExistingVpcModulePropsParametersPublicSubnet1Id
 */
export interface CfnExistingVpcModulePropsParametersPublicSubnet1Id {
  /**
   * @schema CfnExistingVpcModulePropsParametersPublicSubnet1Id#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersPublicSubnet1Id#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersPublicSubnet1Id' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersPublicSubnet1Id(obj: CfnExistingVpcModulePropsParametersPublicSubnet1Id | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ID of the public subnet in Availability Zone 1 of your existing VPC (e.g., subnet-z0376dab).
 *
 * @schema CfnExistingVpcModulePropsParametersPublicSubnet2Id
 */
export interface CfnExistingVpcModulePropsParametersPublicSubnet2Id {
  /**
   * @schema CfnExistingVpcModulePropsParametersPublicSubnet2Id#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersPublicSubnet2Id#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersPublicSubnet2Id' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersPublicSubnet2Id(obj: CfnExistingVpcModulePropsParametersPublicSubnet2Id | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR of the private subnet in Availability Zone 1 of your existing VPC (e.g., 10.0.0.0/19).
 *
 * @schema CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr
 */
export interface CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr {
  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr(obj: CfnExistingVpcModulePropsParametersPrivateSubnet1Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR of the private subnet in Availability Zone 2 of your existing VPC (e.g., 10.0.32.0/19).
 *
 * @schema CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr
 */
export interface CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr {
  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr(obj: CfnExistingVpcModulePropsParametersPrivateSubnet2Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR IP range that is permitted to access Artifactory. We recommend that you set this value to a trusted IP range. For example, you might want to grant only your corporate network access to the software.
 *
 * @schema CfnExistingVpcModulePropsParametersAccessCidr
 */
export interface CfnExistingVpcModulePropsParametersAccessCidr {
  /**
   * @schema CfnExistingVpcModulePropsParametersAccessCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersAccessCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersAccessCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersAccessCidr(obj: CfnExistingVpcModulePropsParametersAccessCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Remote CIDR range that allows you to connect to the bastion instance by using SSH. We recommend that you set this value to a trusted IP range. For example, you might want to grant specific ranges inside your corporate network SSH access.
 *
 * @schema CfnExistingVpcModulePropsParametersRemoteAccessCidr
 */
export interface CfnExistingVpcModulePropsParametersRemoteAccessCidr {
  /**
   * @schema CfnExistingVpcModulePropsParametersRemoteAccessCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersRemoteAccessCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersRemoteAccessCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersRemoteAccessCidr(obj: CfnExistingVpcModulePropsParametersRemoteAccessCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose whether this is internet facing or internal.
 *
 * @schema CfnExistingVpcModulePropsParametersElbScheme
 */
export interface CfnExistingVpcModulePropsParametersElbScheme {
  /**
   * @schema CfnExistingVpcModulePropsParametersElbScheme#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersElbScheme#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersElbScheme' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersElbScheme(obj: CfnExistingVpcModulePropsParametersElbScheme | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If set to true, a bastion host will be created.
 *
 * @schema CfnExistingVpcModulePropsParametersEnableBastion
 */
export interface CfnExistingVpcModulePropsParametersEnableBastion {
  /**
   * @schema CfnExistingVpcModulePropsParametersEnableBastion#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersEnableBastion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersEnableBastion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersEnableBastion(obj: CfnExistingVpcModulePropsParametersEnableBastion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the bastion instances.
 *
 * @schema CfnExistingVpcModulePropsParametersBastionInstanceType
 */
export interface CfnExistingVpcModulePropsParametersBastionInstanceType {
  /**
   * @schema CfnExistingVpcModulePropsParametersBastionInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersBastionInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersBastionInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersBastionInstanceType(obj: CfnExistingVpcModulePropsParametersBastionInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the root volume on the bastion instances.
 *
 * @schema CfnExistingVpcModulePropsParametersBastionRootVolumeSize
 */
export interface CfnExistingVpcModulePropsParametersBastionRootVolumeSize {
  /**
   * @schema CfnExistingVpcModulePropsParametersBastionRootVolumeSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersBastionRootVolumeSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersBastionRootVolumeSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersBastionRootVolumeSize(obj: CfnExistingVpcModulePropsParametersBastionRootVolumeSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose whether to enable TCPForwarding via the bootstrapping of the bastion instance or not.
 *
 * @schema CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding
 */
export interface CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding {
  /**
   * @schema CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding(obj: CfnExistingVpcModulePropsParametersBastionEnableTcpForwarding | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose true to enable X11 via the bootstrapping of the bastion host. Setting this value to true will enable X Windows over SSH. X11 forwarding can be useful, but it is also a security risk, so it's recommended that you keep the default (false) setting.
 *
 * @schema CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding
 */
export interface CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding {
  /**
   * @schema CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding(obj: CfnExistingVpcModulePropsParametersBastionEnableX11Forwarding | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Linux distribution for the Amazon Machine Image (AMI) to be used for the bastion instances.
 *
 * @schema CfnExistingVpcModulePropsParametersBastionOs
 */
export interface CfnExistingVpcModulePropsParametersBastionOs {
  /**
   * @schema CfnExistingVpcModulePropsParametersBastionOs#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersBastionOs#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersBastionOs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersBastionOs(obj: CfnExistingVpcModulePropsParametersBastionOs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number of bastion instances to create.
 *
 * @schema CfnExistingVpcModulePropsParametersNumBastionHosts
 */
export interface CfnExistingVpcModulePropsParametersNumBastionHosts {
  /**
   * @schema CfnExistingVpcModulePropsParametersNumBastionHosts#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersNumBastionHosts#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersNumBastionHosts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersNumBastionHosts(obj: CfnExistingVpcModulePropsParametersNumBastionHosts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size in gigabytes of the available storage (min 10GB); the Quick Start will create an Amazon Elastic Block Store (Amazon EBS) volumes of this size.
 *
 * @schema CfnExistingVpcModulePropsParametersVolumeSize
 */
export interface CfnExistingVpcModulePropsParametersVolumeSize {
  /**
   * @schema CfnExistingVpcModulePropsParametersVolumeSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersVolumeSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersVolumeSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersVolumeSize(obj: CfnExistingVpcModulePropsParametersVolumeSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EC2 type for the Artifactory instances.
 *
 * @schema CfnExistingVpcModulePropsParametersInstanceType
 */
export interface CfnExistingVpcModulePropsParametersInstanceType {
  /**
   * @schema CfnExistingVpcModulePropsParametersInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersInstanceType(obj: CfnExistingVpcModulePropsParametersInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number of secondary Artifactory servers to complete your HA deployment. To align with Artifactory best practices, the minimum number is two and the maximum is seven. Do not select more instances than you have licenses for.
 *
 * @schema CfnExistingVpcModulePropsParametersNumberOfSecondary
 */
export interface CfnExistingVpcModulePropsParametersNumberOfSecondary {
  /**
   * @schema CfnExistingVpcModulePropsParametersNumberOfSecondary#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersNumberOfSecondary#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersNumberOfSecondary' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersNumberOfSecondary(obj: CfnExistingVpcModulePropsParametersNumberOfSecondary | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JFrog Artifactory product you want to install into an AMI.
 *
 * @schema CfnExistingVpcModulePropsParametersArtifactoryProduct
 */
export interface CfnExistingVpcModulePropsParametersArtifactoryProduct {
  /**
   * @schema CfnExistingVpcModulePropsParametersArtifactoryProduct#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersArtifactoryProduct#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersArtifactoryProduct' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersArtifactoryProduct(obj: CfnExistingVpcModulePropsParametersArtifactoryProduct | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Version of Artifactory that you want to deploy into the Quick Start. See the release notes to select the version you want to deploy at https://www.jfrog.com/confluence/display/RTF/Release+Notes.
 *
 * @schema CfnExistingVpcModulePropsParametersArtifactoryVersion
 */
export interface CfnExistingVpcModulePropsParametersArtifactoryVersion {
  /**
   * @schema CfnExistingVpcModulePropsParametersArtifactoryVersion#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersArtifactoryVersion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersArtifactoryVersion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersArtifactoryVersion(obj: CfnExistingVpcModulePropsParametersArtifactoryVersion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret name created in AWS Secrets Manager, which contains the Artifactory licenses.
 *
 * @schema CfnExistingVpcModulePropsParametersSmLicenseName
 */
export interface CfnExistingVpcModulePropsParametersSmLicenseName {
  /**
   * @schema CfnExistingVpcModulePropsParametersSmLicenseName#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersSmLicenseName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersSmLicenseName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersSmLicenseName(obj: CfnExistingVpcModulePropsParametersSmLicenseName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret name created in AWS Secrets Manager, which contains the SSL certificate and certificate key.
 *
 * @schema CfnExistingVpcModulePropsParametersSmCertName
 */
export interface CfnExistingVpcModulePropsParametersSmCertName {
  /**
   * @schema CfnExistingVpcModulePropsParametersSmCertName#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersSmCertName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersSmCertName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersSmCertName(obj: CfnExistingVpcModulePropsParametersSmCertName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of your Artifactory server. Ensure that this matches your certificate.
 *
 * @schema CfnExistingVpcModulePropsParametersArtifactoryServerName
 */
export interface CfnExistingVpcModulePropsParametersArtifactoryServerName {
  /**
   * @schema CfnExistingVpcModulePropsParametersArtifactoryServerName#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersArtifactoryServerName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersArtifactoryServerName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersArtifactoryServerName(obj: CfnExistingVpcModulePropsParametersArtifactoryServerName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Master key for the Artifactory cluster. Generate a master key by using the command '$openssl rand -hex 16'.
 *
 * @schema CfnExistingVpcModulePropsParametersMasterKey
 */
export interface CfnExistingVpcModulePropsParametersMasterKey {
  /**
   * @schema CfnExistingVpcModulePropsParametersMasterKey#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersMasterKey#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersMasterKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersMasterKey(obj: CfnExistingVpcModulePropsParametersMasterKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set Java options to pass to the JVM for Artifactory. For more information, see the Artifactory system requirements at https://www.jfrog.com/confluence/display/RTF/System+Requirements#SystemRequirements-RecommendedHardware. Do not add Xms or Xmx settings without disabling DefaultJavaMemSettings.
 *
 * @schema CfnExistingVpcModulePropsParametersExtraJavaOptions
 */
export interface CfnExistingVpcModulePropsParametersExtraJavaOptions {
  /**
   * @schema CfnExistingVpcModulePropsParametersExtraJavaOptions#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersExtraJavaOptions#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersExtraJavaOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersExtraJavaOptions(obj: CfnExistingVpcModulePropsParametersExtraJavaOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose false to overwrite the standard memory-calculation options to pass to the Artifactory JVM. If you plan to overwrite them, ensure they are added to the ExtraJavaOptions to prevent the stack provision from failing.
 *
 * @schema CfnExistingVpcModulePropsParametersDefaultJavaMemSettings
 */
export interface CfnExistingVpcModulePropsParametersDefaultJavaMemSettings {
  /**
   * @schema CfnExistingVpcModulePropsParametersDefaultJavaMemSettings#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDefaultJavaMemSettings#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDefaultJavaMemSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDefaultJavaMemSettings(obj: CfnExistingVpcModulePropsParametersDefaultJavaMemSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of your database instance. The name must be unique across all instances owned by your AWS account in the current Region. The database instance identifier is case-insensitive, but it's stored in lowercase (as in "mydbinstance").
 *
 * @schema CfnExistingVpcModulePropsParametersDatabaseName
 */
export interface CfnExistingVpcModulePropsParametersDatabaseName {
  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseName#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDatabaseName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDatabaseName(obj: CfnExistingVpcModulePropsParametersDatabaseName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Database engine that you want to run, which is currently locked to MySQL.
 *
 * @schema CfnExistingVpcModulePropsParametersDatabaseEngine
 */
export interface CfnExistingVpcModulePropsParametersDatabaseEngine {
  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseEngine#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseEngine#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDatabaseEngine' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDatabaseEngine(obj: CfnExistingVpcModulePropsParametersDatabaseEngine | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Login ID for the master user of your database instance.
 *
 * @schema CfnExistingVpcModulePropsParametersDatabaseUser
 */
export interface CfnExistingVpcModulePropsParametersDatabaseUser {
  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseUser#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseUser#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDatabaseUser' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDatabaseUser(obj: CfnExistingVpcModulePropsParametersDatabaseUser | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Password for the Artifactory database user.
 *
 * @schema CfnExistingVpcModulePropsParametersDatabasePassword
 */
export interface CfnExistingVpcModulePropsParametersDatabasePassword {
  /**
   * @schema CfnExistingVpcModulePropsParametersDatabasePassword#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDatabasePassword#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDatabasePassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDatabasePassword(obj: CfnExistingVpcModulePropsParametersDatabasePassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the database to be deployed as part of the Quick Start.
 *
 * @schema CfnExistingVpcModulePropsParametersDatabaseInstance
 */
export interface CfnExistingVpcModulePropsParametersDatabaseInstance {
  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseInstance#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseInstance#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDatabaseInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDatabaseInstance(obj: CfnExistingVpcModulePropsParametersDatabaseInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size in gigabytes of the available storage for the database instance.
 *
 * @schema CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage
 */
export interface CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage {
  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage(obj: CfnExistingVpcModulePropsParametersDatabaseAllocatedStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Preferred availability zone for Amazon RDS primary instance
 *
 * @schema CfnExistingVpcModulePropsParametersDatabasePreferredAz
 */
export interface CfnExistingVpcModulePropsParametersDatabasePreferredAz {
  /**
   * @schema CfnExistingVpcModulePropsParametersDatabasePreferredAz#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersDatabasePreferredAz#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersDatabasePreferredAz' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersDatabasePreferredAz(obj: CfnExistingVpcModulePropsParametersDatabasePreferredAz | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose false to create an Amazon RDS instance in a single Availability Zone.
 *
 * @schema CfnExistingVpcModulePropsParametersMultiAzDatabase
 */
export interface CfnExistingVpcModulePropsParametersMultiAzDatabase {
  /**
   * @schema CfnExistingVpcModulePropsParametersMultiAzDatabase#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersMultiAzDatabase#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersMultiAzDatabase' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersMultiAzDatabase(obj: CfnExistingVpcModulePropsParametersMultiAzDatabase | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
 *
 * @schema CfnExistingVpcModulePropsParametersQsS3BucketName
 */
export interface CfnExistingVpcModulePropsParametersQsS3BucketName {
  /**
   * @schema CfnExistingVpcModulePropsParametersQsS3BucketName#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersQsS3BucketName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersQsS3BucketName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersQsS3BucketName(obj: CfnExistingVpcModulePropsParametersQsS3BucketName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
 *
 * @schema CfnExistingVpcModulePropsParametersQsS3KeyPrefix
 */
export interface CfnExistingVpcModulePropsParametersQsS3KeyPrefix {
  /**
   * @schema CfnExistingVpcModulePropsParametersQsS3KeyPrefix#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersQsS3KeyPrefix#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersQsS3KeyPrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersQsS3KeyPrefix(obj: CfnExistingVpcModulePropsParametersQsS3KeyPrefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. If you use your own bucket, you must specify your own value.
 *
 * @schema CfnExistingVpcModulePropsParametersQsS3BucketRegion
 */
export interface CfnExistingVpcModulePropsParametersQsS3BucketRegion {
  /**
   * @schema CfnExistingVpcModulePropsParametersQsS3BucketRegion#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersQsS3BucketRegion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersQsS3BucketRegion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersQsS3BucketRegion(obj: CfnExistingVpcModulePropsParametersQsS3BucketRegion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose true to install JFrog Xray instance(s).
 *
 * @schema CfnExistingVpcModulePropsParametersInstallXray
 */
export interface CfnExistingVpcModulePropsParametersInstallXray {
  /**
   * @schema CfnExistingVpcModulePropsParametersInstallXray#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersInstallXray#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersInstallXray' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersInstallXray(obj: CfnExistingVpcModulePropsParametersInstallXray | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The version of Xray that you want to deploy into the Quick Start.
 *
 * @schema CfnExistingVpcModulePropsParametersXrayVersion
 */
export interface CfnExistingVpcModulePropsParametersXrayVersion {
  /**
   * @schema CfnExistingVpcModulePropsParametersXrayVersion#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersXrayVersion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersXrayVersion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersXrayVersion(obj: CfnExistingVpcModulePropsParametersXrayVersion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The number of Xray instances servers to complete your HA deployment. The minimum number is one; the maximum is seven. Do not select more than instances than you have licenses for.
 *
 * @schema CfnExistingVpcModulePropsParametersXrayNumberOfInstances
 */
export interface CfnExistingVpcModulePropsParametersXrayNumberOfInstances {
  /**
   * @schema CfnExistingVpcModulePropsParametersXrayNumberOfInstances#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersXrayNumberOfInstances#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersXrayNumberOfInstances' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersXrayNumberOfInstances(obj: CfnExistingVpcModulePropsParametersXrayNumberOfInstances | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The EC2 instance type for the Xray instances.
 *
 * @schema CfnExistingVpcModulePropsParametersXrayInstanceType
 */
export interface CfnExistingVpcModulePropsParametersXrayInstanceType {
  /**
   * @schema CfnExistingVpcModulePropsParametersXrayInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersXrayInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersXrayInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersXrayInstanceType(obj: CfnExistingVpcModulePropsParametersXrayInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The login ID for the Xray database user.
 *
 * @schema CfnExistingVpcModulePropsParametersXrayDatabaseUser
 */
export interface CfnExistingVpcModulePropsParametersXrayDatabaseUser {
  /**
   * @schema CfnExistingVpcModulePropsParametersXrayDatabaseUser#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersXrayDatabaseUser#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersXrayDatabaseUser' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersXrayDatabaseUser(obj: CfnExistingVpcModulePropsParametersXrayDatabaseUser | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The password for the Xray database user.
 *
 * @schema CfnExistingVpcModulePropsParametersXrayDatabasePassword
 */
export interface CfnExistingVpcModulePropsParametersXrayDatabasePassword {
  /**
   * @schema CfnExistingVpcModulePropsParametersXrayDatabasePassword#Type
   */
  readonly type: string;

  /**
   * @schema CfnExistingVpcModulePropsParametersXrayDatabasePassword#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsParametersXrayDatabasePassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsParametersXrayDatabasePassword(obj: CfnExistingVpcModulePropsParametersXrayDatabasePassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesBastionStack
 */
export interface CfnExistingVpcModulePropsResourcesBastionStack {
  /**
   * @schema CfnExistingVpcModulePropsResourcesBastionStack#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesBastionStack#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesBastionStack' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesBastionStack(obj: CfnExistingVpcModulePropsResourcesBastionStack | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack(obj: CfnExistingVpcModulePropsResourcesArtifactoryCoreInfraStack | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryElb
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryElb {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryElb#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryElb#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryElb' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryElb(obj: CfnExistingVpcModulePropsResourcesArtifactoryElb | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup
 */
export interface CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup(obj: CfnExistingVpcModulePropsResourcesArtifactorySslTargetGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup(obj: CfnExistingVpcModulePropsResourcesArtifactoryTargetGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactorySslElbListener
 */
export interface CfnExistingVpcModulePropsResourcesArtifactorySslElbListener {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactorySslElbListener#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactorySslElbListener#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactorySslElbListener' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactorySslElbListener(obj: CfnExistingVpcModulePropsResourcesArtifactorySslElbListener | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryElbListener
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryElbListener {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryElbListener#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryElbListener#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryElbListener' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryElbListener(obj: CfnExistingVpcModulePropsResourcesArtifactoryElbListener | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalElb
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryInternalElb {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalElb#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalElb#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryInternalElb' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryInternalElb(obj: CfnExistingVpcModulePropsResourcesArtifactoryInternalElb | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup(obj: CfnExistingVpcModulePropsResourcesArtifactoryInternalTargetGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener(obj: CfnExistingVpcModulePropsResourcesArtifactoryInternalElbListener | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg(obj: CfnExistingVpcModulePropsResourcesArtifactoryEc2Sg | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryHostRole
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryHostRole {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryHostRole#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryHostRole#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryHostRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryHostRole(obj: CfnExistingVpcModulePropsResourcesArtifactoryHostRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryHostProfile
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryHostProfile {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryHostProfile#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryHostProfile#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryHostProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryHostProfile(obj: CfnExistingVpcModulePropsResourcesArtifactoryHostProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactoryPrimary
 */
export interface CfnExistingVpcModulePropsResourcesArtifactoryPrimary {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryPrimary#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactoryPrimary#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactoryPrimary' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactoryPrimary(obj: CfnExistingVpcModulePropsResourcesArtifactoryPrimary | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesArtifactorySecondary
 */
export interface CfnExistingVpcModulePropsResourcesArtifactorySecondary {
  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactorySecondary#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesArtifactorySecondary#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesArtifactorySecondary' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesArtifactorySecondary(obj: CfnExistingVpcModulePropsResourcesArtifactorySecondary | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesXrayHostRole
 */
export interface CfnExistingVpcModulePropsResourcesXrayHostRole {
  /**
   * @schema CfnExistingVpcModulePropsResourcesXrayHostRole#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesXrayHostRole#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesXrayHostRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesXrayHostRole(obj: CfnExistingVpcModulePropsResourcesXrayHostRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesXrayHostProfile
 */
export interface CfnExistingVpcModulePropsResourcesXrayHostProfile {
  /**
   * @schema CfnExistingVpcModulePropsResourcesXrayHostProfile#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesXrayHostProfile#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesXrayHostProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesXrayHostProfile(obj: CfnExistingVpcModulePropsResourcesXrayHostProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnExistingVpcModulePropsResourcesXrayExistingVpcStack
 */
export interface CfnExistingVpcModulePropsResourcesXrayExistingVpcStack {
  /**
   * @schema CfnExistingVpcModulePropsResourcesXrayExistingVpcStack#Type
   */
  readonly type?: string;

  /**
   * @schema CfnExistingVpcModulePropsResourcesXrayExistingVpcStack#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnExistingVpcModulePropsResourcesXrayExistingVpcStack' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnExistingVpcModulePropsResourcesXrayExistingVpcStack(obj: CfnExistingVpcModulePropsResourcesXrayExistingVpcStack | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `JFrog::Artifactory::ExistingVpc::MODULE`
 *
 * @cloudformationResource JFrog::Artifactory::ExistingVpc::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnExistingVpcModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "JFrog::Artifactory::ExistingVpc::MODULE";

  /**
   * Resource props.
   */
  public readonly props: CfnExistingVpcModuleProps;


  /**
   * Create a new `JFrog::Artifactory::ExistingVpc::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnExistingVpcModuleProps) {
    super(scope, id, { type: CfnExistingVpcModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnExistingVpcModuleProps(props)! });

    this.props = props;

  }
}