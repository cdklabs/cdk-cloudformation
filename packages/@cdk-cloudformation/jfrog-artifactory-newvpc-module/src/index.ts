// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Schema for Module Fragment of type JFrog::Artifactory::NewVpc::MODULE
 *
 * @schema CfnNewVpcModuleProps
 */
export interface CfnNewVpcModuleProps {
  /**
   * @schema CfnNewVpcModuleProps#Parameters
   */
  readonly parameters?: CfnNewVpcModulePropsParameters;

  /**
   * @schema CfnNewVpcModuleProps#Resources
   */
  readonly resources?: CfnNewVpcModulePropsResources;

}

/**
 * Converts an object of type 'CfnNewVpcModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModuleProps(obj: CfnNewVpcModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnNewVpcModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnNewVpcModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnNewVpcModulePropsParameters
 */
export interface CfnNewVpcModulePropsParameters {
  /**
   * Logical Id of the MODULE
   *
   * @schema CfnNewVpcModulePropsParameters#LogicalId
   */
  readonly logicalId?: CfnNewVpcModulePropsParametersLogicalId;

  /**
   * If set to true, a bastion host will be created.
   *
   * @schema CfnNewVpcModulePropsParameters#EnableBastion
   */
  readonly enableBastion?: CfnNewVpcModulePropsParametersEnableBastion;

  /**
   * CIDR block for the VPC.
   *
   * @schema CfnNewVpcModulePropsParameters#VpcCidr
   */
  readonly vpcCidr?: CfnNewVpcModulePropsParametersVpcCidr;

  /**
   * Availability Zone 1 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
   *
   * @schema CfnNewVpcModulePropsParameters#AvailabilityZone1
   */
  readonly availabilityZone1?: CfnNewVpcModulePropsParametersAvailabilityZone1;

  /**
   * Availability Zone 2 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
   *
   * @schema CfnNewVpcModulePropsParameters#AvailabilityZone2
   */
  readonly availabilityZone2?: CfnNewVpcModulePropsParametersAvailabilityZone2;

  /**
   * Name of an existing key pair, which allows you to connect securely to your instance after it launches. This is the key pair you created in your preferred Region.
   *
   * @schema CfnNewVpcModulePropsParameters#KeyPairName
   */
  readonly keyPairName?: CfnNewVpcModulePropsParametersKeyPairName;

  /**
   * CIDR block for private subnet 1 located in Availability Zone 1.
   *
   * @schema CfnNewVpcModulePropsParameters#PrivateSubnet1Cidr
   */
  readonly privateSubnet1Cidr?: CfnNewVpcModulePropsParametersPrivateSubnet1Cidr;

  /**
   * CIDR block for private subnet 2 located in Availability Zone 2.
   *
   * @schema CfnNewVpcModulePropsParameters#PrivateSubnet2Cidr
   */
  readonly privateSubnet2Cidr?: CfnNewVpcModulePropsParametersPrivateSubnet2Cidr;

  /**
   * CIDR block for the public (DMZ) subnet 1 located in Availability Zone 1.
   *
   * @schema CfnNewVpcModulePropsParameters#PublicSubnet1Cidr
   */
  readonly publicSubnet1Cidr?: CfnNewVpcModulePropsParametersPublicSubnet1Cidr;

  /**
   * CIDR block for the public (DMZ) subnet 2 located in Availability Zone 2.
   *
   * @schema CfnNewVpcModulePropsParameters#PublicSubnet2Cidr
   */
  readonly publicSubnet2Cidr?: CfnNewVpcModulePropsParametersPublicSubnet2Cidr;

  /**
   * CIDR IP range permitted to access Artifactory. It is recommended that you set this value to a trusted IP range. For example, you may want to limit software access to your corporate network.
   *
   * @schema CfnNewVpcModulePropsParameters#AccessCidr
   */
  readonly accessCidr?: CfnNewVpcModulePropsParametersAccessCidr;

  /**
   * Remote CIDR range that allows you to connect to the bastion instance by using SSH. It is recommended that you set this value to a trusted IP range. For example, you may want to grant specific ranges from within your corporate network that use the SSH protocol.
   *
   * @schema CfnNewVpcModulePropsParameters#RemoteAccessCidr
   */
  readonly remoteAccessCidr?: CfnNewVpcModulePropsParametersRemoteAccessCidr;

  /**
   * Size of the bastion instances.
   *
   * @schema CfnNewVpcModulePropsParameters#BastionInstanceType
   */
  readonly bastionInstanceType?: CfnNewVpcModulePropsParametersBastionInstanceType;

  /**
   * Size of the root volume in the bastion instances.
   *
   * @schema CfnNewVpcModulePropsParameters#BastionRootVolumeSize
   */
  readonly bastionRootVolumeSize?: CfnNewVpcModulePropsParametersBastionRootVolumeSize;

  /**
   * Choose whether to enable TCP forwarding via bootstrapping of the bastion instance.
   *
   * @schema CfnNewVpcModulePropsParameters#BastionEnableTcpForwarding
   */
  readonly bastionEnableTcpForwarding?: CfnNewVpcModulePropsParametersBastionEnableTcpForwarding;

  /**
   * Choose true to enable X11 via bootstrapping of the bastion host. Setting this value to true enables X Windows over SSH. X11 forwarding can be useful, but it is also a security risk, so it's recommended that you keep the default (false) setting.
   *
   * @schema CfnNewVpcModulePropsParameters#BastionEnableX11Forwarding
   */
  readonly bastionEnableX11Forwarding?: CfnNewVpcModulePropsParametersBastionEnableX11Forwarding;

  /**
   * Linux distribution for the Amazon Machine Image (AMI) to be used for the bastion instances.
   *
   * @schema CfnNewVpcModulePropsParameters#BastionOs
   */
  readonly bastionOs?: CfnNewVpcModulePropsParametersBastionOs;

  /**
   * Number of bastion instances to create.
   *
   * @schema CfnNewVpcModulePropsParameters#NumBastionHosts
   */
  readonly numBastionHosts?: CfnNewVpcModulePropsParametersNumBastionHosts;

  /**
   * Size in gigabytes of available storage (min 10GB). The Quick Start creates an Amazon Elastic Block Store (Amazon EBS) volumes of this size.
   *
   * @schema CfnNewVpcModulePropsParameters#VolumeSize
   */
  readonly volumeSize?: CfnNewVpcModulePropsParametersVolumeSize;

  /**
   * EC2 instance type for the Artifactory instances.
   *
   * @schema CfnNewVpcModulePropsParameters#InstanceType
   */
  readonly instanceType?: CfnNewVpcModulePropsParametersInstanceType;

  /**
   * Number of secondary Artifactory servers to complete your HA deployment. To align with Artifactory best practices, the minimum number is two, and the maximum is seven. Do not select more instances than you have licenses for.
   *
   * @schema CfnNewVpcModulePropsParameters#NumberOfSecondary
   */
  readonly numberOfSecondary?: CfnNewVpcModulePropsParametersNumberOfSecondary;

  /**
   * JFrog Artifactory product you want to install into an AMI.
   *
   * @schema CfnNewVpcModulePropsParameters#ArtifactoryProduct
   */
  readonly artifactoryProduct?: CfnNewVpcModulePropsParametersArtifactoryProduct;

  /**
   * Version of Artifactory that you want to deploy into the Quick Start. To select the correct version, see the release notes at https://www.jfrog.com/confluence/display/RTF/Release+Notes.
   *
   * @schema CfnNewVpcModulePropsParameters#ArtifactoryVersion
   */
  readonly artifactoryVersion?: CfnNewVpcModulePropsParametersArtifactoryVersion;

  /**
   * Secret name created in AWS Secrets Manager, which contains the Artifactory licenses.
   *
   * @schema CfnNewVpcModulePropsParameters#SmLicenseName
   */
  readonly smLicenseName?: CfnNewVpcModulePropsParametersSmLicenseName;

  /**
   * Secret name created in AWS Secrets Manager, which contains the SSL certificate and certificate key.
   *
   * @schema CfnNewVpcModulePropsParameters#SmCertName
   */
  readonly smCertName?: CfnNewVpcModulePropsParametersSmCertName;

  /**
   * Name of your Artifactory server. Ensure that this matches your certificate.
   *
   * @schema CfnNewVpcModulePropsParameters#ArtifactoryServerName
   */
  readonly artifactoryServerName?: CfnNewVpcModulePropsParametersArtifactoryServerName;

  /**
   * Master key for the Artifactory cluster. Generate a master key by using the command '$openssl rand -hex 16'.
   *
   * @schema CfnNewVpcModulePropsParameters#MasterKey
   */
  readonly masterKey?: CfnNewVpcModulePropsParametersMasterKey;

  /**
   * Set Java options to pass to the JVM for Artifactory. For more information, see the Artifactory system requirements at https://www.jfrog.com/confluence/display/RTF/System+Requirements#SystemRequirements-RecommendedHardware. Do not add Xms or Xmx settings without disabling DefaultJavaMemSettings.
   *
   * @schema CfnNewVpcModulePropsParameters#ExtraJavaOptions
   */
  readonly extraJavaOptions?: CfnNewVpcModulePropsParametersExtraJavaOptions;

  /**
   * Choose false to overwrite the standard memory-calculation options to pass to the Artifactory JVM. If you plan to overwrite them, ensure they are added to the ExtraJavaOptions to prevent the stack provision from failing.
   *
   * @schema CfnNewVpcModulePropsParameters#DefaultJavaMemSettings
   */
  readonly defaultJavaMemSettings?: CfnNewVpcModulePropsParametersDefaultJavaMemSettings;

  /**
   * Name of your database instance. The name must be unique across all instances owned by your AWS account in the current Region. The database instance identifier is case-insensitive, but it's stored in lowercase (as in "mydbinstance").
   *
   * @schema CfnNewVpcModulePropsParameters#DatabaseName
   */
  readonly databaseName?: CfnNewVpcModulePropsParametersDatabaseName;

  /**
   * Database engine that you want to run.
   *
   * @schema CfnNewVpcModulePropsParameters#DatabaseEngine
   */
  readonly databaseEngine?: CfnNewVpcModulePropsParametersDatabaseEngine;

  /**
   * Login ID for the master user of your database instance.
   *
   * @schema CfnNewVpcModulePropsParameters#DatabaseUser
   */
  readonly databaseUser?: CfnNewVpcModulePropsParametersDatabaseUser;

  /**
   * Password for the Artifactory database user.
   *
   * @schema CfnNewVpcModulePropsParameters#DatabasePassword
   */
  readonly databasePassword?: CfnNewVpcModulePropsParametersDatabasePassword;

  /**
   * Size of the database to be deployed as part of the Quick Start.
   *
   * @schema CfnNewVpcModulePropsParameters#DatabaseInstance
   */
  readonly databaseInstance?: CfnNewVpcModulePropsParametersDatabaseInstance;

  /**
   * Size in gigabytes of available storage for the database instance.
   *
   * @schema CfnNewVpcModulePropsParameters#DatabaseAllocatedStorage
   */
  readonly databaseAllocatedStorage?: CfnNewVpcModulePropsParametersDatabaseAllocatedStorage;

  /**
   * Preferred availability zone for Amazon RDS primary instance
   *
   * @schema CfnNewVpcModulePropsParameters#DatabasePreferredAz
   */
  readonly databasePreferredAz?: CfnNewVpcModulePropsParametersDatabasePreferredAz;

  /**
   * Choose false to create an Amazon RDS instance in a single Availability Zone.
   *
   * @schema CfnNewVpcModulePropsParameters#MultiAzDatabase
   */
  readonly multiAzDatabase?: CfnNewVpcModulePropsParametersMultiAzDatabase;

  /**
   * S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
   *
   * @schema CfnNewVpcModulePropsParameters#QsS3BucketName
   */
  readonly qsS3BucketName?: CfnNewVpcModulePropsParametersQsS3BucketName;

  /**
   * S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
   *
   * @schema CfnNewVpcModulePropsParameters#QsS3KeyPrefix
   */
  readonly qsS3KeyPrefix?: CfnNewVpcModulePropsParametersQsS3KeyPrefix;

  /**
   * AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. If you use your own bucket, you must specify your own value.
   *
   * @schema CfnNewVpcModulePropsParameters#QsS3BucketRegion
   */
  readonly qsS3BucketRegion?: CfnNewVpcModulePropsParametersQsS3BucketRegion;

  /**
   * Choose true to install JFrog Xray instance(s).
   *
   * @schema CfnNewVpcModulePropsParameters#InstallXray
   */
  readonly installXray?: CfnNewVpcModulePropsParametersInstallXray;

  /**
   * The version of Xray that you want to deploy into the Quick Start.
   *
   * @schema CfnNewVpcModulePropsParameters#XrayVersion
   */
  readonly xrayVersion?: CfnNewVpcModulePropsParametersXrayVersion;

  /**
   * The number of Xray instances servers to complete your HA deployment. The minimum number is one; the maximum is seven. Do not select more than instances than you have licenses for.
   *
   * @schema CfnNewVpcModulePropsParameters#XrayNumberOfInstances
   */
  readonly xrayNumberOfInstances?: CfnNewVpcModulePropsParametersXrayNumberOfInstances;

  /**
   * The EC2 instance type for the Xray instances.
   *
   * @schema CfnNewVpcModulePropsParameters#XrayInstanceType
   */
  readonly xrayInstanceType?: CfnNewVpcModulePropsParametersXrayInstanceType;

  /**
   * The login ID for the Xray database user.
   *
   * @schema CfnNewVpcModulePropsParameters#XrayDatabaseUser
   */
  readonly xrayDatabaseUser?: CfnNewVpcModulePropsParametersXrayDatabaseUser;

  /**
   * The password for the Xray database user.
   *
   * @schema CfnNewVpcModulePropsParameters#XrayDatabasePassword
   */
  readonly xrayDatabasePassword?: CfnNewVpcModulePropsParametersXrayDatabasePassword;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParameters(obj: CfnNewVpcModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogicalId': toJson_CfnNewVpcModulePropsParametersLogicalId(obj.logicalId),
    'EnableBastion': toJson_CfnNewVpcModulePropsParametersEnableBastion(obj.enableBastion),
    'VpcCidr': toJson_CfnNewVpcModulePropsParametersVpcCidr(obj.vpcCidr),
    'AvailabilityZone1': toJson_CfnNewVpcModulePropsParametersAvailabilityZone1(obj.availabilityZone1),
    'AvailabilityZone2': toJson_CfnNewVpcModulePropsParametersAvailabilityZone2(obj.availabilityZone2),
    'KeyPairName': toJson_CfnNewVpcModulePropsParametersKeyPairName(obj.keyPairName),
    'PrivateSubnet1Cidr': toJson_CfnNewVpcModulePropsParametersPrivateSubnet1Cidr(obj.privateSubnet1Cidr),
    'PrivateSubnet2Cidr': toJson_CfnNewVpcModulePropsParametersPrivateSubnet2Cidr(obj.privateSubnet2Cidr),
    'PublicSubnet1Cidr': toJson_CfnNewVpcModulePropsParametersPublicSubnet1Cidr(obj.publicSubnet1Cidr),
    'PublicSubnet2Cidr': toJson_CfnNewVpcModulePropsParametersPublicSubnet2Cidr(obj.publicSubnet2Cidr),
    'AccessCidr': toJson_CfnNewVpcModulePropsParametersAccessCidr(obj.accessCidr),
    'RemoteAccessCidr': toJson_CfnNewVpcModulePropsParametersRemoteAccessCidr(obj.remoteAccessCidr),
    'BastionInstanceType': toJson_CfnNewVpcModulePropsParametersBastionInstanceType(obj.bastionInstanceType),
    'BastionRootVolumeSize': toJson_CfnNewVpcModulePropsParametersBastionRootVolumeSize(obj.bastionRootVolumeSize),
    'BastionEnableTcpForwarding': toJson_CfnNewVpcModulePropsParametersBastionEnableTcpForwarding(obj.bastionEnableTcpForwarding),
    'BastionEnableX11Forwarding': toJson_CfnNewVpcModulePropsParametersBastionEnableX11Forwarding(obj.bastionEnableX11Forwarding),
    'BastionOs': toJson_CfnNewVpcModulePropsParametersBastionOs(obj.bastionOs),
    'NumBastionHosts': toJson_CfnNewVpcModulePropsParametersNumBastionHosts(obj.numBastionHosts),
    'VolumeSize': toJson_CfnNewVpcModulePropsParametersVolumeSize(obj.volumeSize),
    'InstanceType': toJson_CfnNewVpcModulePropsParametersInstanceType(obj.instanceType),
    'NumberOfSecondary': toJson_CfnNewVpcModulePropsParametersNumberOfSecondary(obj.numberOfSecondary),
    'ArtifactoryProduct': toJson_CfnNewVpcModulePropsParametersArtifactoryProduct(obj.artifactoryProduct),
    'ArtifactoryVersion': toJson_CfnNewVpcModulePropsParametersArtifactoryVersion(obj.artifactoryVersion),
    'SmLicenseName': toJson_CfnNewVpcModulePropsParametersSmLicenseName(obj.smLicenseName),
    'SmCertName': toJson_CfnNewVpcModulePropsParametersSmCertName(obj.smCertName),
    'ArtifactoryServerName': toJson_CfnNewVpcModulePropsParametersArtifactoryServerName(obj.artifactoryServerName),
    'MasterKey': toJson_CfnNewVpcModulePropsParametersMasterKey(obj.masterKey),
    'ExtraJavaOptions': toJson_CfnNewVpcModulePropsParametersExtraJavaOptions(obj.extraJavaOptions),
    'DefaultJavaMemSettings': toJson_CfnNewVpcModulePropsParametersDefaultJavaMemSettings(obj.defaultJavaMemSettings),
    'DatabaseName': toJson_CfnNewVpcModulePropsParametersDatabaseName(obj.databaseName),
    'DatabaseEngine': toJson_CfnNewVpcModulePropsParametersDatabaseEngine(obj.databaseEngine),
    'DatabaseUser': toJson_CfnNewVpcModulePropsParametersDatabaseUser(obj.databaseUser),
    'DatabasePassword': toJson_CfnNewVpcModulePropsParametersDatabasePassword(obj.databasePassword),
    'DatabaseInstance': toJson_CfnNewVpcModulePropsParametersDatabaseInstance(obj.databaseInstance),
    'DatabaseAllocatedStorage': toJson_CfnNewVpcModulePropsParametersDatabaseAllocatedStorage(obj.databaseAllocatedStorage),
    'DatabasePreferredAz': toJson_CfnNewVpcModulePropsParametersDatabasePreferredAz(obj.databasePreferredAz),
    'MultiAzDatabase': toJson_CfnNewVpcModulePropsParametersMultiAzDatabase(obj.multiAzDatabase),
    'QsS3BucketName': toJson_CfnNewVpcModulePropsParametersQsS3BucketName(obj.qsS3BucketName),
    'QsS3KeyPrefix': toJson_CfnNewVpcModulePropsParametersQsS3KeyPrefix(obj.qsS3KeyPrefix),
    'QsS3BucketRegion': toJson_CfnNewVpcModulePropsParametersQsS3BucketRegion(obj.qsS3BucketRegion),
    'InstallXray': toJson_CfnNewVpcModulePropsParametersInstallXray(obj.installXray),
    'XrayVersion': toJson_CfnNewVpcModulePropsParametersXrayVersion(obj.xrayVersion),
    'XrayNumberOfInstances': toJson_CfnNewVpcModulePropsParametersXrayNumberOfInstances(obj.xrayNumberOfInstances),
    'XrayInstanceType': toJson_CfnNewVpcModulePropsParametersXrayInstanceType(obj.xrayInstanceType),
    'XrayDatabaseUser': toJson_CfnNewVpcModulePropsParametersXrayDatabaseUser(obj.xrayDatabaseUser),
    'XrayDatabasePassword': toJson_CfnNewVpcModulePropsParametersXrayDatabasePassword(obj.xrayDatabasePassword),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnNewVpcModulePropsResources
 */
export interface CfnNewVpcModulePropsResources {
  /**
   * @schema CfnNewVpcModulePropsResources#ArtifactoryVpcStack
   */
  readonly artifactoryVpcStack?: CfnNewVpcModulePropsResourcesArtifactoryVpcStack;

  /**
   * @schema CfnNewVpcModulePropsResources#ArtifactoryExistingVpcStack
   */
  readonly artifactoryExistingVpcStack?: CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsResources(obj: CfnNewVpcModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ArtifactoryVpcStack': toJson_CfnNewVpcModulePropsResourcesArtifactoryVpcStack(obj.artifactoryVpcStack),
    'ArtifactoryExistingVpcStack': toJson_CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack(obj.artifactoryExistingVpcStack),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Logical Id of the MODULE
 *
 * @schema CfnNewVpcModulePropsParametersLogicalId
 */
export interface CfnNewVpcModulePropsParametersLogicalId {
  /**
   * @schema CfnNewVpcModulePropsParametersLogicalId#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersLogicalId#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersLogicalId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersLogicalId(obj: CfnNewVpcModulePropsParametersLogicalId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If set to true, a bastion host will be created.
 *
 * @schema CfnNewVpcModulePropsParametersEnableBastion
 */
export interface CfnNewVpcModulePropsParametersEnableBastion {
  /**
   * @schema CfnNewVpcModulePropsParametersEnableBastion#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersEnableBastion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersEnableBastion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersEnableBastion(obj: CfnNewVpcModulePropsParametersEnableBastion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for the VPC.
 *
 * @schema CfnNewVpcModulePropsParametersVpcCidr
 */
export interface CfnNewVpcModulePropsParametersVpcCidr {
  /**
   * @schema CfnNewVpcModulePropsParametersVpcCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersVpcCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersVpcCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersVpcCidr(obj: CfnNewVpcModulePropsParametersVpcCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Availability Zone 1 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
 *
 * @schema CfnNewVpcModulePropsParametersAvailabilityZone1
 */
export interface CfnNewVpcModulePropsParametersAvailabilityZone1 {
  /**
   * @schema CfnNewVpcModulePropsParametersAvailabilityZone1#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersAvailabilityZone1#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersAvailabilityZone1' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersAvailabilityZone1(obj: CfnNewVpcModulePropsParametersAvailabilityZone1 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Availability Zone 2 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
 *
 * @schema CfnNewVpcModulePropsParametersAvailabilityZone2
 */
export interface CfnNewVpcModulePropsParametersAvailabilityZone2 {
  /**
   * @schema CfnNewVpcModulePropsParametersAvailabilityZone2#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersAvailabilityZone2#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersAvailabilityZone2' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersAvailabilityZone2(obj: CfnNewVpcModulePropsParametersAvailabilityZone2 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of an existing key pair, which allows you to connect securely to your instance after it launches. This is the key pair you created in your preferred Region.
 *
 * @schema CfnNewVpcModulePropsParametersKeyPairName
 */
export interface CfnNewVpcModulePropsParametersKeyPairName {
  /**
   * @schema CfnNewVpcModulePropsParametersKeyPairName#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersKeyPairName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersKeyPairName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersKeyPairName(obj: CfnNewVpcModulePropsParametersKeyPairName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for private subnet 1 located in Availability Zone 1.
 *
 * @schema CfnNewVpcModulePropsParametersPrivateSubnet1Cidr
 */
export interface CfnNewVpcModulePropsParametersPrivateSubnet1Cidr {
  /**
   * @schema CfnNewVpcModulePropsParametersPrivateSubnet1Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersPrivateSubnet1Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersPrivateSubnet1Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersPrivateSubnet1Cidr(obj: CfnNewVpcModulePropsParametersPrivateSubnet1Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for private subnet 2 located in Availability Zone 2.
 *
 * @schema CfnNewVpcModulePropsParametersPrivateSubnet2Cidr
 */
export interface CfnNewVpcModulePropsParametersPrivateSubnet2Cidr {
  /**
   * @schema CfnNewVpcModulePropsParametersPrivateSubnet2Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersPrivateSubnet2Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersPrivateSubnet2Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersPrivateSubnet2Cidr(obj: CfnNewVpcModulePropsParametersPrivateSubnet2Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for the public (DMZ) subnet 1 located in Availability Zone 1.
 *
 * @schema CfnNewVpcModulePropsParametersPublicSubnet1Cidr
 */
export interface CfnNewVpcModulePropsParametersPublicSubnet1Cidr {
  /**
   * @schema CfnNewVpcModulePropsParametersPublicSubnet1Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersPublicSubnet1Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersPublicSubnet1Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersPublicSubnet1Cidr(obj: CfnNewVpcModulePropsParametersPublicSubnet1Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for the public (DMZ) subnet 2 located in Availability Zone 2.
 *
 * @schema CfnNewVpcModulePropsParametersPublicSubnet2Cidr
 */
export interface CfnNewVpcModulePropsParametersPublicSubnet2Cidr {
  /**
   * @schema CfnNewVpcModulePropsParametersPublicSubnet2Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersPublicSubnet2Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersPublicSubnet2Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersPublicSubnet2Cidr(obj: CfnNewVpcModulePropsParametersPublicSubnet2Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR IP range permitted to access Artifactory. It is recommended that you set this value to a trusted IP range. For example, you may want to limit software access to your corporate network.
 *
 * @schema CfnNewVpcModulePropsParametersAccessCidr
 */
export interface CfnNewVpcModulePropsParametersAccessCidr {
  /**
   * @schema CfnNewVpcModulePropsParametersAccessCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersAccessCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersAccessCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersAccessCidr(obj: CfnNewVpcModulePropsParametersAccessCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Remote CIDR range that allows you to connect to the bastion instance by using SSH. It is recommended that you set this value to a trusted IP range. For example, you may want to grant specific ranges from within your corporate network that use the SSH protocol.
 *
 * @schema CfnNewVpcModulePropsParametersRemoteAccessCidr
 */
export interface CfnNewVpcModulePropsParametersRemoteAccessCidr {
  /**
   * @schema CfnNewVpcModulePropsParametersRemoteAccessCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersRemoteAccessCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersRemoteAccessCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersRemoteAccessCidr(obj: CfnNewVpcModulePropsParametersRemoteAccessCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the bastion instances.
 *
 * @schema CfnNewVpcModulePropsParametersBastionInstanceType
 */
export interface CfnNewVpcModulePropsParametersBastionInstanceType {
  /**
   * @schema CfnNewVpcModulePropsParametersBastionInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersBastionInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersBastionInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersBastionInstanceType(obj: CfnNewVpcModulePropsParametersBastionInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the root volume in the bastion instances.
 *
 * @schema CfnNewVpcModulePropsParametersBastionRootVolumeSize
 */
export interface CfnNewVpcModulePropsParametersBastionRootVolumeSize {
  /**
   * @schema CfnNewVpcModulePropsParametersBastionRootVolumeSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersBastionRootVolumeSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersBastionRootVolumeSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersBastionRootVolumeSize(obj: CfnNewVpcModulePropsParametersBastionRootVolumeSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose whether to enable TCP forwarding via bootstrapping of the bastion instance.
 *
 * @schema CfnNewVpcModulePropsParametersBastionEnableTcpForwarding
 */
export interface CfnNewVpcModulePropsParametersBastionEnableTcpForwarding {
  /**
   * @schema CfnNewVpcModulePropsParametersBastionEnableTcpForwarding#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersBastionEnableTcpForwarding#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersBastionEnableTcpForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersBastionEnableTcpForwarding(obj: CfnNewVpcModulePropsParametersBastionEnableTcpForwarding | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose true to enable X11 via bootstrapping of the bastion host. Setting this value to true enables X Windows over SSH. X11 forwarding can be useful, but it is also a security risk, so it's recommended that you keep the default (false) setting.
 *
 * @schema CfnNewVpcModulePropsParametersBastionEnableX11Forwarding
 */
export interface CfnNewVpcModulePropsParametersBastionEnableX11Forwarding {
  /**
   * @schema CfnNewVpcModulePropsParametersBastionEnableX11Forwarding#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersBastionEnableX11Forwarding#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersBastionEnableX11Forwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersBastionEnableX11Forwarding(obj: CfnNewVpcModulePropsParametersBastionEnableX11Forwarding | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Linux distribution for the Amazon Machine Image (AMI) to be used for the bastion instances.
 *
 * @schema CfnNewVpcModulePropsParametersBastionOs
 */
export interface CfnNewVpcModulePropsParametersBastionOs {
  /**
   * @schema CfnNewVpcModulePropsParametersBastionOs#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersBastionOs#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersBastionOs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersBastionOs(obj: CfnNewVpcModulePropsParametersBastionOs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number of bastion instances to create.
 *
 * @schema CfnNewVpcModulePropsParametersNumBastionHosts
 */
export interface CfnNewVpcModulePropsParametersNumBastionHosts {
  /**
   * @schema CfnNewVpcModulePropsParametersNumBastionHosts#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersNumBastionHosts#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersNumBastionHosts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersNumBastionHosts(obj: CfnNewVpcModulePropsParametersNumBastionHosts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size in gigabytes of available storage (min 10GB). The Quick Start creates an Amazon Elastic Block Store (Amazon EBS) volumes of this size.
 *
 * @schema CfnNewVpcModulePropsParametersVolumeSize
 */
export interface CfnNewVpcModulePropsParametersVolumeSize {
  /**
   * @schema CfnNewVpcModulePropsParametersVolumeSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersVolumeSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersVolumeSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersVolumeSize(obj: CfnNewVpcModulePropsParametersVolumeSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EC2 instance type for the Artifactory instances.
 *
 * @schema CfnNewVpcModulePropsParametersInstanceType
 */
export interface CfnNewVpcModulePropsParametersInstanceType {
  /**
   * @schema CfnNewVpcModulePropsParametersInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersInstanceType(obj: CfnNewVpcModulePropsParametersInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number of secondary Artifactory servers to complete your HA deployment. To align with Artifactory best practices, the minimum number is two, and the maximum is seven. Do not select more instances than you have licenses for.
 *
 * @schema CfnNewVpcModulePropsParametersNumberOfSecondary
 */
export interface CfnNewVpcModulePropsParametersNumberOfSecondary {
  /**
   * @schema CfnNewVpcModulePropsParametersNumberOfSecondary#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersNumberOfSecondary#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersNumberOfSecondary' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersNumberOfSecondary(obj: CfnNewVpcModulePropsParametersNumberOfSecondary | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JFrog Artifactory product you want to install into an AMI.
 *
 * @schema CfnNewVpcModulePropsParametersArtifactoryProduct
 */
export interface CfnNewVpcModulePropsParametersArtifactoryProduct {
  /**
   * @schema CfnNewVpcModulePropsParametersArtifactoryProduct#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersArtifactoryProduct#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersArtifactoryProduct' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersArtifactoryProduct(obj: CfnNewVpcModulePropsParametersArtifactoryProduct | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Version of Artifactory that you want to deploy into the Quick Start. To select the correct version, see the release notes at https://www.jfrog.com/confluence/display/RTF/Release+Notes.
 *
 * @schema CfnNewVpcModulePropsParametersArtifactoryVersion
 */
export interface CfnNewVpcModulePropsParametersArtifactoryVersion {
  /**
   * @schema CfnNewVpcModulePropsParametersArtifactoryVersion#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersArtifactoryVersion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersArtifactoryVersion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersArtifactoryVersion(obj: CfnNewVpcModulePropsParametersArtifactoryVersion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret name created in AWS Secrets Manager, which contains the Artifactory licenses.
 *
 * @schema CfnNewVpcModulePropsParametersSmLicenseName
 */
export interface CfnNewVpcModulePropsParametersSmLicenseName {
  /**
   * @schema CfnNewVpcModulePropsParametersSmLicenseName#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersSmLicenseName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersSmLicenseName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersSmLicenseName(obj: CfnNewVpcModulePropsParametersSmLicenseName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret name created in AWS Secrets Manager, which contains the SSL certificate and certificate key.
 *
 * @schema CfnNewVpcModulePropsParametersSmCertName
 */
export interface CfnNewVpcModulePropsParametersSmCertName {
  /**
   * @schema CfnNewVpcModulePropsParametersSmCertName#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersSmCertName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersSmCertName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersSmCertName(obj: CfnNewVpcModulePropsParametersSmCertName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of your Artifactory server. Ensure that this matches your certificate.
 *
 * @schema CfnNewVpcModulePropsParametersArtifactoryServerName
 */
export interface CfnNewVpcModulePropsParametersArtifactoryServerName {
  /**
   * @schema CfnNewVpcModulePropsParametersArtifactoryServerName#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersArtifactoryServerName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersArtifactoryServerName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersArtifactoryServerName(obj: CfnNewVpcModulePropsParametersArtifactoryServerName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Master key for the Artifactory cluster. Generate a master key by using the command '$openssl rand -hex 16'.
 *
 * @schema CfnNewVpcModulePropsParametersMasterKey
 */
export interface CfnNewVpcModulePropsParametersMasterKey {
  /**
   * @schema CfnNewVpcModulePropsParametersMasterKey#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersMasterKey#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersMasterKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersMasterKey(obj: CfnNewVpcModulePropsParametersMasterKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set Java options to pass to the JVM for Artifactory. For more information, see the Artifactory system requirements at https://www.jfrog.com/confluence/display/RTF/System+Requirements#SystemRequirements-RecommendedHardware. Do not add Xms or Xmx settings without disabling DefaultJavaMemSettings.
 *
 * @schema CfnNewVpcModulePropsParametersExtraJavaOptions
 */
export interface CfnNewVpcModulePropsParametersExtraJavaOptions {
  /**
   * @schema CfnNewVpcModulePropsParametersExtraJavaOptions#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersExtraJavaOptions#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersExtraJavaOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersExtraJavaOptions(obj: CfnNewVpcModulePropsParametersExtraJavaOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose false to overwrite the standard memory-calculation options to pass to the Artifactory JVM. If you plan to overwrite them, ensure they are added to the ExtraJavaOptions to prevent the stack provision from failing.
 *
 * @schema CfnNewVpcModulePropsParametersDefaultJavaMemSettings
 */
export interface CfnNewVpcModulePropsParametersDefaultJavaMemSettings {
  /**
   * @schema CfnNewVpcModulePropsParametersDefaultJavaMemSettings#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDefaultJavaMemSettings#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDefaultJavaMemSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDefaultJavaMemSettings(obj: CfnNewVpcModulePropsParametersDefaultJavaMemSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of your database instance. The name must be unique across all instances owned by your AWS account in the current Region. The database instance identifier is case-insensitive, but it's stored in lowercase (as in "mydbinstance").
 *
 * @schema CfnNewVpcModulePropsParametersDatabaseName
 */
export interface CfnNewVpcModulePropsParametersDatabaseName {
  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseName#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDatabaseName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDatabaseName(obj: CfnNewVpcModulePropsParametersDatabaseName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Database engine that you want to run.
 *
 * @schema CfnNewVpcModulePropsParametersDatabaseEngine
 */
export interface CfnNewVpcModulePropsParametersDatabaseEngine {
  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseEngine#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseEngine#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDatabaseEngine' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDatabaseEngine(obj: CfnNewVpcModulePropsParametersDatabaseEngine | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Login ID for the master user of your database instance.
 *
 * @schema CfnNewVpcModulePropsParametersDatabaseUser
 */
export interface CfnNewVpcModulePropsParametersDatabaseUser {
  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseUser#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseUser#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDatabaseUser' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDatabaseUser(obj: CfnNewVpcModulePropsParametersDatabaseUser | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Password for the Artifactory database user.
 *
 * @schema CfnNewVpcModulePropsParametersDatabasePassword
 */
export interface CfnNewVpcModulePropsParametersDatabasePassword {
  /**
   * @schema CfnNewVpcModulePropsParametersDatabasePassword#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDatabasePassword#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDatabasePassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDatabasePassword(obj: CfnNewVpcModulePropsParametersDatabasePassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the database to be deployed as part of the Quick Start.
 *
 * @schema CfnNewVpcModulePropsParametersDatabaseInstance
 */
export interface CfnNewVpcModulePropsParametersDatabaseInstance {
  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseInstance#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseInstance#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDatabaseInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDatabaseInstance(obj: CfnNewVpcModulePropsParametersDatabaseInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size in gigabytes of available storage for the database instance.
 *
 * @schema CfnNewVpcModulePropsParametersDatabaseAllocatedStorage
 */
export interface CfnNewVpcModulePropsParametersDatabaseAllocatedStorage {
  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseAllocatedStorage#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDatabaseAllocatedStorage#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDatabaseAllocatedStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDatabaseAllocatedStorage(obj: CfnNewVpcModulePropsParametersDatabaseAllocatedStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Preferred availability zone for Amazon RDS primary instance
 *
 * @schema CfnNewVpcModulePropsParametersDatabasePreferredAz
 */
export interface CfnNewVpcModulePropsParametersDatabasePreferredAz {
  /**
   * @schema CfnNewVpcModulePropsParametersDatabasePreferredAz#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersDatabasePreferredAz#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersDatabasePreferredAz' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersDatabasePreferredAz(obj: CfnNewVpcModulePropsParametersDatabasePreferredAz | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose false to create an Amazon RDS instance in a single Availability Zone.
 *
 * @schema CfnNewVpcModulePropsParametersMultiAzDatabase
 */
export interface CfnNewVpcModulePropsParametersMultiAzDatabase {
  /**
   * @schema CfnNewVpcModulePropsParametersMultiAzDatabase#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersMultiAzDatabase#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersMultiAzDatabase' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersMultiAzDatabase(obj: CfnNewVpcModulePropsParametersMultiAzDatabase | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
 *
 * @schema CfnNewVpcModulePropsParametersQsS3BucketName
 */
export interface CfnNewVpcModulePropsParametersQsS3BucketName {
  /**
   * @schema CfnNewVpcModulePropsParametersQsS3BucketName#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersQsS3BucketName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersQsS3BucketName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersQsS3BucketName(obj: CfnNewVpcModulePropsParametersQsS3BucketName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
 *
 * @schema CfnNewVpcModulePropsParametersQsS3KeyPrefix
 */
export interface CfnNewVpcModulePropsParametersQsS3KeyPrefix {
  /**
   * @schema CfnNewVpcModulePropsParametersQsS3KeyPrefix#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersQsS3KeyPrefix#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersQsS3KeyPrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersQsS3KeyPrefix(obj: CfnNewVpcModulePropsParametersQsS3KeyPrefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. If you use your own bucket, you must specify your own value.
 *
 * @schema CfnNewVpcModulePropsParametersQsS3BucketRegion
 */
export interface CfnNewVpcModulePropsParametersQsS3BucketRegion {
  /**
   * @schema CfnNewVpcModulePropsParametersQsS3BucketRegion#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersQsS3BucketRegion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersQsS3BucketRegion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersQsS3BucketRegion(obj: CfnNewVpcModulePropsParametersQsS3BucketRegion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose true to install JFrog Xray instance(s).
 *
 * @schema CfnNewVpcModulePropsParametersInstallXray
 */
export interface CfnNewVpcModulePropsParametersInstallXray {
  /**
   * @schema CfnNewVpcModulePropsParametersInstallXray#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersInstallXray#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersInstallXray' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersInstallXray(obj: CfnNewVpcModulePropsParametersInstallXray | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The version of Xray that you want to deploy into the Quick Start.
 *
 * @schema CfnNewVpcModulePropsParametersXrayVersion
 */
export interface CfnNewVpcModulePropsParametersXrayVersion {
  /**
   * @schema CfnNewVpcModulePropsParametersXrayVersion#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersXrayVersion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersXrayVersion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersXrayVersion(obj: CfnNewVpcModulePropsParametersXrayVersion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The number of Xray instances servers to complete your HA deployment. The minimum number is one; the maximum is seven. Do not select more than instances than you have licenses for.
 *
 * @schema CfnNewVpcModulePropsParametersXrayNumberOfInstances
 */
export interface CfnNewVpcModulePropsParametersXrayNumberOfInstances {
  /**
   * @schema CfnNewVpcModulePropsParametersXrayNumberOfInstances#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersXrayNumberOfInstances#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersXrayNumberOfInstances' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersXrayNumberOfInstances(obj: CfnNewVpcModulePropsParametersXrayNumberOfInstances | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The EC2 instance type for the Xray instances.
 *
 * @schema CfnNewVpcModulePropsParametersXrayInstanceType
 */
export interface CfnNewVpcModulePropsParametersXrayInstanceType {
  /**
   * @schema CfnNewVpcModulePropsParametersXrayInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersXrayInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersXrayInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersXrayInstanceType(obj: CfnNewVpcModulePropsParametersXrayInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The login ID for the Xray database user.
 *
 * @schema CfnNewVpcModulePropsParametersXrayDatabaseUser
 */
export interface CfnNewVpcModulePropsParametersXrayDatabaseUser {
  /**
   * @schema CfnNewVpcModulePropsParametersXrayDatabaseUser#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersXrayDatabaseUser#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersXrayDatabaseUser' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersXrayDatabaseUser(obj: CfnNewVpcModulePropsParametersXrayDatabaseUser | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The password for the Xray database user.
 *
 * @schema CfnNewVpcModulePropsParametersXrayDatabasePassword
 */
export interface CfnNewVpcModulePropsParametersXrayDatabasePassword {
  /**
   * @schema CfnNewVpcModulePropsParametersXrayDatabasePassword#Type
   */
  readonly type: string;

  /**
   * @schema CfnNewVpcModulePropsParametersXrayDatabasePassword#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsParametersXrayDatabasePassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsParametersXrayDatabasePassword(obj: CfnNewVpcModulePropsParametersXrayDatabasePassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnNewVpcModulePropsResourcesArtifactoryVpcStack
 */
export interface CfnNewVpcModulePropsResourcesArtifactoryVpcStack {
  /**
   * @schema CfnNewVpcModulePropsResourcesArtifactoryVpcStack#Type
   */
  readonly type?: string;

  /**
   * @schema CfnNewVpcModulePropsResourcesArtifactoryVpcStack#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsResourcesArtifactoryVpcStack' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsResourcesArtifactoryVpcStack(obj: CfnNewVpcModulePropsResourcesArtifactoryVpcStack | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack
 */
export interface CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack {
  /**
   * @schema CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack#Type
   */
  readonly type?: string;

  /**
   * @schema CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack(obj: CfnNewVpcModulePropsResourcesArtifactoryExistingVpcStack | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `JFrog::Artifactory::NewVpc::MODULE`
 *
 * @cloudformationResource JFrog::Artifactory::NewVpc::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnNewVpcModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "JFrog::Artifactory::NewVpc::MODULE";

  /**
   * Resource props.
   */
  public readonly props: CfnNewVpcModuleProps;


  /**
   * Create a new `JFrog::Artifactory::NewVpc::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnNewVpcModuleProps) {
    super(scope, id, { type: CfnNewVpcModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnNewVpcModuleProps(props)! });

    this.props = props;

  }
}