// Generated by cdk-import
import * as cdk from '@aws-cdk/core';

/**
 * Schema for Module Fragment of type JFrog::Artifactory::NewVpc::MODULE
 *
 * @schema CfnModuleProps
 */
export interface CfnModuleProps {
  /**
   * @schema CfnModuleProps#Parameters
   */
  readonly parameters?: CfnModulePropsParameters;

  /**
   * @schema CfnModuleProps#Resources
   */
  readonly resources?: CfnModulePropsResources;

}

/**
 * Converts an object of type 'CfnModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModuleProps(obj: CfnModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsParameters
 */
export interface CfnModulePropsParameters {
  /**
   * Logical Id of the MODULE
   *
   * @schema CfnModulePropsParameters#LogicalId
   */
  readonly logicalId?: CfnModulePropsParametersLogicalId;

  /**
   * If set to true, a bastion host will be created.
   *
   * @schema CfnModulePropsParameters#EnableBastion
   */
  readonly enableBastion?: CfnModulePropsParametersEnableBastion;

  /**
   * CIDR block for the VPC.
   *
   * @schema CfnModulePropsParameters#VpcCidr
   */
  readonly vpcCidr?: CfnModulePropsParametersVpcCidr;

  /**
   * Availability Zone 1 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
   *
   * @schema CfnModulePropsParameters#AvailabilityZone1
   */
  readonly availabilityZone1?: CfnModulePropsParametersAvailabilityZone1;

  /**
   * Availability Zone 2 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
   *
   * @schema CfnModulePropsParameters#AvailabilityZone2
   */
  readonly availabilityZone2?: CfnModulePropsParametersAvailabilityZone2;

  /**
   * Name of an existing key pair, which allows you to connect securely to your instance after it launches. This is the key pair you created in your preferred Region.
   *
   * @schema CfnModulePropsParameters#KeyPairName
   */
  readonly keyPairName?: CfnModulePropsParametersKeyPairName;

  /**
   * CIDR block for private subnet 1 located in Availability Zone 1.
   *
   * @schema CfnModulePropsParameters#PrivateSubnet1Cidr
   */
  readonly privateSubnet1Cidr?: CfnModulePropsParametersPrivateSubnet1Cidr;

  /**
   * CIDR block for private subnet 2 located in Availability Zone 2.
   *
   * @schema CfnModulePropsParameters#PrivateSubnet2Cidr
   */
  readonly privateSubnet2Cidr?: CfnModulePropsParametersPrivateSubnet2Cidr;

  /**
   * CIDR block for the public (DMZ) subnet 1 located in Availability Zone 1.
   *
   * @schema CfnModulePropsParameters#PublicSubnet1Cidr
   */
  readonly publicSubnet1Cidr?: CfnModulePropsParametersPublicSubnet1Cidr;

  /**
   * CIDR block for the public (DMZ) subnet 2 located in Availability Zone 2.
   *
   * @schema CfnModulePropsParameters#PublicSubnet2Cidr
   */
  readonly publicSubnet2Cidr?: CfnModulePropsParametersPublicSubnet2Cidr;

  /**
   * CIDR IP range permitted to access Artifactory. It is recommended that you set this value to a trusted IP range. For example, you may want to limit software access to your corporate network.
   *
   * @schema CfnModulePropsParameters#AccessCidr
   */
  readonly accessCidr?: CfnModulePropsParametersAccessCidr;

  /**
   * Remote CIDR range that allows you to connect to the bastion instance by using SSH. It is recommended that you set this value to a trusted IP range. For example, you may want to grant specific ranges from within your corporate network that use the SSH protocol.
   *
   * @schema CfnModulePropsParameters#RemoteAccessCidr
   */
  readonly remoteAccessCidr?: CfnModulePropsParametersRemoteAccessCidr;

  /**
   * Size of the bastion instances.
   *
   * @schema CfnModulePropsParameters#BastionInstanceType
   */
  readonly bastionInstanceType?: CfnModulePropsParametersBastionInstanceType;

  /**
   * Size of the root volume in the bastion instances.
   *
   * @schema CfnModulePropsParameters#BastionRootVolumeSize
   */
  readonly bastionRootVolumeSize?: CfnModulePropsParametersBastionRootVolumeSize;

  /**
   * Choose whether to enable TCP forwarding via bootstrapping of the bastion instance.
   *
   * @schema CfnModulePropsParameters#BastionEnableTcpForwarding
   */
  readonly bastionEnableTcpForwarding?: CfnModulePropsParametersBastionEnableTcpForwarding;

  /**
   * Choose true to enable X11 via bootstrapping of the bastion host. Setting this value to true enables X Windows over SSH. X11 forwarding can be useful, but it is also a security risk, so it's recommended that you keep the default (false) setting.
   *
   * @schema CfnModulePropsParameters#BastionEnableX11Forwarding
   */
  readonly bastionEnableX11Forwarding?: CfnModulePropsParametersBastionEnableX11Forwarding;

  /**
   * Linux distribution for the Amazon Machine Image (AMI) to be used for the bastion instances.
   *
   * @schema CfnModulePropsParameters#BastionOs
   */
  readonly bastionOs?: CfnModulePropsParametersBastionOs;

  /**
   * Number of bastion instances to create.
   *
   * @schema CfnModulePropsParameters#NumBastionHosts
   */
  readonly numBastionHosts?: CfnModulePropsParametersNumBastionHosts;

  /**
   * Size in gigabytes of available storage (min 10GB). The Quick Start creates an Amazon Elastic Block Store (Amazon EBS) volumes of this size.
   *
   * @schema CfnModulePropsParameters#VolumeSize
   */
  readonly volumeSize?: CfnModulePropsParametersVolumeSize;

  /**
   * EC2 instance type for the Artifactory instances.
   *
   * @schema CfnModulePropsParameters#InstanceType
   */
  readonly instanceType?: CfnModulePropsParametersInstanceType;

  /**
   * Number of secondary Artifactory servers to complete your HA deployment. To align with Artifactory best practices, the minimum number is two, and the maximum is seven. Do not select more instances than you have licenses for.
   *
   * @schema CfnModulePropsParameters#NumberOfSecondary
   */
  readonly numberOfSecondary?: CfnModulePropsParametersNumberOfSecondary;

  /**
   * JFrog Artifactory product you want to install into an AMI.
   *
   * @schema CfnModulePropsParameters#ArtifactoryProduct
   */
  readonly artifactoryProduct?: CfnModulePropsParametersArtifactoryProduct;

  /**
   * Version of Artifactory that you want to deploy into the Quick Start. To select the correct version, see the release notes at https://www.jfrog.com/confluence/display/RTF/Release+Notes.
   *
   * @schema CfnModulePropsParameters#ArtifactoryVersion
   */
  readonly artifactoryVersion?: CfnModulePropsParametersArtifactoryVersion;

  /**
   * Secret name created in AWS Secrets Manager, which contains the Artifactory licenses.
   *
   * @schema CfnModulePropsParameters#SmLicenseName
   */
  readonly smLicenseName?: CfnModulePropsParametersSmLicenseName;

  /**
   * Secret name created in AWS Secrets Manager, which contains the SSL certificate and certificate key.
   *
   * @schema CfnModulePropsParameters#SmCertName
   */
  readonly smCertName?: CfnModulePropsParametersSmCertName;

  /**
   * Name of your Artifactory server. Ensure that this matches your certificate.
   *
   * @schema CfnModulePropsParameters#ArtifactoryServerName
   */
  readonly artifactoryServerName?: CfnModulePropsParametersArtifactoryServerName;

  /**
   * Master key for the Artifactory cluster. Generate a master key by using the command '$openssl rand -hex 16'.
   *
   * @schema CfnModulePropsParameters#MasterKey
   */
  readonly masterKey?: CfnModulePropsParametersMasterKey;

  /**
   * Set Java options to pass to the JVM for Artifactory. For more information, see the Artifactory system requirements at https://www.jfrog.com/confluence/display/RTF/System+Requirements#SystemRequirements-RecommendedHardware. Do not add Xms or Xmx settings without disabling DefaultJavaMemSettings.
   *
   * @schema CfnModulePropsParameters#ExtraJavaOptions
   */
  readonly extraJavaOptions?: CfnModulePropsParametersExtraJavaOptions;

  /**
   * Choose false to overwrite the standard memory-calculation options to pass to the Artifactory JVM. If you plan to overwrite them, ensure they are added to the ExtraJavaOptions to prevent the stack provision from failing.
   *
   * @schema CfnModulePropsParameters#DefaultJavaMemSettings
   */
  readonly defaultJavaMemSettings?: CfnModulePropsParametersDefaultJavaMemSettings;

  /**
   * Name of your database instance. The name must be unique across all instances owned by your AWS account in the current Region. The database instance identifier is case-insensitive, but it's stored in lowercase (as in "mydbinstance").
   *
   * @schema CfnModulePropsParameters#DatabaseName
   */
  readonly databaseName?: CfnModulePropsParametersDatabaseName;

  /**
   * Database engine that you want to run.
   *
   * @schema CfnModulePropsParameters#DatabaseEngine
   */
  readonly databaseEngine?: CfnModulePropsParametersDatabaseEngine;

  /**
   * Login ID for the master user of your database instance.
   *
   * @schema CfnModulePropsParameters#DatabaseUser
   */
  readonly databaseUser?: CfnModulePropsParametersDatabaseUser;

  /**
   * Password for the Artifactory database user.
   *
   * @schema CfnModulePropsParameters#DatabasePassword
   */
  readonly databasePassword?: CfnModulePropsParametersDatabasePassword;

  /**
   * Size of the database to be deployed as part of the Quick Start.
   *
   * @schema CfnModulePropsParameters#DatabaseInstance
   */
  readonly databaseInstance?: CfnModulePropsParametersDatabaseInstance;

  /**
   * Size in gigabytes of available storage for the database instance.
   *
   * @schema CfnModulePropsParameters#DatabaseAllocatedStorage
   */
  readonly databaseAllocatedStorage?: CfnModulePropsParametersDatabaseAllocatedStorage;

  /**
   * Preferred availability zone for Amazon RDS primary instance
   *
   * @schema CfnModulePropsParameters#DatabasePreferredAz
   */
  readonly databasePreferredAz?: CfnModulePropsParametersDatabasePreferredAz;

  /**
   * Choose false to create an Amazon RDS instance in a single Availability Zone.
   *
   * @schema CfnModulePropsParameters#MultiAzDatabase
   */
  readonly multiAzDatabase?: CfnModulePropsParametersMultiAzDatabase;

  /**
   * S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
   *
   * @schema CfnModulePropsParameters#QsS3BucketName
   */
  readonly qsS3BucketName?: CfnModulePropsParametersQsS3BucketName;

  /**
   * S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
   *
   * @schema CfnModulePropsParameters#QsS3KeyPrefix
   */
  readonly qsS3KeyPrefix?: CfnModulePropsParametersQsS3KeyPrefix;

  /**
   * AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. If you use your own bucket, you must specify your own value.
   *
   * @schema CfnModulePropsParameters#QsS3BucketRegion
   */
  readonly qsS3BucketRegion?: CfnModulePropsParametersQsS3BucketRegion;

  /**
   * Choose true to install JFrog Xray instance(s).
   *
   * @schema CfnModulePropsParameters#InstallXray
   */
  readonly installXray?: CfnModulePropsParametersInstallXray;

  /**
   * The version of Xray that you want to deploy into the Quick Start.
   *
   * @schema CfnModulePropsParameters#XrayVersion
   */
  readonly xrayVersion?: CfnModulePropsParametersXrayVersion;

  /**
   * The number of Xray instances servers to complete your HA deployment. The minimum number is one; the maximum is seven. Do not select more than instances than you have licenses for.
   *
   * @schema CfnModulePropsParameters#XrayNumberOfInstances
   */
  readonly xrayNumberOfInstances?: CfnModulePropsParametersXrayNumberOfInstances;

  /**
   * The EC2 instance type for the Xray instances.
   *
   * @schema CfnModulePropsParameters#XrayInstanceType
   */
  readonly xrayInstanceType?: CfnModulePropsParametersXrayInstanceType;

  /**
   * The login ID for the Xray database user.
   *
   * @schema CfnModulePropsParameters#XrayDatabaseUser
   */
  readonly xrayDatabaseUser?: CfnModulePropsParametersXrayDatabaseUser;

  /**
   * The password for the Xray database user.
   *
   * @schema CfnModulePropsParameters#XrayDatabasePassword
   */
  readonly xrayDatabasePassword?: CfnModulePropsParametersXrayDatabasePassword;

}

/**
 * Converts an object of type 'CfnModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParameters(obj: CfnModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogicalId': toJson_CfnModulePropsParametersLogicalId(obj.logicalId),
    'EnableBastion': toJson_CfnModulePropsParametersEnableBastion(obj.enableBastion),
    'VpcCidr': toJson_CfnModulePropsParametersVpcCidr(obj.vpcCidr),
    'AvailabilityZone1': toJson_CfnModulePropsParametersAvailabilityZone1(obj.availabilityZone1),
    'AvailabilityZone2': toJson_CfnModulePropsParametersAvailabilityZone2(obj.availabilityZone2),
    'KeyPairName': toJson_CfnModulePropsParametersKeyPairName(obj.keyPairName),
    'PrivateSubnet1Cidr': toJson_CfnModulePropsParametersPrivateSubnet1Cidr(obj.privateSubnet1Cidr),
    'PrivateSubnet2Cidr': toJson_CfnModulePropsParametersPrivateSubnet2Cidr(obj.privateSubnet2Cidr),
    'PublicSubnet1Cidr': toJson_CfnModulePropsParametersPublicSubnet1Cidr(obj.publicSubnet1Cidr),
    'PublicSubnet2Cidr': toJson_CfnModulePropsParametersPublicSubnet2Cidr(obj.publicSubnet2Cidr),
    'AccessCidr': toJson_CfnModulePropsParametersAccessCidr(obj.accessCidr),
    'RemoteAccessCidr': toJson_CfnModulePropsParametersRemoteAccessCidr(obj.remoteAccessCidr),
    'BastionInstanceType': toJson_CfnModulePropsParametersBastionInstanceType(obj.bastionInstanceType),
    'BastionRootVolumeSize': toJson_CfnModulePropsParametersBastionRootVolumeSize(obj.bastionRootVolumeSize),
    'BastionEnableTcpForwarding': toJson_CfnModulePropsParametersBastionEnableTcpForwarding(obj.bastionEnableTcpForwarding),
    'BastionEnableX11Forwarding': toJson_CfnModulePropsParametersBastionEnableX11Forwarding(obj.bastionEnableX11Forwarding),
    'BastionOs': toJson_CfnModulePropsParametersBastionOs(obj.bastionOs),
    'NumBastionHosts': toJson_CfnModulePropsParametersNumBastionHosts(obj.numBastionHosts),
    'VolumeSize': toJson_CfnModulePropsParametersVolumeSize(obj.volumeSize),
    'InstanceType': toJson_CfnModulePropsParametersInstanceType(obj.instanceType),
    'NumberOfSecondary': toJson_CfnModulePropsParametersNumberOfSecondary(obj.numberOfSecondary),
    'ArtifactoryProduct': toJson_CfnModulePropsParametersArtifactoryProduct(obj.artifactoryProduct),
    'ArtifactoryVersion': toJson_CfnModulePropsParametersArtifactoryVersion(obj.artifactoryVersion),
    'SmLicenseName': toJson_CfnModulePropsParametersSmLicenseName(obj.smLicenseName),
    'SmCertName': toJson_CfnModulePropsParametersSmCertName(obj.smCertName),
    'ArtifactoryServerName': toJson_CfnModulePropsParametersArtifactoryServerName(obj.artifactoryServerName),
    'MasterKey': toJson_CfnModulePropsParametersMasterKey(obj.masterKey),
    'ExtraJavaOptions': toJson_CfnModulePropsParametersExtraJavaOptions(obj.extraJavaOptions),
    'DefaultJavaMemSettings': toJson_CfnModulePropsParametersDefaultJavaMemSettings(obj.defaultJavaMemSettings),
    'DatabaseName': toJson_CfnModulePropsParametersDatabaseName(obj.databaseName),
    'DatabaseEngine': toJson_CfnModulePropsParametersDatabaseEngine(obj.databaseEngine),
    'DatabaseUser': toJson_CfnModulePropsParametersDatabaseUser(obj.databaseUser),
    'DatabasePassword': toJson_CfnModulePropsParametersDatabasePassword(obj.databasePassword),
    'DatabaseInstance': toJson_CfnModulePropsParametersDatabaseInstance(obj.databaseInstance),
    'DatabaseAllocatedStorage': toJson_CfnModulePropsParametersDatabaseAllocatedStorage(obj.databaseAllocatedStorage),
    'DatabasePreferredAz': toJson_CfnModulePropsParametersDatabasePreferredAz(obj.databasePreferredAz),
    'MultiAzDatabase': toJson_CfnModulePropsParametersMultiAzDatabase(obj.multiAzDatabase),
    'QsS3BucketName': toJson_CfnModulePropsParametersQsS3BucketName(obj.qsS3BucketName),
    'QsS3KeyPrefix': toJson_CfnModulePropsParametersQsS3KeyPrefix(obj.qsS3KeyPrefix),
    'QsS3BucketRegion': toJson_CfnModulePropsParametersQsS3BucketRegion(obj.qsS3BucketRegion),
    'InstallXray': toJson_CfnModulePropsParametersInstallXray(obj.installXray),
    'XrayVersion': toJson_CfnModulePropsParametersXrayVersion(obj.xrayVersion),
    'XrayNumberOfInstances': toJson_CfnModulePropsParametersXrayNumberOfInstances(obj.xrayNumberOfInstances),
    'XrayInstanceType': toJson_CfnModulePropsParametersXrayInstanceType(obj.xrayInstanceType),
    'XrayDatabaseUser': toJson_CfnModulePropsParametersXrayDatabaseUser(obj.xrayDatabaseUser),
    'XrayDatabasePassword': toJson_CfnModulePropsParametersXrayDatabasePassword(obj.xrayDatabasePassword),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResources
 */
export interface CfnModulePropsResources {
  /**
   * @schema CfnModulePropsResources#ArtifactoryVpcStack
   */
  readonly artifactoryVpcStack?: CfnModulePropsResourcesArtifactoryVpcStack;

  /**
   * @schema CfnModulePropsResources#ArtifactoryExistingVpcStack
   */
  readonly artifactoryExistingVpcStack?: CfnModulePropsResourcesArtifactoryExistingVpcStack;

}

/**
 * Converts an object of type 'CfnModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResources(obj: CfnModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ArtifactoryVpcStack': toJson_CfnModulePropsResourcesArtifactoryVpcStack(obj.artifactoryVpcStack),
    'ArtifactoryExistingVpcStack': toJson_CfnModulePropsResourcesArtifactoryExistingVpcStack(obj.artifactoryExistingVpcStack),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Logical Id of the MODULE
 *
 * @schema CfnModulePropsParametersLogicalId
 */
export interface CfnModulePropsParametersLogicalId {
  /**
   * @schema CfnModulePropsParametersLogicalId#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogicalId#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogicalId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogicalId(obj: CfnModulePropsParametersLogicalId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If set to true, a bastion host will be created.
 *
 * @schema CfnModulePropsParametersEnableBastion
 */
export interface CfnModulePropsParametersEnableBastion {
  /**
   * @schema CfnModulePropsParametersEnableBastion#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersEnableBastion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersEnableBastion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersEnableBastion(obj: CfnModulePropsParametersEnableBastion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for the VPC.
 *
 * @schema CfnModulePropsParametersVpcCidr
 */
export interface CfnModulePropsParametersVpcCidr {
  /**
   * @schema CfnModulePropsParametersVpcCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersVpcCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersVpcCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersVpcCidr(obj: CfnModulePropsParametersVpcCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Availability Zone 1 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
 *
 * @schema CfnModulePropsParametersAvailabilityZone1
 */
export interface CfnModulePropsParametersAvailabilityZone1 {
  /**
   * @schema CfnModulePropsParametersAvailabilityZone1#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersAvailabilityZone1#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersAvailabilityZone1' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersAvailabilityZone1(obj: CfnModulePropsParametersAvailabilityZone1 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Availability Zone 2 to use for the subnets in the VPC. Two Availability Zones are used for this deployment.
 *
 * @schema CfnModulePropsParametersAvailabilityZone2
 */
export interface CfnModulePropsParametersAvailabilityZone2 {
  /**
   * @schema CfnModulePropsParametersAvailabilityZone2#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersAvailabilityZone2#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersAvailabilityZone2' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersAvailabilityZone2(obj: CfnModulePropsParametersAvailabilityZone2 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of an existing key pair, which allows you to connect securely to your instance after it launches. This is the key pair you created in your preferred Region.
 *
 * @schema CfnModulePropsParametersKeyPairName
 */
export interface CfnModulePropsParametersKeyPairName {
  /**
   * @schema CfnModulePropsParametersKeyPairName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersKeyPairName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersKeyPairName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersKeyPairName(obj: CfnModulePropsParametersKeyPairName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for private subnet 1 located in Availability Zone 1.
 *
 * @schema CfnModulePropsParametersPrivateSubnet1Cidr
 */
export interface CfnModulePropsParametersPrivateSubnet1Cidr {
  /**
   * @schema CfnModulePropsParametersPrivateSubnet1Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersPrivateSubnet1Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersPrivateSubnet1Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersPrivateSubnet1Cidr(obj: CfnModulePropsParametersPrivateSubnet1Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for private subnet 2 located in Availability Zone 2.
 *
 * @schema CfnModulePropsParametersPrivateSubnet2Cidr
 */
export interface CfnModulePropsParametersPrivateSubnet2Cidr {
  /**
   * @schema CfnModulePropsParametersPrivateSubnet2Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersPrivateSubnet2Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersPrivateSubnet2Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersPrivateSubnet2Cidr(obj: CfnModulePropsParametersPrivateSubnet2Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for the public (DMZ) subnet 1 located in Availability Zone 1.
 *
 * @schema CfnModulePropsParametersPublicSubnet1Cidr
 */
export interface CfnModulePropsParametersPublicSubnet1Cidr {
  /**
   * @schema CfnModulePropsParametersPublicSubnet1Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersPublicSubnet1Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersPublicSubnet1Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersPublicSubnet1Cidr(obj: CfnModulePropsParametersPublicSubnet1Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR block for the public (DMZ) subnet 2 located in Availability Zone 2.
 *
 * @schema CfnModulePropsParametersPublicSubnet2Cidr
 */
export interface CfnModulePropsParametersPublicSubnet2Cidr {
  /**
   * @schema CfnModulePropsParametersPublicSubnet2Cidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersPublicSubnet2Cidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersPublicSubnet2Cidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersPublicSubnet2Cidr(obj: CfnModulePropsParametersPublicSubnet2Cidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CIDR IP range permitted to access Artifactory. It is recommended that you set this value to a trusted IP range. For example, you may want to limit software access to your corporate network.
 *
 * @schema CfnModulePropsParametersAccessCidr
 */
export interface CfnModulePropsParametersAccessCidr {
  /**
   * @schema CfnModulePropsParametersAccessCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersAccessCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersAccessCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersAccessCidr(obj: CfnModulePropsParametersAccessCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Remote CIDR range that allows you to connect to the bastion instance by using SSH. It is recommended that you set this value to a trusted IP range. For example, you may want to grant specific ranges from within your corporate network that use the SSH protocol.
 *
 * @schema CfnModulePropsParametersRemoteAccessCidr
 */
export interface CfnModulePropsParametersRemoteAccessCidr {
  /**
   * @schema CfnModulePropsParametersRemoteAccessCidr#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersRemoteAccessCidr#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersRemoteAccessCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersRemoteAccessCidr(obj: CfnModulePropsParametersRemoteAccessCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the bastion instances.
 *
 * @schema CfnModulePropsParametersBastionInstanceType
 */
export interface CfnModulePropsParametersBastionInstanceType {
  /**
   * @schema CfnModulePropsParametersBastionInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersBastionInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersBastionInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersBastionInstanceType(obj: CfnModulePropsParametersBastionInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the root volume in the bastion instances.
 *
 * @schema CfnModulePropsParametersBastionRootVolumeSize
 */
export interface CfnModulePropsParametersBastionRootVolumeSize {
  /**
   * @schema CfnModulePropsParametersBastionRootVolumeSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersBastionRootVolumeSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersBastionRootVolumeSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersBastionRootVolumeSize(obj: CfnModulePropsParametersBastionRootVolumeSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose whether to enable TCP forwarding via bootstrapping of the bastion instance.
 *
 * @schema CfnModulePropsParametersBastionEnableTcpForwarding
 */
export interface CfnModulePropsParametersBastionEnableTcpForwarding {
  /**
   * @schema CfnModulePropsParametersBastionEnableTcpForwarding#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersBastionEnableTcpForwarding#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersBastionEnableTcpForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersBastionEnableTcpForwarding(obj: CfnModulePropsParametersBastionEnableTcpForwarding | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose true to enable X11 via bootstrapping of the bastion host. Setting this value to true enables X Windows over SSH. X11 forwarding can be useful, but it is also a security risk, so it's recommended that you keep the default (false) setting.
 *
 * @schema CfnModulePropsParametersBastionEnableX11Forwarding
 */
export interface CfnModulePropsParametersBastionEnableX11Forwarding {
  /**
   * @schema CfnModulePropsParametersBastionEnableX11Forwarding#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersBastionEnableX11Forwarding#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersBastionEnableX11Forwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersBastionEnableX11Forwarding(obj: CfnModulePropsParametersBastionEnableX11Forwarding | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Linux distribution for the Amazon Machine Image (AMI) to be used for the bastion instances.
 *
 * @schema CfnModulePropsParametersBastionOs
 */
export interface CfnModulePropsParametersBastionOs {
  /**
   * @schema CfnModulePropsParametersBastionOs#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersBastionOs#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersBastionOs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersBastionOs(obj: CfnModulePropsParametersBastionOs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number of bastion instances to create.
 *
 * @schema CfnModulePropsParametersNumBastionHosts
 */
export interface CfnModulePropsParametersNumBastionHosts {
  /**
   * @schema CfnModulePropsParametersNumBastionHosts#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersNumBastionHosts#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersNumBastionHosts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersNumBastionHosts(obj: CfnModulePropsParametersNumBastionHosts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size in gigabytes of available storage (min 10GB). The Quick Start creates an Amazon Elastic Block Store (Amazon EBS) volumes of this size.
 *
 * @schema CfnModulePropsParametersVolumeSize
 */
export interface CfnModulePropsParametersVolumeSize {
  /**
   * @schema CfnModulePropsParametersVolumeSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersVolumeSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersVolumeSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersVolumeSize(obj: CfnModulePropsParametersVolumeSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EC2 instance type for the Artifactory instances.
 *
 * @schema CfnModulePropsParametersInstanceType
 */
export interface CfnModulePropsParametersInstanceType {
  /**
   * @schema CfnModulePropsParametersInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersInstanceType(obj: CfnModulePropsParametersInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number of secondary Artifactory servers to complete your HA deployment. To align with Artifactory best practices, the minimum number is two, and the maximum is seven. Do not select more instances than you have licenses for.
 *
 * @schema CfnModulePropsParametersNumberOfSecondary
 */
export interface CfnModulePropsParametersNumberOfSecondary {
  /**
   * @schema CfnModulePropsParametersNumberOfSecondary#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersNumberOfSecondary#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersNumberOfSecondary' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersNumberOfSecondary(obj: CfnModulePropsParametersNumberOfSecondary | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JFrog Artifactory product you want to install into an AMI.
 *
 * @schema CfnModulePropsParametersArtifactoryProduct
 */
export interface CfnModulePropsParametersArtifactoryProduct {
  /**
   * @schema CfnModulePropsParametersArtifactoryProduct#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersArtifactoryProduct#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersArtifactoryProduct' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersArtifactoryProduct(obj: CfnModulePropsParametersArtifactoryProduct | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Version of Artifactory that you want to deploy into the Quick Start. To select the correct version, see the release notes at https://www.jfrog.com/confluence/display/RTF/Release+Notes.
 *
 * @schema CfnModulePropsParametersArtifactoryVersion
 */
export interface CfnModulePropsParametersArtifactoryVersion {
  /**
   * @schema CfnModulePropsParametersArtifactoryVersion#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersArtifactoryVersion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersArtifactoryVersion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersArtifactoryVersion(obj: CfnModulePropsParametersArtifactoryVersion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret name created in AWS Secrets Manager, which contains the Artifactory licenses.
 *
 * @schema CfnModulePropsParametersSmLicenseName
 */
export interface CfnModulePropsParametersSmLicenseName {
  /**
   * @schema CfnModulePropsParametersSmLicenseName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersSmLicenseName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersSmLicenseName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersSmLicenseName(obj: CfnModulePropsParametersSmLicenseName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret name created in AWS Secrets Manager, which contains the SSL certificate and certificate key.
 *
 * @schema CfnModulePropsParametersSmCertName
 */
export interface CfnModulePropsParametersSmCertName {
  /**
   * @schema CfnModulePropsParametersSmCertName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersSmCertName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersSmCertName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersSmCertName(obj: CfnModulePropsParametersSmCertName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of your Artifactory server. Ensure that this matches your certificate.
 *
 * @schema CfnModulePropsParametersArtifactoryServerName
 */
export interface CfnModulePropsParametersArtifactoryServerName {
  /**
   * @schema CfnModulePropsParametersArtifactoryServerName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersArtifactoryServerName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersArtifactoryServerName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersArtifactoryServerName(obj: CfnModulePropsParametersArtifactoryServerName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Master key for the Artifactory cluster. Generate a master key by using the command '$openssl rand -hex 16'.
 *
 * @schema CfnModulePropsParametersMasterKey
 */
export interface CfnModulePropsParametersMasterKey {
  /**
   * @schema CfnModulePropsParametersMasterKey#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersMasterKey#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersMasterKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersMasterKey(obj: CfnModulePropsParametersMasterKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set Java options to pass to the JVM for Artifactory. For more information, see the Artifactory system requirements at https://www.jfrog.com/confluence/display/RTF/System+Requirements#SystemRequirements-RecommendedHardware. Do not add Xms or Xmx settings without disabling DefaultJavaMemSettings.
 *
 * @schema CfnModulePropsParametersExtraJavaOptions
 */
export interface CfnModulePropsParametersExtraJavaOptions {
  /**
   * @schema CfnModulePropsParametersExtraJavaOptions#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersExtraJavaOptions#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersExtraJavaOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersExtraJavaOptions(obj: CfnModulePropsParametersExtraJavaOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose false to overwrite the standard memory-calculation options to pass to the Artifactory JVM. If you plan to overwrite them, ensure they are added to the ExtraJavaOptions to prevent the stack provision from failing.
 *
 * @schema CfnModulePropsParametersDefaultJavaMemSettings
 */
export interface CfnModulePropsParametersDefaultJavaMemSettings {
  /**
   * @schema CfnModulePropsParametersDefaultJavaMemSettings#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDefaultJavaMemSettings#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDefaultJavaMemSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDefaultJavaMemSettings(obj: CfnModulePropsParametersDefaultJavaMemSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name of your database instance. The name must be unique across all instances owned by your AWS account in the current Region. The database instance identifier is case-insensitive, but it's stored in lowercase (as in "mydbinstance").
 *
 * @schema CfnModulePropsParametersDatabaseName
 */
export interface CfnModulePropsParametersDatabaseName {
  /**
   * @schema CfnModulePropsParametersDatabaseName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDatabaseName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDatabaseName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDatabaseName(obj: CfnModulePropsParametersDatabaseName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Database engine that you want to run.
 *
 * @schema CfnModulePropsParametersDatabaseEngine
 */
export interface CfnModulePropsParametersDatabaseEngine {
  /**
   * @schema CfnModulePropsParametersDatabaseEngine#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDatabaseEngine#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDatabaseEngine' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDatabaseEngine(obj: CfnModulePropsParametersDatabaseEngine | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Login ID for the master user of your database instance.
 *
 * @schema CfnModulePropsParametersDatabaseUser
 */
export interface CfnModulePropsParametersDatabaseUser {
  /**
   * @schema CfnModulePropsParametersDatabaseUser#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDatabaseUser#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDatabaseUser' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDatabaseUser(obj: CfnModulePropsParametersDatabaseUser | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Password for the Artifactory database user.
 *
 * @schema CfnModulePropsParametersDatabasePassword
 */
export interface CfnModulePropsParametersDatabasePassword {
  /**
   * @schema CfnModulePropsParametersDatabasePassword#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDatabasePassword#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDatabasePassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDatabasePassword(obj: CfnModulePropsParametersDatabasePassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size of the database to be deployed as part of the Quick Start.
 *
 * @schema CfnModulePropsParametersDatabaseInstance
 */
export interface CfnModulePropsParametersDatabaseInstance {
  /**
   * @schema CfnModulePropsParametersDatabaseInstance#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDatabaseInstance#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDatabaseInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDatabaseInstance(obj: CfnModulePropsParametersDatabaseInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Size in gigabytes of available storage for the database instance.
 *
 * @schema CfnModulePropsParametersDatabaseAllocatedStorage
 */
export interface CfnModulePropsParametersDatabaseAllocatedStorage {
  /**
   * @schema CfnModulePropsParametersDatabaseAllocatedStorage#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDatabaseAllocatedStorage#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDatabaseAllocatedStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDatabaseAllocatedStorage(obj: CfnModulePropsParametersDatabaseAllocatedStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Preferred availability zone for Amazon RDS primary instance
 *
 * @schema CfnModulePropsParametersDatabasePreferredAz
 */
export interface CfnModulePropsParametersDatabasePreferredAz {
  /**
   * @schema CfnModulePropsParametersDatabasePreferredAz#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersDatabasePreferredAz#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersDatabasePreferredAz' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersDatabasePreferredAz(obj: CfnModulePropsParametersDatabasePreferredAz | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose false to create an Amazon RDS instance in a single Availability Zone.
 *
 * @schema CfnModulePropsParametersMultiAzDatabase
 */
export interface CfnModulePropsParametersMultiAzDatabase {
  /**
   * @schema CfnModulePropsParametersMultiAzDatabase#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersMultiAzDatabase#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersMultiAzDatabase' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersMultiAzDatabase(obj: CfnModulePropsParametersMultiAzDatabase | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
 *
 * @schema CfnModulePropsParametersQsS3BucketName
 */
export interface CfnModulePropsParametersQsS3BucketName {
  /**
   * @schema CfnModulePropsParametersQsS3BucketName#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersQsS3BucketName#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersQsS3BucketName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersQsS3BucketName(obj: CfnModulePropsParametersQsS3BucketName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
 *
 * @schema CfnModulePropsParametersQsS3KeyPrefix
 */
export interface CfnModulePropsParametersQsS3KeyPrefix {
  /**
   * @schema CfnModulePropsParametersQsS3KeyPrefix#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersQsS3KeyPrefix#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersQsS3KeyPrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersQsS3KeyPrefix(obj: CfnModulePropsParametersQsS3KeyPrefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. If you use your own bucket, you must specify your own value.
 *
 * @schema CfnModulePropsParametersQsS3BucketRegion
 */
export interface CfnModulePropsParametersQsS3BucketRegion {
  /**
   * @schema CfnModulePropsParametersQsS3BucketRegion#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersQsS3BucketRegion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersQsS3BucketRegion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersQsS3BucketRegion(obj: CfnModulePropsParametersQsS3BucketRegion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose true to install JFrog Xray instance(s).
 *
 * @schema CfnModulePropsParametersInstallXray
 */
export interface CfnModulePropsParametersInstallXray {
  /**
   * @schema CfnModulePropsParametersInstallXray#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersInstallXray#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersInstallXray' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersInstallXray(obj: CfnModulePropsParametersInstallXray | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The version of Xray that you want to deploy into the Quick Start.
 *
 * @schema CfnModulePropsParametersXrayVersion
 */
export interface CfnModulePropsParametersXrayVersion {
  /**
   * @schema CfnModulePropsParametersXrayVersion#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersXrayVersion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersXrayVersion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersXrayVersion(obj: CfnModulePropsParametersXrayVersion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The number of Xray instances servers to complete your HA deployment. The minimum number is one; the maximum is seven. Do not select more than instances than you have licenses for.
 *
 * @schema CfnModulePropsParametersXrayNumberOfInstances
 */
export interface CfnModulePropsParametersXrayNumberOfInstances {
  /**
   * @schema CfnModulePropsParametersXrayNumberOfInstances#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersXrayNumberOfInstances#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersXrayNumberOfInstances' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersXrayNumberOfInstances(obj: CfnModulePropsParametersXrayNumberOfInstances | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The EC2 instance type for the Xray instances.
 *
 * @schema CfnModulePropsParametersXrayInstanceType
 */
export interface CfnModulePropsParametersXrayInstanceType {
  /**
   * @schema CfnModulePropsParametersXrayInstanceType#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersXrayInstanceType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersXrayInstanceType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersXrayInstanceType(obj: CfnModulePropsParametersXrayInstanceType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The login ID for the Xray database user.
 *
 * @schema CfnModulePropsParametersXrayDatabaseUser
 */
export interface CfnModulePropsParametersXrayDatabaseUser {
  /**
   * @schema CfnModulePropsParametersXrayDatabaseUser#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersXrayDatabaseUser#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersXrayDatabaseUser' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersXrayDatabaseUser(obj: CfnModulePropsParametersXrayDatabaseUser | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The password for the Xray database user.
 *
 * @schema CfnModulePropsParametersXrayDatabasePassword
 */
export interface CfnModulePropsParametersXrayDatabasePassword {
  /**
   * @schema CfnModulePropsParametersXrayDatabasePassword#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersXrayDatabasePassword#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersXrayDatabasePassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersXrayDatabasePassword(obj: CfnModulePropsParametersXrayDatabasePassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesArtifactoryVpcStack
 */
export interface CfnModulePropsResourcesArtifactoryVpcStack {
  /**
   * @schema CfnModulePropsResourcesArtifactoryVpcStack#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesArtifactoryVpcStack#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesArtifactoryVpcStack' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesArtifactoryVpcStack(obj: CfnModulePropsResourcesArtifactoryVpcStack | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesArtifactoryExistingVpcStack
 */
export interface CfnModulePropsResourcesArtifactoryExistingVpcStack {
  /**
   * @schema CfnModulePropsResourcesArtifactoryExistingVpcStack#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesArtifactoryExistingVpcStack#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesArtifactoryExistingVpcStack' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesArtifactoryExistingVpcStack(obj: CfnModulePropsResourcesArtifactoryExistingVpcStack | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `JFrog::Artifactory::NewVpc::MODULE`
 *
 * @cloudformationResource JFrog::Artifactory::NewVpc::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "JFrog::Artifactory::NewVpc::MODULE";

  /**
   * Resource props.
   */
  public readonly props: CfnModuleProps;


  /**
   * Create a new `JFrog::Artifactory::NewVpc::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: cdk.Construct, id: string, props: CfnModuleProps) {
    super(scope, id, { type: CfnModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnModuleProps(props)! });

    this.props = props;

  }
}