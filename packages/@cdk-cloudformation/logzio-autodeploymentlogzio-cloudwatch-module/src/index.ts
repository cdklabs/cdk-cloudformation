// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Schema for Module Fragment of type logzio::autoDeploymentLogzio::CloudWatch::MODULE
 *
 * @schema CfnCloudWatchModuleProps
 */
export interface CfnCloudWatchModuleProps {
  /**
   * @schema CfnCloudWatchModuleProps#Parameters
   */
  readonly parameters?: CfnCloudWatchModulePropsParameters;

  /**
   * @schema CfnCloudWatchModuleProps#Resources
   */
  readonly resources?: CfnCloudWatchModulePropsResources;

}

/**
 * Converts an object of type 'CfnCloudWatchModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModuleProps(obj: CfnCloudWatchModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnCloudWatchModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnCloudWatchModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnCloudWatchModulePropsParameters
 */
export interface CfnCloudWatchModulePropsParameters {
  /**
   * The Logz.io listener URL fot your region.
   *
   * @schema CfnCloudWatchModulePropsParameters#LogzioListenerUrl
   */
  readonly logzioListenerUrl?: CfnCloudWatchModulePropsParametersLogzioListenerUrl;

  /**
   * Logz.io account token.
   *
   * @schema CfnCloudWatchModulePropsParameters#LogzioToken
   */
  readonly logzioToken?: CfnCloudWatchModulePropsParametersLogzioToken;

  /**
   * The log type you'll use with this Lambda. Please note that you should create a new Lambda for each log type you use. This can be a built-in log type, or your custom log type
   *
   * @schema CfnCloudWatchModulePropsParameters#LogzioType
   */
  readonly logzioType?: CfnCloudWatchModulePropsParametersLogzioType;

  /**
   * JSON or text. If json, the lambda function will attempt to parse the message field as JSON and populate the event data with the parsed fields.
   *
   * @schema CfnCloudWatchModulePropsParameters#LogzioFormat
   */
  readonly logzioFormat?: CfnCloudWatchModulePropsParametersLogzioFormat;

  /**
   * If true, the Lambda will send compressed logs. If false, the Lambda will send uncompressed logs.
   *
   * @schema CfnCloudWatchModulePropsParameters#LogzioCompress
   */
  readonly logzioCompress?: CfnCloudWatchModulePropsParametersLogzioCompress;

  /**
   * By default, we do not send logs of type START, END, REPORT. Choose true to send all log types.
   *
   * @schema CfnCloudWatchModulePropsParameters#LogzioSendAll
   */
  readonly logzioSendAll?: CfnCloudWatchModulePropsParametersLogzioSendAll;

  /**
   * Enriches the CloudWatch events with custom properties at ship time. The format is `key1=value1;key2=value2`. By default is empty.
   *
   * @schema CfnCloudWatchModulePropsParameters#LogzioEnrich
   */
  readonly logzioEnrich?: CfnCloudWatchModulePropsParametersLogzioEnrich;

  /**
   * CloudWatch Log Group name from where you want to send logs.
   *
   * @schema CfnCloudWatchModulePropsParameters#LogGroup
   */
  readonly logGroup?: CfnCloudWatchModulePropsParametersLogGroup;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParameters(obj: CfnCloudWatchModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogzioListenerUrl': toJson_CfnCloudWatchModulePropsParametersLogzioListenerUrl(obj.logzioListenerUrl),
    'LogzioToken': toJson_CfnCloudWatchModulePropsParametersLogzioToken(obj.logzioToken),
    'LogzioType': toJson_CfnCloudWatchModulePropsParametersLogzioType(obj.logzioType),
    'LogzioFormat': toJson_CfnCloudWatchModulePropsParametersLogzioFormat(obj.logzioFormat),
    'LogzioCompress': toJson_CfnCloudWatchModulePropsParametersLogzioCompress(obj.logzioCompress),
    'LogzioSendAll': toJson_CfnCloudWatchModulePropsParametersLogzioSendAll(obj.logzioSendAll),
    'LogzioEnrich': toJson_CfnCloudWatchModulePropsParametersLogzioEnrich(obj.logzioEnrich),
    'LogGroup': toJson_CfnCloudWatchModulePropsParametersLogGroup(obj.logGroup),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnCloudWatchModulePropsResources
 */
export interface CfnCloudWatchModulePropsResources {
  /**
   * @schema CfnCloudWatchModulePropsResources#LambdaPermission
   */
  readonly lambdaPermission?: CfnCloudWatchModulePropsResourcesLambdaPermission;

  /**
   * @schema CfnCloudWatchModulePropsResources#LogzioSubscriptionFilter
   */
  readonly logzioSubscriptionFilter?: CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter;

  /**
   * @schema CfnCloudWatchModulePropsResources#lambdaIamRole
   */
  readonly lambdaIamRole?: CfnCloudWatchModulePropsResourcesLambdaIamRole;

  /**
   * @schema CfnCloudWatchModulePropsResources#LogzioCloudwatchLogsLambda
   */
  readonly logzioCloudwatchLogsLambda?: CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsResources(obj: CfnCloudWatchModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LambdaPermission': toJson_CfnCloudWatchModulePropsResourcesLambdaPermission(obj.lambdaPermission),
    'LogzioSubscriptionFilter': toJson_CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter(obj.logzioSubscriptionFilter),
    'lambdaIamRole': toJson_CfnCloudWatchModulePropsResourcesLambdaIamRole(obj.lambdaIamRole),
    'LogzioCloudwatchLogsLambda': toJson_CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda(obj.logzioCloudwatchLogsLambda),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Logz.io listener URL fot your region.
 *
 * @schema CfnCloudWatchModulePropsParametersLogzioListenerUrl
 */
export interface CfnCloudWatchModulePropsParametersLogzioListenerUrl {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioListenerUrl#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioListenerUrl#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogzioListenerUrl' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogzioListenerUrl(obj: CfnCloudWatchModulePropsParametersLogzioListenerUrl | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Logz.io account token.
 *
 * @schema CfnCloudWatchModulePropsParametersLogzioToken
 */
export interface CfnCloudWatchModulePropsParametersLogzioToken {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioToken#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioToken#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogzioToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogzioToken(obj: CfnCloudWatchModulePropsParametersLogzioToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The log type you'll use with this Lambda. Please note that you should create a new Lambda for each log type you use. This can be a built-in log type, or your custom log type
 *
 * @schema CfnCloudWatchModulePropsParametersLogzioType
 */
export interface CfnCloudWatchModulePropsParametersLogzioType {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioType#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogzioType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogzioType(obj: CfnCloudWatchModulePropsParametersLogzioType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JSON or text. If json, the lambda function will attempt to parse the message field as JSON and populate the event data with the parsed fields.
 *
 * @schema CfnCloudWatchModulePropsParametersLogzioFormat
 */
export interface CfnCloudWatchModulePropsParametersLogzioFormat {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioFormat#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioFormat#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogzioFormat' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogzioFormat(obj: CfnCloudWatchModulePropsParametersLogzioFormat | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If true, the Lambda will send compressed logs. If false, the Lambda will send uncompressed logs.
 *
 * @schema CfnCloudWatchModulePropsParametersLogzioCompress
 */
export interface CfnCloudWatchModulePropsParametersLogzioCompress {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioCompress#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioCompress#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogzioCompress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogzioCompress(obj: CfnCloudWatchModulePropsParametersLogzioCompress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * By default, we do not send logs of type START, END, REPORT. Choose true to send all log types.
 *
 * @schema CfnCloudWatchModulePropsParametersLogzioSendAll
 */
export interface CfnCloudWatchModulePropsParametersLogzioSendAll {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioSendAll#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioSendAll#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogzioSendAll' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogzioSendAll(obj: CfnCloudWatchModulePropsParametersLogzioSendAll | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Enriches the CloudWatch events with custom properties at ship time. The format is `key1=value1;key2=value2`. By default is empty.
 *
 * @schema CfnCloudWatchModulePropsParametersLogzioEnrich
 */
export interface CfnCloudWatchModulePropsParametersLogzioEnrich {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioEnrich#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogzioEnrich#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogzioEnrich' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogzioEnrich(obj: CfnCloudWatchModulePropsParametersLogzioEnrich | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CloudWatch Log Group name from where you want to send logs.
 *
 * @schema CfnCloudWatchModulePropsParametersLogGroup
 */
export interface CfnCloudWatchModulePropsParametersLogGroup {
  /**
   * @schema CfnCloudWatchModulePropsParametersLogGroup#Type
   */
  readonly type: string;

  /**
   * @schema CfnCloudWatchModulePropsParametersLogGroup#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsParametersLogGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsParametersLogGroup(obj: CfnCloudWatchModulePropsParametersLogGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnCloudWatchModulePropsResourcesLambdaPermission
 */
export interface CfnCloudWatchModulePropsResourcesLambdaPermission {
  /**
   * @schema CfnCloudWatchModulePropsResourcesLambdaPermission#Type
   */
  readonly type?: string;

  /**
   * @schema CfnCloudWatchModulePropsResourcesLambdaPermission#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsResourcesLambdaPermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsResourcesLambdaPermission(obj: CfnCloudWatchModulePropsResourcesLambdaPermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter
 */
export interface CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter {
  /**
   * @schema CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter#Type
   */
  readonly type?: string;

  /**
   * @schema CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter(obj: CfnCloudWatchModulePropsResourcesLogzioSubscriptionFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnCloudWatchModulePropsResourcesLambdaIamRole
 */
export interface CfnCloudWatchModulePropsResourcesLambdaIamRole {
  /**
   * @schema CfnCloudWatchModulePropsResourcesLambdaIamRole#Type
   */
  readonly type?: string;

  /**
   * @schema CfnCloudWatchModulePropsResourcesLambdaIamRole#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsResourcesLambdaIamRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsResourcesLambdaIamRole(obj: CfnCloudWatchModulePropsResourcesLambdaIamRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda
 */
export interface CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda {
  /**
   * @schema CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda#Type
   */
  readonly type?: string;

  /**
   * @schema CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda(obj: CfnCloudWatchModulePropsResourcesLogzioCloudwatchLogsLambda | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `logzio::autoDeploymentLogzio::CloudWatch::MODULE`
 *
 * @cloudformationResource logzio::autoDeploymentLogzio::CloudWatch::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnCloudWatchModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "logzio::autoDeploymentLogzio::CloudWatch::MODULE";

  /**
   * Resource props.
   */
  public readonly props: CfnCloudWatchModuleProps;


  /**
   * Create a new `logzio::autoDeploymentLogzio::CloudWatch::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnCloudWatchModuleProps) {
    super(scope, id, { type: CfnCloudWatchModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnCloudWatchModuleProps(props)! });

    this.props = props;

  }
}