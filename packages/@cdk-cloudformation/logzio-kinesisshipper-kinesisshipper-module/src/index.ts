// Generated by cdk-import
import * as cdk from '@aws-cdk/core';

/**
 * Schema for Module Fragment of type Logzio::KinesisShipper::KinesisShipper::MODULE
 *
 * @schema CfnModuleProps
 */
export interface CfnModuleProps {
  /**
   * @schema CfnModuleProps#Parameters
   */
  readonly parameters?: CfnModulePropsParameters;

  /**
   * @schema CfnModuleProps#Resources
   */
  readonly resources?: CfnModulePropsResources;

}

/**
 * Converts an object of type 'CfnModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModuleProps(obj: CfnModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsParameters
 */
export interface CfnModulePropsParameters {
  /**
   * The token of the account you want to ship to. Can be found at https://app.logz.io/#/dashboard/settings/general
   *
   * @schema CfnModulePropsParameters#LogzioTOKEN
   */
  readonly logzioToken?: CfnModulePropsParametersLogzioToken;

  /**
   * json or text. If json, the lambda function will attempt to parse the message field as JSON and populate the event data with the parsed fields.
   *
   * @schema CfnModulePropsParameters#LogzioFORMAT
   */
  readonly logzioFormat?: CfnModulePropsParametersLogzioFormat;

  /**
   * Two-letter region code, or blank for US East (Northern Virginia). This determines your listener URL (where you're shipping the logs to) and API URL. You can find your region code in the Regions and URLs at https://docs.logz.io/user-guide/accounts/account-region.html#regions-and-urls table
   *
   * @schema CfnModulePropsParameters#LogzioREGION
   */
  readonly logzioRegion?: CfnModulePropsParametersLogzioRegion;

  /**
   * If true, the Lambda will send compressed logs. If false, the Lambda will send uncompressed logs.
   *
   * @schema CfnModulePropsParameters#LogzioCOMPRESS
   */
  readonly logzioCompress?: CfnModulePropsParametersLogzioCompress;

  /**
   * Set this ENV variable to split the a record into multiple logs based on a field containing an array of messages. For more information see https://github.com/logzio/logzio_aws_serverless/blob/master/python3/kinesis/parse-json-array.md. Note: This option would work only if you set FORMAT to json.
   *
   * @schema CfnModulePropsParameters#LogzioMessagesArray
   */
  readonly logzioMessagesArray?: CfnModulePropsParametersLogzioMessagesArray;

  /**
   * The largest number of records that will be read from your stream at once.
   *
   * @schema CfnModulePropsParameters#KinesisStreamBatchSize
   */
  readonly kinesisStreamBatchSize?: CfnModulePropsParametersKinesisStreamBatchSize;

  /**
   * Deprecated. Use LogzioREGION instead
   *
   * @schema CfnModulePropsParameters#LogzioURL
   */
  readonly logzioUrl?: CfnModulePropsParametersLogzioUrl;

  /**
   * The position in the stream to start reading from. For more information, see ShardIteratorType in the Amazon Kinesis API Reference.
   *
   * @schema CfnModulePropsParameters#KinesisStreamStartingPosition
   */
  readonly kinesisStreamStartingPosition?: CfnModulePropsParametersKinesisStreamStartingPosition;

  /**
   * The log type you'll use with this Lambda. Please note that you should create a new Lambda for each log type you use. This can be a built-in log type, or your custom log type
   *
   * @schema CfnModulePropsParameters#LogzioTYPE
   */
  readonly logzioType?: CfnModulePropsParametersLogzioType;

  /**
   * Enter a Kinesis stream to listen for updates on.
   *
   * @schema CfnModulePropsParameters#KinesisStream
   */
  readonly kinesisStream?: CfnModulePropsParametersKinesisStream;

}

/**
 * Converts an object of type 'CfnModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParameters(obj: CfnModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogzioTOKEN': toJson_CfnModulePropsParametersLogzioToken(obj.logzioToken),
    'LogzioFORMAT': toJson_CfnModulePropsParametersLogzioFormat(obj.logzioFormat),
    'LogzioREGION': toJson_CfnModulePropsParametersLogzioRegion(obj.logzioRegion),
    'LogzioCOMPRESS': toJson_CfnModulePropsParametersLogzioCompress(obj.logzioCompress),
    'LogzioMessagesArray': toJson_CfnModulePropsParametersLogzioMessagesArray(obj.logzioMessagesArray),
    'KinesisStreamBatchSize': toJson_CfnModulePropsParametersKinesisStreamBatchSize(obj.kinesisStreamBatchSize),
    'LogzioURL': toJson_CfnModulePropsParametersLogzioUrl(obj.logzioUrl),
    'KinesisStreamStartingPosition': toJson_CfnModulePropsParametersKinesisStreamStartingPosition(obj.kinesisStreamStartingPosition),
    'LogzioTYPE': toJson_CfnModulePropsParametersLogzioType(obj.logzioType),
    'KinesisStream': toJson_CfnModulePropsParametersKinesisStream(obj.kinesisStream),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResources
 */
export interface CfnModulePropsResources {
  /**
   * @schema CfnModulePropsResources#LogzioKinesisLambda
   */
  readonly logzioKinesisLambda?: CfnModulePropsResourcesLogzioKinesisLambda;

  /**
   * @schema CfnModulePropsResources#LogzioKinesisLambdaRole
   */
  readonly logzioKinesisLambdaRole?: CfnModulePropsResourcesLogzioKinesisLambdaRole;

  /**
   * @schema CfnModulePropsResources#LogzioKinesisLambdaKinesisStream
   */
  readonly logzioKinesisLambdaKinesisStream?: CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream;

}

/**
 * Converts an object of type 'CfnModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResources(obj: CfnModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogzioKinesisLambda': toJson_CfnModulePropsResourcesLogzioKinesisLambda(obj.logzioKinesisLambda),
    'LogzioKinesisLambdaRole': toJson_CfnModulePropsResourcesLogzioKinesisLambdaRole(obj.logzioKinesisLambdaRole),
    'LogzioKinesisLambdaKinesisStream': toJson_CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream(obj.logzioKinesisLambdaKinesisStream),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The token of the account you want to ship to. Can be found at https://app.logz.io/#/dashboard/settings/general
 *
 * @schema CfnModulePropsParametersLogzioToken
 */
export interface CfnModulePropsParametersLogzioToken {
  /**
   * @schema CfnModulePropsParametersLogzioToken#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioToken#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioToken(obj: CfnModulePropsParametersLogzioToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * json or text. If json, the lambda function will attempt to parse the message field as JSON and populate the event data with the parsed fields.
 *
 * @schema CfnModulePropsParametersLogzioFormat
 */
export interface CfnModulePropsParametersLogzioFormat {
  /**
   * @schema CfnModulePropsParametersLogzioFormat#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioFormat#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioFormat' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioFormat(obj: CfnModulePropsParametersLogzioFormat | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Two-letter region code, or blank for US East (Northern Virginia). This determines your listener URL (where you're shipping the logs to) and API URL. You can find your region code in the Regions and URLs at https://docs.logz.io/user-guide/accounts/account-region.html#regions-and-urls table
 *
 * @schema CfnModulePropsParametersLogzioRegion
 */
export interface CfnModulePropsParametersLogzioRegion {
  /**
   * @schema CfnModulePropsParametersLogzioRegion#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioRegion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioRegion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioRegion(obj: CfnModulePropsParametersLogzioRegion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If true, the Lambda will send compressed logs. If false, the Lambda will send uncompressed logs.
 *
 * @schema CfnModulePropsParametersLogzioCompress
 */
export interface CfnModulePropsParametersLogzioCompress {
  /**
   * @schema CfnModulePropsParametersLogzioCompress#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioCompress#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioCompress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioCompress(obj: CfnModulePropsParametersLogzioCompress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set this ENV variable to split the a record into multiple logs based on a field containing an array of messages. For more information see https://github.com/logzio/logzio_aws_serverless/blob/master/python3/kinesis/parse-json-array.md. Note: This option would work only if you set FORMAT to json.
 *
 * @schema CfnModulePropsParametersLogzioMessagesArray
 */
export interface CfnModulePropsParametersLogzioMessagesArray {
  /**
   * @schema CfnModulePropsParametersLogzioMessagesArray#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioMessagesArray#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioMessagesArray' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioMessagesArray(obj: CfnModulePropsParametersLogzioMessagesArray | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The largest number of records that will be read from your stream at once.
 *
 * @schema CfnModulePropsParametersKinesisStreamBatchSize
 */
export interface CfnModulePropsParametersKinesisStreamBatchSize {
  /**
   * @schema CfnModulePropsParametersKinesisStreamBatchSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersKinesisStreamBatchSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersKinesisStreamBatchSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersKinesisStreamBatchSize(obj: CfnModulePropsParametersKinesisStreamBatchSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Deprecated. Use LogzioREGION instead
 *
 * @schema CfnModulePropsParametersLogzioUrl
 */
export interface CfnModulePropsParametersLogzioUrl {
  /**
   * @schema CfnModulePropsParametersLogzioUrl#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioUrl#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioUrl' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioUrl(obj: CfnModulePropsParametersLogzioUrl | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The position in the stream to start reading from. For more information, see ShardIteratorType in the Amazon Kinesis API Reference.
 *
 * @schema CfnModulePropsParametersKinesisStreamStartingPosition
 */
export interface CfnModulePropsParametersKinesisStreamStartingPosition {
  /**
   * @schema CfnModulePropsParametersKinesisStreamStartingPosition#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersKinesisStreamStartingPosition#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersKinesisStreamStartingPosition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersKinesisStreamStartingPosition(obj: CfnModulePropsParametersKinesisStreamStartingPosition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The log type you'll use with this Lambda. Please note that you should create a new Lambda for each log type you use. This can be a built-in log type, or your custom log type
 *
 * @schema CfnModulePropsParametersLogzioType
 */
export interface CfnModulePropsParametersLogzioType {
  /**
   * @schema CfnModulePropsParametersLogzioType#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersLogzioType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersLogzioType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersLogzioType(obj: CfnModulePropsParametersLogzioType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Enter a Kinesis stream to listen for updates on.
 *
 * @schema CfnModulePropsParametersKinesisStream
 */
export interface CfnModulePropsParametersKinesisStream {
  /**
   * @schema CfnModulePropsParametersKinesisStream#Type
   */
  readonly type: string;

  /**
   * @schema CfnModulePropsParametersKinesisStream#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnModulePropsParametersKinesisStream' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsParametersKinesisStream(obj: CfnModulePropsParametersKinesisStream | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesLogzioKinesisLambda
 */
export interface CfnModulePropsResourcesLogzioKinesisLambda {
  /**
   * @schema CfnModulePropsResourcesLogzioKinesisLambda#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesLogzioKinesisLambda#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesLogzioKinesisLambda' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesLogzioKinesisLambda(obj: CfnModulePropsResourcesLogzioKinesisLambda | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesLogzioKinesisLambdaRole
 */
export interface CfnModulePropsResourcesLogzioKinesisLambdaRole {
  /**
   * @schema CfnModulePropsResourcesLogzioKinesisLambdaRole#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesLogzioKinesisLambdaRole#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesLogzioKinesisLambdaRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesLogzioKinesisLambdaRole(obj: CfnModulePropsResourcesLogzioKinesisLambdaRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream
 */
export interface CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream {
  /**
   * @schema CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream#Type
   */
  readonly type?: string;

  /**
   * @schema CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream(obj: CfnModulePropsResourcesLogzioKinesisLambdaKinesisStream | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `Logzio::KinesisShipper::KinesisShipper::MODULE`
 *
 * @cloudformationResource Logzio::KinesisShipper::KinesisShipper::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Logzio::KinesisShipper::KinesisShipper::MODULE";

  /**
   * `Logzio::KinesisShipper::KinesisShipper::MODULE.Parameters`
   * @link http://unknown-url
   */
  public readonly parameters: any;
  /**
   * `Logzio::KinesisShipper::KinesisShipper::MODULE.Resources`
   * @link http://unknown-url
   */
  public readonly resources: any;

  /**
   * Create a new `Logzio::KinesisShipper::KinesisShipper::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: cdk.Construct, id: string, props: CfnModuleProps) {
    super(scope, id, { type: CfnModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnModuleProps(props)! });

    this.parameters = props.parameters;
    this.resources = props.resources;
  }
}