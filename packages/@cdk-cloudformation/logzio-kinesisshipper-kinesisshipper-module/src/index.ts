// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Schema for Module Fragment of type Logzio::KinesisShipper::KinesisShipper::MODULE
 *
 * @schema CfnKinesisShipperModuleProps
 */
export interface CfnKinesisShipperModuleProps {
  /**
   * @schema CfnKinesisShipperModuleProps#Parameters
   */
  readonly parameters?: CfnKinesisShipperModulePropsParameters;

  /**
   * @schema CfnKinesisShipperModuleProps#Resources
   */
  readonly resources?: CfnKinesisShipperModulePropsResources;

}

/**
 * Converts an object of type 'CfnKinesisShipperModuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModuleProps(obj: CfnKinesisShipperModuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Parameters': toJson_CfnKinesisShipperModulePropsParameters(obj.parameters),
    'Resources': toJson_CfnKinesisShipperModulePropsResources(obj.resources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnKinesisShipperModulePropsParameters
 */
export interface CfnKinesisShipperModulePropsParameters {
  /**
   * The token of the account you want to ship to. Can be found at https://app.logz.io/#/dashboard/settings/general
   *
   * @schema CfnKinesisShipperModulePropsParameters#LogzioTOKEN
   */
  readonly logzioToken?: CfnKinesisShipperModulePropsParametersLogzioToken;

  /**
   * json or text. If json, the lambda function will attempt to parse the message field as JSON and populate the event data with the parsed fields.
   *
   * @schema CfnKinesisShipperModulePropsParameters#LogzioFORMAT
   */
  readonly logzioFormat?: CfnKinesisShipperModulePropsParametersLogzioFormat;

  /**
   * Two-letter region code, or blank for US East (Northern Virginia). This determines your listener URL (where you're shipping the logs to) and API URL. You can find your region code in the Regions and URLs at https://docs.logz.io/user-guide/accounts/account-region.html#regions-and-urls table
   *
   * @schema CfnKinesisShipperModulePropsParameters#LogzioREGION
   */
  readonly logzioRegion?: CfnKinesisShipperModulePropsParametersLogzioRegion;

  /**
   * If true, the Lambda will send compressed logs. If false, the Lambda will send uncompressed logs.
   *
   * @schema CfnKinesisShipperModulePropsParameters#LogzioCOMPRESS
   */
  readonly logzioCompress?: CfnKinesisShipperModulePropsParametersLogzioCompress;

  /**
   * Set this ENV variable to split the a record into multiple logs based on a field containing an array of messages. For more information see https://github.com/logzio/logzio_aws_serverless/blob/master/python3/kinesis/parse-json-array.md. Note: This option would work only if you set FORMAT to json.
   *
   * @schema CfnKinesisShipperModulePropsParameters#LogzioMessagesArray
   */
  readonly logzioMessagesArray?: CfnKinesisShipperModulePropsParametersLogzioMessagesArray;

  /**
   * The largest number of records that will be read from your stream at once.
   *
   * @schema CfnKinesisShipperModulePropsParameters#KinesisStreamBatchSize
   */
  readonly kinesisStreamBatchSize?: CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize;

  /**
   * Deprecated. Use LogzioREGION instead
   *
   * @schema CfnKinesisShipperModulePropsParameters#LogzioURL
   */
  readonly logzioUrl?: CfnKinesisShipperModulePropsParametersLogzioUrl;

  /**
   * The position in the stream to start reading from. For more information, see ShardIteratorType in the Amazon Kinesis API Reference.
   *
   * @schema CfnKinesisShipperModulePropsParameters#KinesisStreamStartingPosition
   */
  readonly kinesisStreamStartingPosition?: CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition;

  /**
   * The log type you'll use with this Lambda. Please note that you should create a new Lambda for each log type you use. This can be a built-in log type, or your custom log type
   *
   * @schema CfnKinesisShipperModulePropsParameters#LogzioTYPE
   */
  readonly logzioType?: CfnKinesisShipperModulePropsParametersLogzioType;

  /**
   * Enter a Kinesis stream to listen for updates on.
   *
   * @schema CfnKinesisShipperModulePropsParameters#KinesisStream
   */
  readonly kinesisStream?: CfnKinesisShipperModulePropsParametersKinesisStream;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParameters(obj: CfnKinesisShipperModulePropsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogzioTOKEN': toJson_CfnKinesisShipperModulePropsParametersLogzioToken(obj.logzioToken),
    'LogzioFORMAT': toJson_CfnKinesisShipperModulePropsParametersLogzioFormat(obj.logzioFormat),
    'LogzioREGION': toJson_CfnKinesisShipperModulePropsParametersLogzioRegion(obj.logzioRegion),
    'LogzioCOMPRESS': toJson_CfnKinesisShipperModulePropsParametersLogzioCompress(obj.logzioCompress),
    'LogzioMessagesArray': toJson_CfnKinesisShipperModulePropsParametersLogzioMessagesArray(obj.logzioMessagesArray),
    'KinesisStreamBatchSize': toJson_CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize(obj.kinesisStreamBatchSize),
    'LogzioURL': toJson_CfnKinesisShipperModulePropsParametersLogzioUrl(obj.logzioUrl),
    'KinesisStreamStartingPosition': toJson_CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition(obj.kinesisStreamStartingPosition),
    'LogzioTYPE': toJson_CfnKinesisShipperModulePropsParametersLogzioType(obj.logzioType),
    'KinesisStream': toJson_CfnKinesisShipperModulePropsParametersKinesisStream(obj.kinesisStream),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnKinesisShipperModulePropsResources
 */
export interface CfnKinesisShipperModulePropsResources {
  /**
   * @schema CfnKinesisShipperModulePropsResources#LogzioKinesisLambda
   */
  readonly logzioKinesisLambda?: CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda;

  /**
   * @schema CfnKinesisShipperModulePropsResources#LogzioKinesisLambdaRole
   */
  readonly logzioKinesisLambdaRole?: CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole;

  /**
   * @schema CfnKinesisShipperModulePropsResources#LogzioKinesisLambdaKinesisStream
   */
  readonly logzioKinesisLambdaKinesisStream?: CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsResources(obj: CfnKinesisShipperModulePropsResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LogzioKinesisLambda': toJson_CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda(obj.logzioKinesisLambda),
    'LogzioKinesisLambdaRole': toJson_CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole(obj.logzioKinesisLambdaRole),
    'LogzioKinesisLambdaKinesisStream': toJson_CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream(obj.logzioKinesisLambdaKinesisStream),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The token of the account you want to ship to. Can be found at https://app.logz.io/#/dashboard/settings/general
 *
 * @schema CfnKinesisShipperModulePropsParametersLogzioToken
 */
export interface CfnKinesisShipperModulePropsParametersLogzioToken {
  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioToken#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioToken#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersLogzioToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersLogzioToken(obj: CfnKinesisShipperModulePropsParametersLogzioToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * json or text. If json, the lambda function will attempt to parse the message field as JSON and populate the event data with the parsed fields.
 *
 * @schema CfnKinesisShipperModulePropsParametersLogzioFormat
 */
export interface CfnKinesisShipperModulePropsParametersLogzioFormat {
  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioFormat#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioFormat#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersLogzioFormat' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersLogzioFormat(obj: CfnKinesisShipperModulePropsParametersLogzioFormat | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Two-letter region code, or blank for US East (Northern Virginia). This determines your listener URL (where you're shipping the logs to) and API URL. You can find your region code in the Regions and URLs at https://docs.logz.io/user-guide/accounts/account-region.html#regions-and-urls table
 *
 * @schema CfnKinesisShipperModulePropsParametersLogzioRegion
 */
export interface CfnKinesisShipperModulePropsParametersLogzioRegion {
  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioRegion#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioRegion#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersLogzioRegion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersLogzioRegion(obj: CfnKinesisShipperModulePropsParametersLogzioRegion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If true, the Lambda will send compressed logs. If false, the Lambda will send uncompressed logs.
 *
 * @schema CfnKinesisShipperModulePropsParametersLogzioCompress
 */
export interface CfnKinesisShipperModulePropsParametersLogzioCompress {
  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioCompress#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioCompress#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersLogzioCompress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersLogzioCompress(obj: CfnKinesisShipperModulePropsParametersLogzioCompress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set this ENV variable to split the a record into multiple logs based on a field containing an array of messages. For more information see https://github.com/logzio/logzio_aws_serverless/blob/master/python3/kinesis/parse-json-array.md. Note: This option would work only if you set FORMAT to json.
 *
 * @schema CfnKinesisShipperModulePropsParametersLogzioMessagesArray
 */
export interface CfnKinesisShipperModulePropsParametersLogzioMessagesArray {
  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioMessagesArray#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioMessagesArray#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersLogzioMessagesArray' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersLogzioMessagesArray(obj: CfnKinesisShipperModulePropsParametersLogzioMessagesArray | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The largest number of records that will be read from your stream at once.
 *
 * @schema CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize
 */
export interface CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize {
  /**
   * @schema CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize(obj: CfnKinesisShipperModulePropsParametersKinesisStreamBatchSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Deprecated. Use LogzioREGION instead
 *
 * @schema CfnKinesisShipperModulePropsParametersLogzioUrl
 */
export interface CfnKinesisShipperModulePropsParametersLogzioUrl {
  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioUrl#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioUrl#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersLogzioUrl' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersLogzioUrl(obj: CfnKinesisShipperModulePropsParametersLogzioUrl | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The position in the stream to start reading from. For more information, see ShardIteratorType in the Amazon Kinesis API Reference.
 *
 * @schema CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition
 */
export interface CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition {
  /**
   * @schema CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition(obj: CfnKinesisShipperModulePropsParametersKinesisStreamStartingPosition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The log type you'll use with this Lambda. Please note that you should create a new Lambda for each log type you use. This can be a built-in log type, or your custom log type
 *
 * @schema CfnKinesisShipperModulePropsParametersLogzioType
 */
export interface CfnKinesisShipperModulePropsParametersLogzioType {
  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioType#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersLogzioType#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersLogzioType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersLogzioType(obj: CfnKinesisShipperModulePropsParametersLogzioType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Enter a Kinesis stream to listen for updates on.
 *
 * @schema CfnKinesisShipperModulePropsParametersKinesisStream
 */
export interface CfnKinesisShipperModulePropsParametersKinesisStream {
  /**
   * @schema CfnKinesisShipperModulePropsParametersKinesisStream#Type
   */
  readonly type: string;

  /**
   * @schema CfnKinesisShipperModulePropsParametersKinesisStream#Description
   */
  readonly description: string;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsParametersKinesisStream' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsParametersKinesisStream(obj: CfnKinesisShipperModulePropsParametersKinesisStream | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda
 */
export interface CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda {
  /**
   * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda#Type
   */
  readonly type?: string;

  /**
   * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda(obj: CfnKinesisShipperModulePropsResourcesLogzioKinesisLambda | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole
 */
export interface CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole {
  /**
   * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole#Type
   */
  readonly type?: string;

  /**
   * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole(obj: CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream
 */
export interface CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream {
  /**
   * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream#Type
   */
  readonly type?: string;

  /**
   * @schema CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream#Properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream(obj: CfnKinesisShipperModulePropsResourcesLogzioKinesisLambdaKinesisStream | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `Logzio::KinesisShipper::KinesisShipper::MODULE`
 *
 * @cloudformationResource Logzio::KinesisShipper::KinesisShipper::MODULE
 * @stability external
 * @link http://unknown-url
 */
export class CfnKinesisShipperModule extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Logzio::KinesisShipper::KinesisShipper::MODULE";

  /**
   * Resource props.
   */
  public readonly props: CfnKinesisShipperModuleProps;


  /**
   * Create a new `Logzio::KinesisShipper::KinesisShipper::MODULE`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnKinesisShipperModuleProps) {
    super(scope, id, { type: CfnKinesisShipperModule.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnKinesisShipperModuleProps(props)! });

    this.props = props;

  }
}