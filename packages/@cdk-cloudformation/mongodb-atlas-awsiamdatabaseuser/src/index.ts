// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * CRUD for AWS IAM MongoDB users in a project for your clusters/databases.
 *
 * @schema CfnAwsIamDatabaseUserProps
 */
export interface CfnAwsIamDatabaseUserProps {
  /**
   * The AWS IAM user or role ARN used as the database username.
   *
   * @schema CfnAwsIamDatabaseUserProps#AwsIamResource
   */
  readonly awsIamResource: string;

  /**
   * @schema CfnAwsIamDatabaseUserProps#ApiKeys
   */
  readonly apiKeys: ApiKeyDefinition;

  /**
   * Unique identifier of the Atlas project to which the user belongs.
   *
   * @schema CfnAwsIamDatabaseUserProps#ProjectId
   */
  readonly projectId: string;

  /**
   * @schema CfnAwsIamDatabaseUserProps#DatabaseAccess
   */
  readonly databaseAccess: any;

  /**
   * @schema CfnAwsIamDatabaseUserProps#Scopes
   */
  readonly scopes?: any;

}

/**
 * Converts an object of type 'CfnAwsIamDatabaseUserProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnAwsIamDatabaseUserProps(obj: CfnAwsIamDatabaseUserProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AwsIamResource': obj.awsIamResource,
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'ProjectId': obj.projectId,
    'DatabaseAccess': obj.databaseAccess,
    'Scopes': obj.scopes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `MongoDb::Atlas::AwsIamDatabaseUser`
 *
 * @cloudformationResource MongoDb::Atlas::AwsIamDatabaseUser
 * @stability external
 * @link https://github.com/compose-x/aws-cfn-mongodb-atlas-awsiamdatabaseuser
 */
export class CfnAwsIamDatabaseUser extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDb::Atlas::AwsIamDatabaseUser";

  /**
   * Resource props.
   */
  public readonly props: CfnAwsIamDatabaseUserProps;

  /**
   * Attribute `MongoDb::Atlas::AwsIamDatabaseUser.MongoDbUsername`
   * @link https://github.com/compose-x/aws-cfn-mongodb-atlas-awsiamdatabaseuser
   */
  public readonly attrMongoDbUsername: string;

  /**
   * Create a new `MongoDb::Atlas::AwsIamDatabaseUser`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnAwsIamDatabaseUserProps) {
    super(scope, id, { type: CfnAwsIamDatabaseUser.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnAwsIamDatabaseUserProps(props)! });

    this.props = props;

    this.attrMongoDbUsername = cdk.Token.asString(this.getAtt('MongoDbUsername'));
  }
}