// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Returns, adds, edits, and removes custom database user privilege roles.
 *
 * @schema CfnCustomDbRoleProps
 */
export interface CfnCustomDbRoleProps {
  /**
   * Unique 24-hexadecimal digit string that identifies your project.
   *
   * @schema CfnCustomDbRoleProps#GroupId
   */
  readonly groupId?: string;

  /**
   * List of the individual privilege actions that the role grants.
   *
   * @schema CfnCustomDbRoleProps#Actions
   */
  readonly actions?: Action[];

  /**
   * List of the built-in roles that this custom role inherits.
   *
   * @schema CfnCustomDbRoleProps#InheritedRoles
   */
  readonly inheritedRoles?: InheritedRole[];

  /**
   * Human-readable label that identifies the role for the request. This name must be unique for this custom role in this project.
   *
   * @schema CfnCustomDbRoleProps#RoleName
   */
  readonly roleName: string;

  /**
   * @schema CfnCustomDbRoleProps#ApiKeys
   */
  readonly apiKeys?: ApiKey;

}

/**
 * Converts an object of type 'CfnCustomDbRoleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCustomDbRoleProps(obj: CfnCustomDbRoleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'Actions': obj.actions?.map(y => toJson_Action(y)),
    'InheritedRoles': obj.inheritedRoles?.map(y => toJson_InheritedRole(y)),
    'RoleName': obj.roleName,
    'ApiKeys': toJson_ApiKey(obj.apiKeys),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Action
 */
export interface Action {
  /**
   * Human-readable label that identifies the privilege action.
   *
   * @schema Action#Action
   */
  readonly action?: string;

  /**
   * List of resources on which you grant the action.
   *
   * @schema Action#Resources
   */
  readonly resources?: Resource[];

}

/**
 * Converts an object of type 'Action' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Action(obj: Action | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Action': obj.action,
    'Resources': obj.resources?.map(y => toJson_Resource(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InheritedRole
 */
export interface InheritedRole {
  /**
   * @schema InheritedRole#Db
   */
  readonly db?: string;

  /**
   * @schema InheritedRole#Role
   */
  readonly role?: string;

}

/**
 * Converts an object of type 'InheritedRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InheritedRole(obj: InheritedRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Db': obj.db,
    'Role': obj.role,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApiKey
 */
export interface ApiKey {
  /**
   * @schema ApiKey#PublicKey
   */
  readonly publicKey?: string;

  /**
   * @schema ApiKey#PrivateKey
   */
  readonly privateKey?: string;

}

/**
 * Converts an object of type 'ApiKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKey(obj: ApiKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PublicKey': obj.publicKey,
    'PrivateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * List of resources on which you grant the action.
 *
 * @schema Resource
 */
export interface Resource {
  /**
   * Human-readable label that identifies the collection on which you grant the action to one MongoDB user. If you don't set this parameter, you grant the action to all collections in the database specified in the actions.resources.db parameter. If you set "actions.resources.cluster" : true, MongoDB Cloud ignores this parameter.
   *
   * @schema Resource#Collection
   */
  readonly collection?: string;

  /**
   * Human-readable label that identifies the database on which you grant the action to one MongoDB user. If you set "actions.resources.cluster" : true, MongoDB Cloud ignores this parameter.
   *
   * @schema Resource#DB
   */
  readonly db?: string;

  /**
   * Flag that indicates whether to grant the action on the cluster resource. If true, MongoDB Cloud ignores the actions.resources.collection and actions.resources.db parameters.
   *
   * @schema Resource#Cluster
   */
  readonly cluster?: boolean;

}

/**
 * Converts an object of type 'Resource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Resource(obj: Resource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Collection': obj.collection,
    'DB': obj.db,
    'Cluster': obj.cluster,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `MongoDB::Atlas::CustomDBRole`
 *
 * @cloudformationResource MongoDB::Atlas::CustomDBRole
 * @stability external
 * @link http://unknown-url
 */
export class CfnCustomDbRole extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDB::Atlas::CustomDBRole";

  /**
   * Resource props.
   */
  public readonly props: CfnCustomDbRoleProps;


  /**
   * Create a new `MongoDB::Atlas::CustomDBRole`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnCustomDbRoleProps) {
    super(scope, id, { type: CfnCustomDbRole.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnCustomDbRoleProps(props)! });

    this.props = props;

  }
}