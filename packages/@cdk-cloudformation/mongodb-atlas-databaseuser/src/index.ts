// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Returns, adds, edits, and removes database users.
 *
 * @schema CfnDatabaseUserProps
 */
export interface CfnDatabaseUserProps {
  /**
   * Date and time when MongoDB Cloud deletes the user. This parameter expresses its value in the ISO 8601 timestamp format in UTC and can include the time zone designation. You must specify a future date that falls within one week of making the Application Programming Interface (API) request.
   *
   * @schema CfnDatabaseUserProps#DeleteAfterDate
   */
  readonly deleteAfterDate?: string;

  /**
   * Human-readable label that indicates whether the new database user authenticates with the Amazon Web Services (AWS) Identity and Access Management (IAM) credentials associated with the user or the user's role.
   *
   * @schema CfnDatabaseUserProps#AWSIAMType
   */
  readonly awsiamType?: CfnDatabaseUserPropsAwsiamType;

  /**
   * @schema CfnDatabaseUserProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * MongoDB database against which the MongoDB database user authenticates. MongoDB database users must provide both a username and authentication database to log into MongoDB.
   *
   * @schema CfnDatabaseUserProps#DatabaseName
   */
  readonly databaseName: string;

  /**
   * List that contains the key-value pairs for tagging and categorizing the MongoDB database user. The labels that you define do not appear in the console.
   *
   * @schema CfnDatabaseUserProps#Labels
   */
  readonly labels?: LabelDefinition[];

  /**
   * Method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE.
   *
   * @schema CfnDatabaseUserProps#LdapAuthType
   */
  readonly ldapAuthType?: CfnDatabaseUserPropsLdapAuthType;

  /**
   * Method that briefs who owns the certificate provided. If no value is given while using X509Type, Atlas uses the default value of MANAGED.
   *
   * @schema CfnDatabaseUserProps#X509Type
   */
  readonly x509Type?: CfnDatabaseUserPropsX509Type;

  /**
   * The userâ€™s password. This field is not included in the entity returned from the server.
   *
   * @schema CfnDatabaseUserProps#Password
   */
  readonly password?: string;

  /**
   * Unique identifier of the Atlas project to which the user belongs.
   *
   * @schema CfnDatabaseUserProps#ProjectId
   */
  readonly projectId: string;

  /**
   * List that provides the pairings of one role with one applicable database.
   *
   * @schema CfnDatabaseUserProps#Roles
   */
  readonly roles: RoleDefinition[];

  /**
   * List that contains clusters and MongoDB Atlas Data Lakes that this database user can access. If omitted, MongoDB Cloud grants the database user access to all the clusters and MongoDB Atlas Data Lakes in the project.
   *
   * @schema CfnDatabaseUserProps#Scopes
   */
  readonly scopes?: ScopeDefinition[];

  /**
   * Human-readable label that represents the user that authenticates to MongoDB.
   *
   * @schema CfnDatabaseUserProps#Username
   */
  readonly username: string;

}

/**
 * Converts an object of type 'CfnDatabaseUserProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnDatabaseUserProps(obj: CfnDatabaseUserProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeleteAfterDate': obj.deleteAfterDate,
    'AWSIAMType': obj.awsiamType,
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'DatabaseName': obj.databaseName,
    'Labels': obj.labels?.map(y => toJson_LabelDefinition(y)),
    'LdapAuthType': obj.ldapAuthType,
    'X509Type': obj.x509Type,
    'Password': obj.password,
    'ProjectId': obj.projectId,
    'Roles': obj.roles?.map(y => toJson_RoleDefinition(y)),
    'Scopes': obj.scopes?.map(y => toJson_ScopeDefinition(y)),
    'Username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Human-readable label that indicates whether the new database user authenticates with the Amazon Web Services (AWS) Identity and Access Management (IAM) credentials associated with the user or the user's role.
 *
 * @schema CfnDatabaseUserPropsAwsiamType
 */
export enum CfnDatabaseUserPropsAwsiamType {
  /** NONE */
  NONE = "NONE",
  /** USER */
  USER = "USER",
  /** ROLE */
  ROLE = "ROLE",
}

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema labelDefinition
 */
export interface LabelDefinition {
  /**
   * @schema labelDefinition#Key
   */
  readonly key?: string;

  /**
   * @schema labelDefinition#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'LabelDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LabelDefinition(obj: LabelDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE.
 *
 * @schema CfnDatabaseUserPropsLdapAuthType
 */
export enum CfnDatabaseUserPropsLdapAuthType {
  /** NONE */
  NONE = "NONE",
  /** USER */
  USER = "USER",
  /** GROUP */
  GROUP = "GROUP",
}

/**
 * Method that briefs who owns the certificate provided. If no value is given while using X509Type, Atlas uses the default value of MANAGED.
 *
 * @schema CfnDatabaseUserPropsX509Type
 */
export enum CfnDatabaseUserPropsX509Type {
  /** NONE */
  NONE = "NONE",
  /** MANAGED */
  MANAGED = "MANAGED",
  /** CUSTOMER */
  CUSTOMER = "CUSTOMER",
}

/**
 * @schema roleDefinition
 */
export interface RoleDefinition {
  /**
   * @schema roleDefinition#CollectionName
   */
  readonly collectionName?: string;

  /**
   * @schema roleDefinition#DatabaseName
   */
  readonly databaseName?: string;

  /**
   * @schema roleDefinition#RoleName
   */
  readonly roleName?: string;

}

/**
 * Converts an object of type 'RoleDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RoleDefinition(obj: RoleDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CollectionName': obj.collectionName,
    'DatabaseName': obj.databaseName,
    'RoleName': obj.roleName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema scopeDefinition
 */
export interface ScopeDefinition {
  /**
   * @schema scopeDefinition#Name
   */
  readonly name?: string;

  /**
   * @schema scopeDefinition#Type
   */
  readonly type?: ScopeDefinitionType;

}

/**
 * Converts an object of type 'ScopeDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinition(obj: ScopeDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ScopeDefinitionType
 */
export enum ScopeDefinitionType {
  /** CLUSTER */
  CLUSTER = "CLUSTER",
  /** DATA_LAKE */
  DATA_LAKE = "DATA_LAKE",
}


/**
 * A CloudFormation `MongoDB::Atlas::DatabaseUser`
 *
 * @cloudformationResource MongoDB::Atlas::DatabaseUser
 * @stability external
 * @link http://unknown-url
 */
export class CfnDatabaseUser extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDB::Atlas::DatabaseUser";

  /**
   * Resource props.
   */
  public readonly props: CfnDatabaseUserProps;

  /**
   * Attribute `MongoDB::Atlas::DatabaseUser.UserCFNIdentifier`
   * @link http://unknown-url
   */
  public readonly attrUserCFNIdentifier: string;

  /**
   * Create a new `MongoDB::Atlas::DatabaseUser`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnDatabaseUserProps) {
    super(scope, id, { type: CfnDatabaseUser.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnDatabaseUserProps(props)! });

    this.props = props;

    this.attrUserCFNIdentifier = cdk.Token.asString(this.getAtt('UserCFNIdentifier'));
  }
}