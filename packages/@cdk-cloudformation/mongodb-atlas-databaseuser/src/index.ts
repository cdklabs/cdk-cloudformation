// Generated by cdk-import
import * as cdk from '@aws-cdk/core';

/**
 * The databaseUsers resource lets you retrieve, create and modify the MongoDB users in your cluster. Each user has a set of roles that provide access to the project’s databases. A user’s roles apply to all the clusters in the project: if two clusters have a products database and a user has a role granting read access on the products database, the user has that access on both clusters.
 *
 * @schema CfnDatabaseuserProps
 */
export interface CfnDatabaseuserProps {
  /**
   * If this value is set, the new database user authenticates with AWS IAM credentials.
   *
   * @schema CfnDatabaseuserProps#AWSIAMType
   */
  readonly awsiamType?: CfnDatabaseuserPropsAwsiamType;

  /**
   * @schema CfnDatabaseuserProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
   *
   * @schema CfnDatabaseuserProps#DatabaseName
   */
  readonly databaseName: string;

  /**
   * Array containing key-value pairs that tag and categorize the database user.
   *
   * @schema CfnDatabaseuserProps#Labels
   */
  readonly labels?: LabelDefinition[];

  /**
   * Method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE.
   *
   * @schema CfnDatabaseuserProps#LdapAuthType
   */
  readonly ldapAuthType?: CfnDatabaseuserPropsLdapAuthType;

  /**
   * The user’s password. This field is not included in the entity returned from the server.
   *
   * @schema CfnDatabaseuserProps#Password
   */
  readonly password?: string;

  /**
   * Unique identifier of the Atlas project to which the user belongs.
   *
   * @schema CfnDatabaseuserProps#ProjectId
   */
  readonly projectId: string;

  /**
   * Array of this user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well.
   *
   * @schema CfnDatabaseuserProps#Roles
   */
  readonly roles: RoleDefinition[];

  /**
   * Array of clusters and Atlas Data Lakes that this user has access to. If omitted, Atlas grants the user access to all the clusters and Atlas Data Lakes in the project by default.
   *
   * @schema CfnDatabaseuserProps#Scopes
   */
  readonly scopes?: ScopeDefinition[];

  /**
   * Username for authenticating to MongoDB.
   *
   * @schema CfnDatabaseuserProps#Username
   */
  readonly username: string;

}

/**
 * Converts an object of type 'CfnDatabaseuserProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnDatabaseuserProps(obj: CfnDatabaseuserProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AWSIAMType': obj.awsiamType,
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'DatabaseName': obj.databaseName,
    'Labels': obj.labels?.map(y => toJson_LabelDefinition(y)),
    'LdapAuthType': obj.ldapAuthType,
    'Password': obj.password,
    'ProjectId': obj.projectId,
    'Roles': obj.roles?.map(y => toJson_RoleDefinition(y)),
    'Scopes': obj.scopes?.map(y => toJson_ScopeDefinition(y)),
    'Username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If this value is set, the new database user authenticates with AWS IAM credentials.
 *
 * @schema CfnDatabaseuserPropsAwsiamType
 */
export enum CfnDatabaseuserPropsAwsiamType {
  /** NONE */
  NONE = 'NONE',
  /** USER */
  USER = 'USER',
  /** ROLE */
  ROLE = 'ROLE',
}

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema labelDefinition
 */
export interface LabelDefinition {
  /**
   * @schema labelDefinition#Key
   */
  readonly key?: string;

  /**
   * @schema labelDefinition#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'LabelDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LabelDefinition(obj: LabelDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE.
 *
 * @schema CfnDatabaseuserPropsLdapAuthType
 */
export enum CfnDatabaseuserPropsLdapAuthType {
  /** NONE */
  NONE = 'NONE',
  /** USER */
  USER = 'USER',
  /** GROUP */
  GROUP = 'GROUP',
}

/**
 * @schema roleDefinition
 */
export interface RoleDefinition {
  /**
   * @schema roleDefinition#CollectionName
   */
  readonly collectionName?: string;

  /**
   * @schema roleDefinition#DatabaseName
   */
  readonly databaseName?: string;

  /**
   * @schema roleDefinition#RoleName
   */
  readonly roleName?: string;

}

/**
 * Converts an object of type 'RoleDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RoleDefinition(obj: RoleDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CollectionName': obj.collectionName,
    'DatabaseName': obj.databaseName,
    'RoleName': obj.roleName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema scopeDefinition
 */
export interface ScopeDefinition {
  /**
   * @schema scopeDefinition#Name
   */
  readonly name?: string;

  /**
   * @schema scopeDefinition#Type
   */
  readonly type?: ScopeDefinitionType;

}

/**
 * Converts an object of type 'ScopeDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinition(obj: ScopeDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ScopeDefinitionType
 */
export enum ScopeDefinitionType {
  /** CLUSTER */
  CLUSTER = 'CLUSTER',
  /** DATA_LAKE */
  DATA_LAKE = 'DATA_LAKE',
}


/**
 * A CloudFormation `MongoDB::Atlas::DatabaseUser`
 *
 * @cloudformationResource MongoDB::Atlas::DatabaseUser
 * @stability external
 * @link http://unknown-url
 */
export class CfnDatabaseuser extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDB::Atlas::DatabaseUser";

  /**
   * `MongoDB::Atlas::DatabaseUser.AWSIAMType`
   * If this value is set, the new database user authenticates with AWS IAM credentials.
   * @link http://unknown-url
   */
  public readonly aWSIAMType: string | undefined;
  /**
   * `MongoDB::Atlas::DatabaseUser.ApiKeys`
   * @link http://unknown-url
   */
  public readonly apiKeys: apiKeyDefinition | undefined;
  /**
   * `MongoDB::Atlas::DatabaseUser.DatabaseName`
   * The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
   * @link http://unknown-url
   */
  public readonly databaseName: string;
  /**
   * `MongoDB::Atlas::DatabaseUser.Labels`
   * Array containing key-value pairs that tag and categorize the database user.
   * @link http://unknown-url
   */
  public readonly labels: labelDefinition[] | undefined;
  /**
   * `MongoDB::Atlas::DatabaseUser.LdapAuthType`
   * Method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE.
   * @link http://unknown-url
   */
  public readonly ldapAuthType: string | undefined;
  /**
   * `MongoDB::Atlas::DatabaseUser.Password`
   * The user’s password. This field is not included in the entity returned from the server.
   * @link http://unknown-url
   */
  public readonly password: string | undefined;
  /**
   * `MongoDB::Atlas::DatabaseUser.ProjectId`
   * Unique identifier of the Atlas project to which the user belongs.
   * @link http://unknown-url
   */
  public readonly projectId: string;
  /**
   * `MongoDB::Atlas::DatabaseUser.Roles`
   * Array of this user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well.
   * @link http://unknown-url
   */
  public readonly roles: roleDefinition[];
  /**
   * `MongoDB::Atlas::DatabaseUser.Scopes`
   * Array of clusters and Atlas Data Lakes that this user has access to. If omitted, Atlas grants the user access to all the clusters and Atlas Data Lakes in the project by default.
   * @link http://unknown-url
   */
  public readonly scopes: scopeDefinition[] | undefined;
  /**
   * `MongoDB::Atlas::DatabaseUser.Username`
   * Username for authenticating to MongoDB.
   * @link http://unknown-url
   */
  public readonly username: string;
  /**
   * Attribute `MongoDB::Atlas::DatabaseUser.UserCFNIdentifier`
   * @link http://unknown-url
   */
  public readonly attrUserCFNIdentifier: string;

  /**
   * Create a new `MongoDB::Atlas::DatabaseUser`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: cdk.Construct, id: string, props: CfnDatabaseuserProps) {
    super(scope, id, { type: CfnDatabaseuser.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnDatabaseuserProps(props)! });

    this.aWSIAMType = props.aWSIAMType;
    this.apiKeys = props.apiKeys;
    this.databaseName = props.databaseName;
    this.labels = props.labels;
    this.ldapAuthType = props.ldapAuthType;
    this.password = props.password;
    this.projectId = props.projectId;
    this.roles = props.roles;
    this.scopes = props.scopes;
    this.username = props.username;
    this.attrUserCFNIdentifier = cdk.Token.asString(this.getAtt('UserCFNIdentifier'));
  }
}