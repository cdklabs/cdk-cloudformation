// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Retrieves or creates projects in any given Atlas organization.
 *
 * @schema CfnProjectProps
 */
export interface CfnProjectProps {
  /**
   * Name of the project to create.
   *
   * @schema CfnProjectProps#Name
   */
  readonly name: string;

  /**
   * Unique identifier of the organization within which to create the project.
   *
   * @schema CfnProjectProps#OrgId
   */
  readonly orgId: string;

  /**
   * Unique identifier of the organization within which to create the project.
   *
   * @schema CfnProjectProps#ProjectOwnerId
   */
  readonly projectOwnerId?: string;

  /**
   * Unique identifier of the organization within which to create the project.
   *
   * @schema CfnProjectProps#WithDefaultAlertsSettings
   */
  readonly withDefaultAlertsSettings?: boolean;

  /**
   * @schema CfnProjectProps#ProjectSettings
   */
  readonly projectSettings?: ProjectSettings;

  /**
   * @schema CfnProjectProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * @schema CfnProjectProps#ProjectTeams
   */
  readonly projectTeams?: ProjectTeam[];

  /**
   * @schema CfnProjectProps#ProjectApiKeys
   */
  readonly projectApiKeys?: ProjectApiKey[];

}

/**
 * Converts an object of type 'CfnProjectProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnProjectProps(obj: CfnProjectProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'OrgId': obj.orgId,
    'ProjectOwnerId': obj.projectOwnerId,
    'WithDefaultAlertsSettings': obj.withDefaultAlertsSettings,
    'ProjectSettings': toJson_ProjectSettings(obj.projectSettings),
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'ProjectTeams': obj.projectTeams?.map(y => toJson_ProjectTeam(y)),
    'ProjectApiKeys': obj.projectApiKeys?.map(y => toJson_ProjectApiKey(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema projectSettings
 */
export interface ProjectSettings {
  /**
   * @schema projectSettings#IsCollectDatabaseSpecificsStatisticsEnabled
   */
  readonly isCollectDatabaseSpecificsStatisticsEnabled?: boolean;

  /**
   * @schema projectSettings#IsDataExplorerEnabled
   */
  readonly isDataExplorerEnabled?: boolean;

  /**
   * @schema projectSettings#IsPerformanceAdvisorEnabled
   */
  readonly isPerformanceAdvisorEnabled?: boolean;

  /**
   * @schema projectSettings#IsRealtimePerformancePanelEnabled
   */
  readonly isRealtimePerformancePanelEnabled?: boolean;

  /**
   * @schema projectSettings#IsSchemaAdvisorEnabled
   */
  readonly isSchemaAdvisorEnabled?: boolean;

}

/**
 * Converts an object of type 'ProjectSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectSettings(obj: ProjectSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IsCollectDatabaseSpecificsStatisticsEnabled': obj.isCollectDatabaseSpecificsStatisticsEnabled,
    'IsDataExplorerEnabled': obj.isDataExplorerEnabled,
    'IsPerformanceAdvisorEnabled': obj.isPerformanceAdvisorEnabled,
    'IsRealtimePerformancePanelEnabled': obj.isRealtimePerformancePanelEnabled,
    'IsSchemaAdvisorEnabled': obj.isSchemaAdvisorEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PublicKey': obj.publicKey,
    'PrivateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema projectTeam
 */
export interface ProjectTeam {
  /**
   * @schema projectTeam#TeamId
   */
  readonly teamId?: string;

  /**
   * @schema projectTeam#RoleNames
   */
  readonly roleNames?: string[];

}

/**
 * Converts an object of type 'ProjectTeam' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectTeam(obj: ProjectTeam | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TeamId': obj.teamId,
    'RoleNames': obj.roleNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema projectApiKey
 */
export interface ProjectApiKey {
  /**
   * @schema projectApiKey#Key
   */
  readonly key?: string;

  /**
   * @schema projectApiKey#RoleNames
   */
  readonly roleNames?: string[];

}

/**
 * Converts an object of type 'ProjectApiKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectApiKey(obj: ProjectApiKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'RoleNames': obj.roleNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `MongoDB::Atlas::Project`
 *
 * @cloudformationResource MongoDB::Atlas::Project
 * @stability external
 * @link http://unknown-url
 */
export class CfnProject extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDB::Atlas::Project";

  /**
   * Resource props.
   */
  public readonly props: CfnProjectProps;

  /**
   * Attribute `MongoDB::Atlas::Project.Id`
   * @link http://unknown-url
   */
  public readonly attrId: string;
  /**
   * Attribute `MongoDB::Atlas::Project.Created`
   * @link http://unknown-url
   */
  public readonly attrCreated: string;
  /**
   * Attribute `MongoDB::Atlas::Project.ClusterCount`
   * @link http://unknown-url
   */
  public readonly attrClusterCount: number;

  /**
   * Create a new `MongoDB::Atlas::Project`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnProjectProps) {
    super(scope, id, { type: CfnProject.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnProjectProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrCreated = cdk.Token.asString(this.getAtt('Created'));
    this.attrClusterCount = cdk.Token.asNumber(this.getAtt('ClusterCount'));
  }
}