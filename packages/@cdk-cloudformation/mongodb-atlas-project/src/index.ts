// Generated by cdk-import
import * as cdk from '@aws-cdk/core';

/**
 * Retrieves or creates projects in any given Atlas organization.
 *
 * @schema CfnProjectProps
 */
export interface CfnProjectProps {
  /**
   * Name of the project to create.
   *
   * @schema CfnProjectProps#Name
   */
  readonly name: string;

  /**
   * Unique identifier of the organization within which to create the project.
   *
   * @schema CfnProjectProps#OrgId
   */
  readonly orgId: string;

  /**
   * The number of Atlas clusters deployed in the project.
   *
   * @schema CfnProjectProps#ClusterCount
   */
  readonly clusterCount?: number;

  /**
   * @schema CfnProjectProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

}

/**
 * Converts an object of type 'CfnProjectProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnProjectProps(obj: CfnProjectProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'OrgId': obj.orgId,
    'ClusterCount': obj.clusterCount,
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PublicKey': obj.publicKey,
    'PrivateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `MongoDB::Atlas::Project`
 *
 * @cloudformationResource MongoDB::Atlas::Project
 * @stability external
 * @link http://unknown-url
 */
export class CfnProject extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDB::Atlas::Project";

  /**
   * `MongoDB::Atlas::Project.Name`
   * Name of the project to create.
   * @link http://unknown-url
   */
  public readonly name: string;
  /**
   * `MongoDB::Atlas::Project.OrgId`
   * Unique identifier of the organization within which to create the project.
   * @link http://unknown-url
   */
  public readonly orgId: string;
  /**
   * `MongoDB::Atlas::Project.ApiKeys`
   * @link http://unknown-url
   */
  public readonly apiKeys: apiKeyDefinition | undefined;
  /**
   * Attribute `MongoDB::Atlas::Project.Id`
   * @link http://unknown-url
   */
  public readonly attrId: string;
  /**
   * Attribute `MongoDB::Atlas::Project.Created`
   * @link http://unknown-url
   */
  public readonly attrCreated: string;

  /**
   * Create a new `MongoDB::Atlas::Project`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: cdk.Construct, id: string, props: CfnProjectProps) {
    super(scope, id, { type: CfnProject.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnProjectProps(props)! });

    this.name = props.name;
    this.orgId = props.orgId;
    this.apiKeys = props.apiKeys;
    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrCreated = cdk.Token.asString(this.getAtt('Created'));
  }
}