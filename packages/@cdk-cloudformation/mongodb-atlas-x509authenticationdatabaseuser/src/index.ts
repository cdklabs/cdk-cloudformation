// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Generates one X.509 certificate for the specified MongoDB user. Atlas manages the certificate and MongoDB user that belong to one project. To use this resource, the requesting API Key must have the Project Atlas Admin role. This resource doesn't require the API Key to have an Access List.
 *
 * To get MongoDB Cloud to generate a managed certificate for a database user, set `"x509Type" : "MANAGED"` on the desired MongoDB Database User.
 *
 * If you are managing your own Certificate Authority (CA) in Self-Managed X.509 mode, you must generate certificates for database users using your own CA.
 *
 * @schema CfnX509AuthenticationDatabaseUserProps
 */
export interface CfnX509AuthenticationDatabaseUserProps {
  /**
   * @schema CfnX509AuthenticationDatabaseUserProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * One or more links to sub-resources and/or related resources.
   *
   * @schema CfnX509AuthenticationDatabaseUserProps#Links
   */
  readonly links?: CfnX509AuthenticationDatabaseUserPropsLinks[];

  /**
   * CustomerX509 represents Customer-managed X.509 configuration for an Atlas project.
   *
   * @schema CfnX509AuthenticationDatabaseUserProps#CustomerX509
   */
  readonly customerX509?: CustomerX509;

  /**
   * Username of the database user to create a certificate for.
   *
   * @schema CfnX509AuthenticationDatabaseUserProps#UserName
   */
  readonly userName?: string;

  /**
   * The unique identifier for the project .
   *
   * @schema CfnX509AuthenticationDatabaseUserProps#ProjectId
   */
  readonly projectId?: string;

  /**
   * List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
   *
   * @schema CfnX509AuthenticationDatabaseUserProps#Results
   */
  readonly results?: Certificate[];

}

/**
 * Converts an object of type 'CfnX509AuthenticationDatabaseUserProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnX509AuthenticationDatabaseUserProps(obj: CfnX509AuthenticationDatabaseUserProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'Links': obj.links?.map(y => toJson_CfnX509AuthenticationDatabaseUserPropsLinks(y)),
    'CustomerX509': toJson_CustomerX509(obj.customerX509),
    'UserName': obj.userName,
    'ProjectId': obj.projectId,
    'Results': obj.results?.map(y => toJson_Certificate(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnX509AuthenticationDatabaseUserPropsLinks
 */
export interface CfnX509AuthenticationDatabaseUserPropsLinks {
  /**
   * @schema CfnX509AuthenticationDatabaseUserPropsLinks#Rel
   */
  readonly rel?: string;

  /**
   * @schema CfnX509AuthenticationDatabaseUserPropsLinks#Href
   */
  readonly href?: string;

}

/**
 * Converts an object of type 'CfnX509AuthenticationDatabaseUserPropsLinks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnX509AuthenticationDatabaseUserPropsLinks(obj: CfnX509AuthenticationDatabaseUserPropsLinks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Rel': obj.rel,
    'Href': obj.href,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema customerX509
 */
export interface CustomerX509 {
  /**
   * PEM string containing one or more customer CAs for database user authentication.
   *
   * @schema customerX509#Cas
   */
  readonly cas?: string;

}

/**
 * Converts an object of type 'CustomerX509' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CustomerX509(obj: CustomerX509 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cas': obj.cas,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Certificate
 */
export interface Certificate {
  /**
   * Username of the database user to create a certificate for.
   *
   * @schema Certificate#UserName
   */
  readonly userName?: string;

  /**
   * Timestamp in ISO 8601 date and time format in UTC when Atlas created this X.509 certificate.
   *
   * @schema Certificate#CreatedAt
   */
  readonly createdAt?: string;

  /**
   * A number of months that the created certificate is valid for before expiry, up to 24 months.default 3.
   *
   * @schema Certificate#MonthsUntilExpiration
   */
  readonly monthsUntilExpiration?: number;

  /**
   * Timestamp in ISO 8601 date and time format in UTC when this certificate expires.
   *
   * @schema Certificate#NotAfter
   */
  readonly notAfter?: string;

  /**
   * Fully distinguished name of the database user to which this certificate belongs. To learn more, see RFC 2253.
   *
   * @schema Certificate#Subject
   */
  readonly subject?: string;

  /**
   * Unique identifier of the Atlas project to which this certificate belongs.
   *
   * @schema Certificate#GroupId
   */
  readonly groupId?: string;

  /**
   * Serial number of this certificate.
   *
   * @schema Certificate#Id
   */
  readonly id?: string;

}

/**
 * Converts an object of type 'Certificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Certificate(obj: Certificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'UserName': obj.userName,
    'CreatedAt': obj.createdAt,
    'MonthsUntilExpiration': obj.monthsUntilExpiration,
    'NotAfter': obj.notAfter,
    'Subject': obj.subject,
    'GroupId': obj.groupId,
    'Id': obj.id,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `MongoDB::Atlas::X509AuthenticationDatabaseUser`
 *
 * @cloudformationResource MongoDB::Atlas::X509AuthenticationDatabaseUser
 * @stability external
 * @link https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
 */
export class CfnX509AuthenticationDatabaseUser extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDB::Atlas::X509AuthenticationDatabaseUser";

  /**
   * Resource props.
   */
  public readonly props: CfnX509AuthenticationDatabaseUserProps;

  /**
   * Attribute `MongoDB::Atlas::X509AuthenticationDatabaseUser.TotalCount`
   * @link https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
   */
  public readonly attrTotalCount: number;
  /**
   * Attribute `MongoDB::Atlas::X509AuthenticationDatabaseUser.MonthsUntilExpiration`
   * @link https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
   */
  public readonly attrMonthsUntilExpiration: number;

  /**
   * Create a new `MongoDB::Atlas::X509AuthenticationDatabaseUser`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnX509AuthenticationDatabaseUserProps) {
    super(scope, id, { type: CfnX509AuthenticationDatabaseUser.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnX509AuthenticationDatabaseUserProps(props)! });

    this.props = props;

    this.attrTotalCount = cdk.Token.asNumber(this.getAtt('TotalCount'));
    this.attrMonthsUntilExpiration = cdk.Token.asNumber(this.getAtt('MonthsUntilExpiration'));
  }
}