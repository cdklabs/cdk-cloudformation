// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A CIFS share is a shared folder tied to an FSx for ONTAP volume. It allows Windows and other SMB-compatible clients to access files on the volume over the network. CIFS shares can be managed with access controls and permissions to ensure secure and efficient file sharing across users and applications. Once activated, you will need a preview key to consume this resource. Please reach out to Ng-fsx-cloudformation@netapp.com to get the key. To use this resource, you would need to first create the Link module.
 *
 * @schema CfnCifsShareProps
 */
export interface CfnCifsShareProps {
  /**
   * The password source for the FSx admin user.
   *
   * @schema CfnCifsShareProps#FsxAdminPasswordSource
   */
  readonly fsxAdminPasswordSource: PasswordSource;

  /**
   * The file system ID of the Amazon FSx for NetApp ONTAP file system in which the resource is created.
   *
   * @schema CfnCifsShareProps#FileSystemId
   */
  readonly fileSystemId: string;

  /**
   * The ARN of the AWS Lambda function that will be invoked to manage the resource.
   *
   * @schema CfnCifsShareProps#LinkArn
   */
  readonly linkArn: string;

  /**
   * Name of the CIFS share.
   *
   * @schema CfnCifsShareProps#Name
   */
  readonly name: string;

  /**
   * Existing SVM in which to create the CIFS share.
   *
   * @schema CfnCifsShareProps#SVM
   */
  readonly svm: Svm;

  /**
   * Path in the host SVM namespace that is shared through this share.
   *
   * @schema CfnCifsShareProps#Path
   */
  readonly path: string;

  /**
   * Text comment about the CIFS share.
   *
   * @schema CfnCifsShareProps#Comment
   */
  readonly comment?: string;

  /**
   * Share permissions that users and groups have on the CIFS share.
   *
   * @schema CfnCifsShareProps#ACLs
   */
  readonly acLs?: CifsShareAcl[];
}

/**
 * Converts an object of type 'CfnCifsShareProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnCifsShareProps(obj: CfnCifsShareProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FsxAdminPasswordSource': toJson_PasswordSource(obj.fsxAdminPasswordSource),
    'FileSystemId': obj.fileSystemId,
    'LinkArn': obj.linkArn,
    'Name': obj.name,
    'SVM': toJson_Svm(obj.svm),
    'Path': obj.path,
    'Comment': obj.comment,
    'ACLs': obj.acLs?.map(y => toJson_CifsShareAcl(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema PasswordSource
 */
export interface PasswordSource {
  /**
   * A reference to the source of the password, typically an AWS Secrets Manager secret.
   *
   * @schema PasswordSource#Secret
   */
  readonly secret: SecretSource;
}

/**
 * Converts an object of type 'PasswordSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PasswordSource(obj: PasswordSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Secret': toJson_SecretSource(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema SVM
 */
export interface Svm {
  /**
   * The name of the SVM.
   *
   * @schema SVM#Name
   */
  readonly name?: string;

  /**
   * The UUID of the SVM.
   *
   * @schema SVM#UUID
   */
  readonly uuid?: string;
}

/**
 * Converts an object of type 'Svm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Svm(obj: Svm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'UUID': obj.uuid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema CifsShareAcl
 */
export interface CifsShareAcl {
  /**
   * Access rights that a user or group has on the defined CIFS Share.
   *
   * @schema CifsShareAcl#Permission
   */
  readonly permission: CifsShareAclPermission;

  /**
   * Type of the user or group to add to the access control list on the defined CIFS share.
   *
   * @schema CifsShareAcl#Type
   */
  readonly type: CifsShareAclType;

  /**
   * User or group name to add to the access control list on the defined CIFS share.
   *
   * @schema CifsShareAcl#UserOrGroup
   */
  readonly userOrGroup: string;
}

/**
 * Converts an object of type 'CifsShareAcl' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CifsShareAcl(obj: CifsShareAcl | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Permission': obj.permission,
    'Type': obj.type,
    'UserOrGroup': obj.userOrGroup,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema SecretSource
 */
export interface SecretSource {
  /**
   * The ARN of the secret stored in AWS Secrets Manager.
   *
   * @schema SecretSource#SecretArn
   */
  readonly secretArn: string;

  /**
   * Reference for the SecretKey. The actual password is stored in AWS Secret Manager.
   *
   * @schema SecretSource#SecretKey
   */
  readonly secretKey: string;
}

/**
 * Converts an object of type 'SecretSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_SecretSource(obj: SecretSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecretArn': obj.secretArn,
    'SecretKey': obj.secretKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Access rights that a user or group has on the defined CIFS Share.
 *
 * @schema CifsShareAclPermission
 */
export enum CifsShareAclPermission {
  /** no_access */
  NO_UNDERSCORE_ACCESS = "no_access",
  /** read */
  READ = "read",
  /** change */
  CHANGE = "change",
  /** full_control */
  FULL_UNDERSCORE_CONTROL = "full_control",
}

/**
 * Type of the user or group to add to the access control list on the defined CIFS share.
 *
 * @schema CifsShareAclType
 */
export enum CifsShareAclType {
  /** windows */
  WINDOWS = "windows",
  /** unix_user */
  UNIX_UNDERSCORE_USER = "unix_user",
  /** unix_group */
  UNIX_UNDERSCORE_GROUP = "unix_group",
}


/**
 * A CloudFormation `NetApp::FSxN::CifsShare`
 *
 * @cloudformationResource NetApp::FSxN::CifsShare
 * @stability external
 * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
 */
export class CfnCifsShare extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "NetApp::FSxN::CifsShare";

  /**
   * Resource props.
   */
  public readonly props: CfnCifsShareProps;

  /**
   * Attribute `NetApp::FSxN::CifsShare.ShareID`
   * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
   */
  public readonly attrShareID: string;

  /**
   * Create a new `NetApp::FSxN::CifsShare`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnCifsShareProps) {
    super(scope, id, { type: CfnCifsShare.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnCifsShareProps(props)! });

    this.props = props;

    this.attrShareID = cdk.Token.asString(this.getAtt('ShareID'));
  }
}