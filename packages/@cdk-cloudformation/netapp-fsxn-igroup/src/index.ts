// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * An iGroup is a collection of host initiators (IQNs) that are allowed access to a LUN. When LUNs are associated with iGroups, administrators gain control over which hosts can connect to and access each LUN, enabling secure and organized access management for applications and workloads consuming block storage. Once activated, you need a preview key to consume this resource. Please reach out to Ng-fsx-cloudformation@netapp.com to get the key. To use this resource, you must first create the Link module.
 *
 * @schema CfnIGroupProps
 */
export interface CfnIGroupProps {
  /**
   * The password source for the FSx admin user.
   *
   * @schema CfnIGroupProps#FsxAdminPasswordSource
   */
  readonly fsxAdminPasswordSource: PasswordSource;

  /**
   * The file system ID of the Amazon FSx for NetApp ONTAP file system in which the resource is created.
   *
   * @schema CfnIGroupProps#FileSystemId
   */
  readonly fileSystemId: string;

  /**
   * The ARN of the AWS Lambda function that will be invoked to manage the resource.
   *
   * @schema CfnIGroupProps#LinkArn
   */
  readonly linkArn: string;

  /**
   * The name of the initiator group.
   *
   * @schema CfnIGroupProps#Name
   */
  readonly name?: string;

  /**
   * The initiators that are attached to the initiator group.
   *
   * @schema CfnIGroupProps#Initiators
   */
  readonly initiators?: Initiator[];

  /**
   * The host operating system of the initiator group. All initiators in the group should be hosts of the same operating system.
   *
   * @schema CfnIGroupProps#OsType
   */
  readonly osType?: CfnIGroupPropsOsType;

  /**
   * The SVM information associated with the initiator group.
   *
   * @schema CfnIGroupProps#SVM
   */
  readonly svm?: Svm;

}

/**
 * Converts an object of type 'CfnIGroupProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnIGroupProps(obj: CfnIGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FsxAdminPasswordSource': toJson_PasswordSource(obj.fsxAdminPasswordSource),
    'FileSystemId': obj.fileSystemId,
    'LinkArn': obj.linkArn,
    'Name': obj.name,
    'Initiators': obj.initiators?.map(y => toJson_Initiator(y)),
    'OsType': obj.osType,
    'SVM': toJson_Svm(obj.svm),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema PasswordSource
 */
export interface PasswordSource {
  /**
   * A reference to the source of the password, typically an AWS Secrets Manager secret.
   *
   * @schema PasswordSource#Secret
   */
  readonly secret: SecretSource;

}

/**
 * Converts an object of type 'PasswordSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PasswordSource(obj: PasswordSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Secret': toJson_SecretSource(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema Initiator
 */
export interface Initiator {
  /**
   * The FC WWPN, iSCSI IQN, or iSCSI EUI that identifies the host initiator.
   *
   * @schema Initiator#Name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'Initiator' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Initiator(obj: Initiator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The host operating system of the initiator group. All initiators in the group should be hosts of the same operating system.
 *
 * @schema CfnIGroupPropsOsType
 */
export enum CfnIGroupPropsOsType {
  /** aix */
  AIX = "aix",
  /** hpux */
  HPUX = "hpux",
  /** hyper_v */
  HYPER_UNDERSCORE_V = "hyper_v",
  /** linux */
  LINUX = "linux",
  /** netware */
  NETWARE = "netware",
  /** openvms */
  OPENVMS = "openvms",
  /** solaris */
  SOLARIS = "solaris",
  /** solaris_efi */
  SOLARIS_UNDERSCORE_EFI = "solaris_efi",
  /** vmware */
  VMWARE = "vmware",
  /** windows */
  WINDOWS = "windows",
  /** windows_2008 */
  WINDOWS_UNDERSCORE_2008 = "windows_2008",
  /** windows_gpt */
  WINDOWS_UNDERSCORE_GPT = "windows_gpt",
  /** xen */
  XEN = "xen",
}

/**
 * @schema SVM
 */
export interface Svm {
  /**
   * The name of the SVM.
   *
   * @schema SVM#Name
   */
  readonly name?: string;

  /**
   * The UUID of the SVM.
   *
   * @schema SVM#UUID
   */
  readonly uuid?: string;

}

/**
 * Converts an object of type 'Svm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Svm(obj: Svm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'UUID': obj.uuid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema SecretSource
 */
export interface SecretSource {
  /**
   * The ARN of the secret stored in AWS Secrets Manager.
   *
   * @schema SecretSource#SecretArn
   */
  readonly secretArn: string;

  /**
   * Reference for the SecretKey. The actual password is stored in AWS Secret Manager.
   *
   * @schema SecretSource#SecretKey
   */
  readonly secretKey: string;

}

/**
 * Converts an object of type 'SecretSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_SecretSource(obj: SecretSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecretArn': obj.secretArn,
    'SecretKey': obj.secretKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * A CloudFormation `NetApp::FSxN::IGroup`
 *
 * @cloudformationResource NetApp::FSxN::IGroup
 * @stability external
 * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
 */
export class CfnIGroup extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "NetApp::FSxN::IGroup";

  /**
   * Resource props.
   */
  public readonly props: CfnIGroupProps;

  /**
   * Attribute `NetApp::FSxN::IGroup.UUID`
   * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
   */
  public readonly attrUuid: string;

  /**
   * Create a new `NetApp::FSxN::IGroup`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnIGroupProps) {
    super(scope, id, { type: CfnIGroup.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnIGroupProps(props)! });

    this.props = props;

    this.attrUuid = cdk.Token.asString(this.getAtt('UUID'));
  }
}