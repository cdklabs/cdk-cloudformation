// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A snapshot creates a read-only copy of a volume or LUN at a specific time. It allows users to restore files or volumes if data is deleted, corrupted, or changed. Snapshots efficiently store only the changes made after the snapshot, making them ideal for data protection and recovery. Once activated, you need a preview key to consume this resource. Please reach out to Ng-fsx-cloudformation@netapp.com to get the key. To use this resource, you must first create the Link module.
 *
 * @schema CfnSnapshotProps
 */
export interface CfnSnapshotProps {
  /**
   * The password source for the FSx admin user.
   *
   * @schema CfnSnapshotProps#FsxAdminPasswordSource
   */
  readonly fsxAdminPasswordSource: PasswordSource;

  /**
   * The file system ID of the Amazon FSx for NetApp ONTAP file system in which the resource is created.
   *
   * @schema CfnSnapshotProps#FileSystemId
   */
  readonly fileSystemId: string;

  /**
   * The ARN of the AWS Lambda function that will be invoked to manage the resource.
   *
   * @schema CfnSnapshotProps#LinkArn
   */
  readonly linkArn: string;

  /**
   * The reference to the volume associated with the snapshot.
   *
   * @schema CfnSnapshotProps#Volume
   */
  readonly volume: NameWithUuidRef;

  /**
   * The reference to the SVM associated with the snapshot.
   *
   * @schema CfnSnapshotProps#SVM
   */
  readonly svm: NameWithUuidRef;

  /**
   * The name of the snapshot copy to be created.
   *
   * @schema CfnSnapshotProps#Name
   */
  readonly name: string;

  /**
   * Label for SnapMirror operations.
   *
   * @schema CfnSnapshotProps#SnapmirrorLabel
   */
  readonly snapmirrorLabel?: string;

  /**
   * Comment associated with the snapshot copy.
   *
   * @schema CfnSnapshotProps#Comment
   */
  readonly comment?: string;

  /**
   * The expiry time for the snapshot copy, matching the date time format: YYYY-MM-DD hh:mm:ss (UTC).
   *
   * @schema CfnSnapshotProps#ExpiryTime
   */
  readonly expiryTime?: string;

  /**
   * SnapLock expiry time for the snapshot copy, if the snapshot copy is taken on a SnapLock volume. A snapshot copy is not allowed to be deleted or renamed until the SnapLock ComplianceClock time goes beyond this retention time. Will be matching date time format: YYYY-MM-DD hh:mm:ss (UTC).
   *
   * @schema CfnSnapshotProps#SnaplockExpiryTime
   */
  readonly snaplockExpiryTime?: string;

}

/**
 * Converts an object of type 'CfnSnapshotProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnSnapshotProps(obj: CfnSnapshotProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FsxAdminPasswordSource': toJson_PasswordSource(obj.fsxAdminPasswordSource),
    'FileSystemId': obj.fileSystemId,
    'LinkArn': obj.linkArn,
    'Volume': toJson_NameWithUuidRef(obj.volume),
    'SVM': toJson_NameWithUuidRef(obj.svm),
    'Name': obj.name,
    'SnapmirrorLabel': obj.snapmirrorLabel,
    'Comment': obj.comment,
    'ExpiryTime': obj.expiryTime,
    'SnaplockExpiryTime': obj.snaplockExpiryTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PasswordSource
 */
export interface PasswordSource {
  /**
   * A reference to the source of the password, typically an AWS Secrets Manager secret.
   *
   * @schema PasswordSource#Secret
   */
  readonly secret: SecretSource;

}

/**
 * Converts an object of type 'PasswordSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PasswordSource(obj: PasswordSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Secret': toJson_SecretSource(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NameWithUuidRef
 */
export interface NameWithUuidRef {
  /**
   * The name part of the reference, which can be used to identify resources such as SVM or volume.
   *
   * @schema NameWithUuidRef#Name
   */
  readonly name?: string;

  /**
   * The UUID part of the reference, which can be used to identify resources such as SVM or volume.
   *
   * @schema NameWithUuidRef#UUID
   */
  readonly uuid?: string;

}

/**
 * Converts an object of type 'NameWithUuidRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NameWithUuidRef(obj: NameWithUuidRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'UUID': obj.uuid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SecretSource
 */
export interface SecretSource {
  /**
   * The ARN of the secret stored in AWS Secrets Manager.
   *
   * @schema SecretSource#SecretArn
   */
  readonly secretArn: string;

  /**
   * Reference for the SecretKey. The actual password is stored in AWS Secret Manager.
   *
   * @schema SecretSource#SecretKey
   */
  readonly secretKey: string;

}

/**
 * Converts an object of type 'SecretSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretSource(obj: SecretSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecretArn': obj.secretArn,
    'SecretKey': obj.secretKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `NetApp::FSxN::Snapshot`
 *
 * @cloudformationResource NetApp::FSxN::Snapshot
 * @stability external
 * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
 */
export class CfnSnapshot extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "NetApp::FSxN::Snapshot";

  /**
   * Resource props.
   */
  public readonly props: CfnSnapshotProps;

  /**
   * Attribute `NetApp::FSxN::Snapshot.UUID`
   * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
   */
  public readonly attrUuid: string;

  /**
   * Create a new `NetApp::FSxN::Snapshot`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnSnapshotProps) {
    super(scope, id, { type: CfnSnapshot.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnSnapshotProps(props)! });

    this.props = props;

    this.attrUuid = cdk.Token.asString(this.getAtt('UUID'));
  }
}