// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A snapshot policy specifies when to create snapshots, how many to retain, and how to name them. A snapshot policy automatically creates and manages snapshots for a volume at defined intervals. The policy simplifies backup scheduling and maintains a reliable set of recovery points. Once activated, you need a preview key to consume this resource. Please reach out to Ng-fsx-cloudformation@netapp.com to get the key. To use this resource, you must first create the Link module.
 *
 * @schema CfnSnapshotPolicyProps
 */
export interface CfnSnapshotPolicyProps {
  /**
   * The password source for the FSx admin user.
   *
   * @schema CfnSnapshotPolicyProps#FsxAdminPasswordSource
   */
  readonly fsxAdminPasswordSource: PasswordSource;

  /**
   * The file system ID of the Amazon FSx for NetApp ONTAP file system in which the resource is created.
   *
   * @schema CfnSnapshotPolicyProps#FileSystemId
   */
  readonly fileSystemId: string;

  /**
   * The ARN of the AWS Lambda function that will be invoked to manage the resource.
   *
   * @schema CfnSnapshotPolicyProps#LinkArn
   */
  readonly linkArn: string;

  /**
   * The name of the snapshot policy.
   *
   * @schema CfnSnapshotPolicyProps#Name
   */
  readonly name: string;

  /**
   * The SVM information associated with the snapshot policy.
   *
   * @schema CfnSnapshotPolicyProps#SVM
   */
  readonly svm?: Svm;

  /**
   * The snapshot copies that define the policy.
   *
   * @schema CfnSnapshotPolicyProps#Copies
   */
  readonly copies: SnapshotPolicyCopy[];

}

/**
 * Converts an object of type 'CfnSnapshotPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnSnapshotPolicyProps(obj: CfnSnapshotPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FsxAdminPasswordSource': toJson_PasswordSource(obj.fsxAdminPasswordSource),
    'FileSystemId': obj.fileSystemId,
    'LinkArn': obj.linkArn,
    'Name': obj.name,
    'SVM': toJson_Svm(obj.svm),
    'Copies': obj.copies?.map(y => toJson_SnapshotPolicyCopy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema PasswordSource
 */
export interface PasswordSource {
  /**
   * A reference to the source of the password, typically an AWS Secrets Manager secret.
   *
   * @schema PasswordSource#Secret
   */
  readonly secret: SecretSource;

}

/**
 * Converts an object of type 'PasswordSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PasswordSource(obj: PasswordSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Secret': toJson_SecretSource(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema SVM
 */
export interface Svm {
  /**
   * The name of the SVM.
   *
   * @schema SVM#Name
   */
  readonly name?: string;

  /**
   * The UUID of the SVM.
   *
   * @schema SVM#UUID
   */
  readonly uuid?: string;

}

/**
 * Converts an object of type 'Svm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Svm(obj: Svm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'UUID': obj.uuid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema SnapshotPolicyCopy
 */
export interface SnapshotPolicyCopy {
  /**
   * The number of snapshot copies to maintain for this schedule.
   *
   * @schema SnapshotPolicyCopy#Count
   */
  readonly count: number;

  /**
   * Schedule name at which snapshot copies are captured on the volume.
   *
   * @schema SnapshotPolicyCopy#ScheduleName
   */
  readonly scheduleName: string;

  /**
   * The prefix to use while creating snapshot copies at regular intervals.
   *
   * @schema SnapshotPolicyCopy#Prefix
   */
  readonly prefix?: string;

  /**
   * Specifies the retention period of snapshot copies. The retention value represents a duration and must follow the ISO-8601 duration format. The retention period can be in years, months, days, hours, or minutes. For example 'P10Y' represents a duration of 10 years. The retention string must contain only a single time element (years, months, days, hours, or minutes).
   *
   * @schema SnapshotPolicyCopy#RetentionPeriod
   */
  readonly retentionPeriod?: string;

  /**
   * Label for SnapMirror operations. SnapMirror Label name must contain at least one character and must not contain leading or trailing white space.
   *
   * @schema SnapshotPolicyCopy#SnapmirrorLabel
   */
  readonly snapmirrorLabel?: string;

}

/**
 * Converts an object of type 'SnapshotPolicyCopy' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_SnapshotPolicyCopy(obj: SnapshotPolicyCopy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Count': obj.count,
    'ScheduleName': obj.scheduleName,
    'Prefix': obj.prefix,
    'RetentionPeriod': obj.retentionPeriod,
    'SnapmirrorLabel': obj.snapmirrorLabel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema SecretSource
 */
export interface SecretSource {
  /**
   * The ARN of the secret stored in AWS Secrets Manager.
   *
   * @schema SecretSource#SecretArn
   */
  readonly secretArn: string;

  /**
   * Reference for the SecretKey. The actual password is stored in AWS Secret Manager.
   *
   * @schema SecretSource#SecretKey
   */
  readonly secretKey: string;

}

/**
 * Converts an object of type 'SecretSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_SecretSource(obj: SecretSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecretArn': obj.secretArn,
    'SecretKey': obj.secretKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * A CloudFormation `NetApp::FSxN::SnapshotPolicy`
 *
 * @cloudformationResource NetApp::FSxN::SnapshotPolicy
 * @stability external
 * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
 */
export class CfnSnapshotPolicy extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "NetApp::FSxN::SnapshotPolicy";

  /**
   * Resource props.
   */
  public readonly props: CfnSnapshotPolicyProps;

  /**
   * Attribute `NetApp::FSxN::SnapshotPolicy.UUID`
   * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
   */
  public readonly attrUuid: string;

  /**
   * Create a new `NetApp::FSxN::SnapshotPolicy`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnSnapshotPolicyProps) {
    super(scope, id, { type: CfnSnapshotPolicy.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnSnapshotPolicyProps(props)! });

    this.props = props;

    this.attrUuid = cdk.Token.asString(this.getAtt('UUID'));
  }
}