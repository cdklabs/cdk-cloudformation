// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A storage VM (SVM) peer is a relationship established between two SVMs from different FSX for ONTAP file systems, enabling the sharing of resources and data across file systems. Once activated, you will need a preview key to consume this resource. Please reach out to Ng-fsx-cloudformation@netapp.com to get the key. To use this resource, you would need to first create the Link module.
 *
 * @schema CfnSvmPeerProps
 */
export interface CfnSvmPeerProps {
  /**
   * The password source for the FSx admin user.
   *
   * @schema CfnSvmPeerProps#FsxAdminPasswordSource
   */
  readonly fsxAdminPasswordSource: PasswordSource;

  /**
   * The file system ID of the Amazon FSx for NetApp ONTAP file system in which the resource is created.
   *
   * @schema CfnSvmPeerProps#FileSystemId
   */
  readonly fileSystemId: string;

  /**
   * The ARN of the AWS Lambda function that will be invoked to manage the resource.
   *
   * @schema CfnSvmPeerProps#LinkArn
   */
  readonly linkArn: string;

  /**
   * The destination information for the Cluster Peer relationship.
   *
   * @schema CfnSvmPeerProps#FsxnDestinationInfo
   */
  readonly fsxnDestinationInfo: FsxnDestination;

  /**
   * The name of the destination peer SVM.
   *
   * @schema CfnSvmPeerProps#PeerSvmName
   */
  readonly peerSvmName: string;

  /**
   * The SVM information of the local SVM to peer with the destination SVM.
   *
   * @schema CfnSvmPeerProps#SVM
   */
  readonly svm: Svm;

  /**
   * A list of applications that will use the SVM peer relationship.
   *
   * @schema CfnSvmPeerProps#Applications
   */
  readonly applications: CfnSvmPeerPropsApplications[];
}

/**
 * Converts an object of type 'CfnSvmPeerProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnSvmPeerProps(obj: CfnSvmPeerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FsxAdminPasswordSource': toJson_PasswordSource(obj.fsxAdminPasswordSource),
    'FileSystemId': obj.fileSystemId,
    'LinkArn': obj.linkArn,
    'FsxnDestinationInfo': toJson_FsxnDestination(obj.fsxnDestinationInfo),
    'PeerSvmName': obj.peerSvmName,
    'SVM': toJson_Svm(obj.svm),
    'Applications': obj.applications?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema PasswordSource
 */
export interface PasswordSource {
  /**
   * A reference to the source of the password, typically an AWS Secrets Manager secret.
   *
   * @schema PasswordSource#Secret
   */
  readonly secret: SecretSource;
}

/**
 * Converts an object of type 'PasswordSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PasswordSource(obj: PasswordSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Secret': toJson_SecretSource(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema FsxnDestination
 */
export interface FsxnDestination {
  /**
   * The password source for the FSx admin user.
   *
   * @schema FsxnDestination#FsxAdminPasswordSource
   */
  readonly fsxAdminPasswordSource: PasswordSource;

  /**
   * The file system ID of the Amazon FSx for NetApp ONTAP file system in which the resource is created.
   *
   * @schema FsxnDestination#FileSystemId
   */
  readonly fileSystemId: string;

  /**
   * The ARN of the AWS Lambda function that will be invoked to manage the resource.
   *
   * @schema FsxnDestination#LinkArn
   */
  readonly linkArn: string;
}

/**
 * Converts an object of type 'FsxnDestination' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FsxnDestination(obj: FsxnDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FsxAdminPasswordSource': toJson_PasswordSource(obj.fsxAdminPasswordSource),
    'FileSystemId': obj.fileSystemId,
    'LinkArn': obj.linkArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema Svm
 */
export interface Svm {
  /**
   * The name of the SVM.
   *
   * @schema Svm#Name
   */
  readonly name?: string;

  /**
   * The UUID of the SVM.
   *
   * @schema Svm#UUID
   */
  readonly uuid?: string;
}

/**
 * Converts an object of type 'Svm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_Svm(obj: Svm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'UUID': obj.uuid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema CfnSvmPeerPropsApplications
 */
export enum CfnSvmPeerPropsApplications {
  /** snapmirror */
  SNAPMIRROR = "snapmirror",
  /** flexcache */
  FLEXCACHE = "flexcache",
}

/**
 * @schema SecretSource
 */
export interface SecretSource {
  /**
   * The ARN of the secret stored in AWS Secrets Manager.
   *
   * @schema SecretSource#SecretArn
   */
  readonly secretArn: string;

  /**
   * Reference for the SecretKey. The actual password is stored in AWS Secret Manager.
   *
   * @schema SecretSource#SecretKey
   */
  readonly secretKey: string;
}

/**
 * Converts an object of type 'SecretSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_SecretSource(obj: SecretSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecretArn': obj.secretArn,
    'SecretKey': obj.secretKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * A CloudFormation `NetApp::FSxN::SvmPeer`
 *
 * @cloudformationResource NetApp::FSxN::SvmPeer
 * @stability external
 * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
 */
export class CfnSvmPeer extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "NetApp::FSxN::SvmPeer";

  /**
   * Resource props.
   */
  public readonly props: CfnSvmPeerProps;

  /**
   * Attribute `NetApp::FSxN::SvmPeer.UUID`
   * @link https://github.com/NetApp/NetApp-CloudFormation-FSx-ONTAP-provider
   */
  public readonly attrUuid: string;

  /**
   * Create a new `NetApp::FSxN::SvmPeer`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnSvmPeerProps) {
    super(scope, id, { type: CfnSvmPeer.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnSvmPeerProps(props)! });

    this.props = props;

    this.attrUuid = cdk.Token.asString(this.getAtt('UUID'));
  }
}