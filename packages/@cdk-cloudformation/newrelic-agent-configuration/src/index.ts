// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Manage New Relic Server-Side Agent Configuration
 *
 * @schema CfnConfigurationProps
 */
export interface CfnConfigurationProps {
  /**
   * The GUID for the affected Entity.
   *
   * @schema CfnConfigurationProps#Guid
   */
  readonly guid: string;

  /**
   * @schema CfnConfigurationProps#AgentConfiguration
   */
  readonly agentConfiguration: AgentConfigurationInput;
}

/**
 * Converts an object of type 'CfnConfigurationProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnConfigurationProps(obj: CfnConfigurationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Guid': obj.guid,
    'AgentConfiguration': toJson_AgentConfigurationInput(obj.agentConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema AgentConfigurationInput
 */
export interface AgentConfigurationInput {
  /**
   * Input data about the entities you want to update and the settings to use.
   *
   * @schema AgentConfigurationInput#Settings
   */
  readonly settings?: AgentConfigurationInputSettings;
}

/**
 * Converts an object of type 'AgentConfigurationInput' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInput(obj: AgentConfigurationInput | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Settings': toJson_AgentConfigurationInputSettings(obj.settings),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Input data about the entities you want to update and the settings to use.
 *
 * @schema AgentConfigurationInputSettings
 */
export interface AgentConfigurationInputSettings {
  /**
   * The new name for the application.
   *
   * @schema AgentConfigurationInputSettings#Alias
   */
  readonly alias?: string;

  /**
   * Provides fields to set general APM application settings.
   *
   * @schema AgentConfigurationInputSettings#ApmConfig
   */
  readonly apmConfig?: AgentConfigurationInputSettingsApmConfig;

  /**
   * @schema AgentConfigurationInputSettings#BrowserConfig
   */
  readonly browserConfig?: AgentConfigurationInputSettingsBrowserConfig;

  /**
   * The error collector captures information about uncaught exceptions and sends them to New Relic for viewing.
   *
   * @schema AgentConfigurationInputSettings#ErrorCollector
   */
  readonly errorCollector?: AgentConfigurationInputSettingsErrorCollector;

  /**
   * In APM, when transaction traces are collected, there may be additional Slow query data available.
   *
   * @schema AgentConfigurationInputSettings#SlowSql
   */
  readonly slowSql?: AgentConfigurationInputSettingsSlowSql;

  /**
   * Settings for the thread profiler.
   *
   * @schema AgentConfigurationInputSettings#ThreadProfiler
   */
  readonly threadProfiler?: AgentConfigurationInputSettingsThreadProfiler;

  /**
   * Input object for setting the type of tracing performed.
   *
   * @schema AgentConfigurationInputSettings#TracerType
   */
  readonly tracerType?: AgentConfigurationInputSettingsTracerType;

  /**
   * Transaction Tracer settings related to APM applications.
   *
   * @schema AgentConfigurationInputSettings#TransactionTracer
   */
  readonly transactionTracer?: AgentConfigurationInputSettingsTransactionTracer;
}

/**
 * Converts an object of type 'AgentConfigurationInputSettings' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettings(obj: AgentConfigurationInputSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Alias': obj.alias,
    'ApmConfig': toJson_AgentConfigurationInputSettingsApmConfig(obj.apmConfig),
    'BrowserConfig': toJson_AgentConfigurationInputSettingsBrowserConfig(obj.browserConfig),
    'ErrorCollector': toJson_AgentConfigurationInputSettingsErrorCollector(obj.errorCollector),
    'SlowSql': toJson_AgentConfigurationInputSettingsSlowSql(obj.slowSql),
    'ThreadProfiler': toJson_AgentConfigurationInputSettingsThreadProfiler(obj.threadProfiler),
    'TracerType': toJson_AgentConfigurationInputSettingsTracerType(obj.tracerType),
    'TransactionTracer': toJson_AgentConfigurationInputSettingsTransactionTracer(obj.transactionTracer),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Provides fields to set general APM application settings.
 *
 * @schema AgentConfigurationInputSettingsApmConfig
 */
export interface AgentConfigurationInputSettingsApmConfig {
  /**
   * Sets if installed agents should override local settings with ones set here.
   *
   * @schema AgentConfigurationInputSettingsApmConfig#UseServerSideConfig
   */
  readonly useServerSideConfig?: boolean;

  /**
   * The desired target for the APDEX measurement of this application.
   *
   * @schema AgentConfigurationInputSettingsApmConfig#ApdexTarget
   */
  readonly apdexTarget?: number;
}

/**
 * Converts an object of type 'AgentConfigurationInputSettingsApmConfig' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettingsApmConfig(obj: AgentConfigurationInputSettingsApmConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'UseServerSideConfig': obj.useServerSideConfig,
    'ApdexTarget': obj.apdexTarget,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema AgentConfigurationInputSettingsBrowserConfig
 */
export interface AgentConfigurationInputSettingsBrowserConfig {
  /**
   * The desired target for the APDEX measurement of this application.
   *
   * @schema AgentConfigurationInputSettingsBrowserConfig#ApdexTarget
   */
  readonly apdexTarget?: number;
}

/**
 * Converts an object of type 'AgentConfigurationInputSettingsBrowserConfig' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettingsBrowserConfig(obj: AgentConfigurationInputSettingsBrowserConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ApdexTarget': obj.apdexTarget,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The error collector captures information about uncaught exceptions and sends them to New Relic for viewing.
 *
 * @schema AgentConfigurationInputSettingsErrorCollector
 */
export interface AgentConfigurationInputSettingsErrorCollector {
  /**
   * Enable error collector
   *
   * @schema AgentConfigurationInputSettingsErrorCollector#Enabled
   */
  readonly enabled?: boolean;

  /**
   * Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM.
   *
   * @schema AgentConfigurationInputSettingsErrorCollector#ExpectedErrorClasses
   */
  readonly expectedErrorClasses?: string[];

  /**
   * A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score.
   *
   * @schema AgentConfigurationInputSettingsErrorCollector#ExpectedErrorCodes
   */
  readonly expectedErrorCodes?: string[];

  /**
   * Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM.
   *
   * @schema AgentConfigurationInputSettingsErrorCollector#IgnoredErrorClasses
   */
  readonly ignoredErrorClasses?: string[];

  /**
   * A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors.
   *
   * @schema AgentConfigurationInputSettingsErrorCollector#IgnoredErrorCodes
   */
  readonly ignoredErrorCodes?: string[];
}

/**
 * Converts an object of type 'AgentConfigurationInputSettingsErrorCollector' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettingsErrorCollector(obj: AgentConfigurationInputSettingsErrorCollector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
    'ExpectedErrorClasses': obj.expectedErrorClasses?.map(y => y),
    'ExpectedErrorCodes': obj.expectedErrorCodes?.map(y => y),
    'IgnoredErrorClasses': obj.ignoredErrorClasses?.map(y => y),
    'IgnoredErrorCodes': obj.ignoredErrorCodes?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * In APM, when transaction traces are collected, there may be additional Slow query data available.
 *
 * @schema AgentConfigurationInputSettingsSlowSql
 */
export interface AgentConfigurationInputSettingsSlowSql {
  /**
   * Whether or not slow_sql is enabled.
   *
   * @schema AgentConfigurationInputSettingsSlowSql#Enabled
   */
  readonly enabled?: boolean;
}

/**
 * Converts an object of type 'AgentConfigurationInputSettingsSlowSql' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettingsSlowSql(obj: AgentConfigurationInputSettingsSlowSql | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Settings for the thread profiler.
 *
 * @schema AgentConfigurationInputSettingsThreadProfiler
 */
export interface AgentConfigurationInputSettingsThreadProfiler {
  /**
   * Is thread profiling enabled for this application?
   *
   * @schema AgentConfigurationInputSettingsThreadProfiler#Enabled
   */
  readonly enabled?: boolean;
}

/**
 * Converts an object of type 'AgentConfigurationInputSettingsThreadProfiler' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettingsThreadProfiler(obj: AgentConfigurationInputSettingsThreadProfiler | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Input object for setting the type of tracing performed.
 *
 * @schema AgentConfigurationInputSettingsTracerType
 */
export interface AgentConfigurationInputSettingsTracerType {
  /**
   * @schema AgentConfigurationInputSettingsTracerType#Value
   */
  readonly value?: AgentConfigurationInputSettingsTracerTypeValue;
}

/**
 * Converts an object of type 'AgentConfigurationInputSettingsTracerType' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettingsTracerType(obj: AgentConfigurationInputSettingsTracerType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Transaction Tracer settings related to APM applications.
 *
 * @schema AgentConfigurationInputSettingsTransactionTracer
 */
export interface AgentConfigurationInputSettingsTransactionTracer {
  /**
   * Enable or disable the capture of memcache keys from transaction traces.
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#CaptureMemcacheKeys
   */
  readonly captureMemcacheKeys?: boolean;

  /**
   * If true, this enables the Transaction Tracer feature, enabling collection of transaction traces.
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#Enabled
   */
  readonly enabled?: boolean;

  /**
   * If true, enables the collection of explain plans in transaction traces
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#ExplainEnabled
   */
  readonly explainEnabled?: boolean;

  /**
   * Relevant only when explain_enabled is true. Can be set to automatic configuration (APDEX_F) or manual (see explainThresholdValue)
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#ExplainThresholdType
   */
  readonly explainThresholdType?: AgentConfigurationInputSettingsTransactionTracerExplainThresholdType;

  /**
   * Threshold (in seconds) above which the agent will collect explain plans.
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#ExplainThresholdValue
   */
  readonly explainThresholdValue?: number;

  /**
   * Set to true to enable logging of queries to the agent log file instead of uploading to New Relic.
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#LogSql
   */
  readonly logSql?: boolean;

  /**
   * Obfuscation level for SQL queries reported in transaction trace nodes.
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#RecordSql
   */
  readonly recordSql?: AgentConfigurationInputSettingsTransactionTracerRecordSql;

  /**
   * Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold.
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#StackTraceThreshold
   */
  readonly stackTraceThreshold?: number;

  /**
   * Relevant only when TransactionTracer is enabled. Can be set to automatic configuration (APDEX_F) or manual (see TransactionThresholdValue).
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#TransactionThresholdType
   */
  readonly transactionThresholdType?: AgentConfigurationInputSettingsTransactionTracerTransactionThresholdType;

  /**
   * Threshold (in seconds) that transactions with a duration longer than this threshold are eligible for transaction traces.
   *
   * @schema AgentConfigurationInputSettingsTransactionTracer#TransactionThresholdValue
   */
  readonly transactionThresholdValue?: number;
}

/**
 * Converts an object of type 'AgentConfigurationInputSettingsTransactionTracer' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AgentConfigurationInputSettingsTransactionTracer(obj: AgentConfigurationInputSettingsTransactionTracer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CaptureMemcacheKeys': obj.captureMemcacheKeys,
    'Enabled': obj.enabled,
    'ExplainEnabled': obj.explainEnabled,
    'ExplainThresholdType': obj.explainThresholdType,
    'ExplainThresholdValue': obj.explainThresholdValue,
    'LogSql': obj.logSql,
    'RecordSql': obj.recordSql,
    'StackTraceThreshold': obj.stackTraceThreshold,
    'TransactionThresholdType': obj.transactionThresholdType,
    'TransactionThresholdValue': obj.transactionThresholdValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema AgentConfigurationInputSettingsTracerTypeValue
 */
export enum AgentConfigurationInputSettingsTracerTypeValue {
  /** CROSS_APPLICATION_TRACER */
  CROSS_UNDERSCORE_APPLICATION_UNDERSCORE_TRACER = "CROSS_APPLICATION_TRACER",
  /** DISTRIBUTED_TRACING */
  DISTRIBUTED_UNDERSCORE_TRACING = "DISTRIBUTED_TRACING",
  /** NONE */
  NONE = "NONE",
}

/**
 * Relevant only when explain_enabled is true. Can be set to automatic configuration (APDEX_F) or manual (see explainThresholdValue)
 *
 * @schema AgentConfigurationInputSettingsTransactionTracerExplainThresholdType
 */
export enum AgentConfigurationInputSettingsTransactionTracerExplainThresholdType {
  /** APDEX_F */
  APDEX_UNDERSCORE_F = "APDEX_F",
  /** VALUE */
  VALUE = "VALUE",
}

/**
 * Obfuscation level for SQL queries reported in transaction trace nodes.
 *
 * @schema AgentConfigurationInputSettingsTransactionTracerRecordSql
 */
export enum AgentConfigurationInputSettingsTransactionTracerRecordSql {
  /** OBFUSCATED */
  OBFUSCATED = "OBFUSCATED",
  /** RAW */
  RAW = "RAW",
  /** OFF */
  OFF = "OFF",
}

/**
 * Relevant only when TransactionTracer is enabled. Can be set to automatic configuration (APDEX_F) or manual (see TransactionThresholdValue).
 *
 * @schema AgentConfigurationInputSettingsTransactionTracerTransactionThresholdType
 */
export enum AgentConfigurationInputSettingsTransactionTracerTransactionThresholdType {
  /** APDEX_F */
  APDEX_UNDERSCORE_F = "APDEX_F",
  /** VALUE */
  VALUE = "VALUE",
}


/**
 * A CloudFormation `NewRelic::Agent::Configuration`
 *
 * @cloudformationResource NewRelic::Agent::Configuration
 * @stability external
 * @link https://github.com/aws-ia/cloudformation-newrelic-resource-providers.git
 */
export class CfnConfiguration extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "NewRelic::Agent::Configuration";

  /**
   * Resource props.
   */
  public readonly props: CfnConfigurationProps;


  /**
   * Create a new `NewRelic::Agent::Configuration`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnConfigurationProps) {
    super(scope, id, { type: CfnConfiguration.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnConfigurationProps(props)! });

    this.props = props;

  }
}