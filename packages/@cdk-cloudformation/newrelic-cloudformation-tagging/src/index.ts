// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * CRUD operations for New Relic Tags via the NerdGraph API
 *
 * @schema CfnTaggingProps
 */
export interface CfnTaggingProps {
  /**
   * @schema CfnTaggingProps#Endpoint
   */
  readonly endpoint?: string;

  /**
   * @schema CfnTaggingProps#APIKey
   */
  readonly apiKey: string;

  /**
   * @schema CfnTaggingProps#Guid
   */
  readonly guid?: string;

  /**
   * @schema CfnTaggingProps#EntityGuid
   */
  readonly entityGuid: string;

  /**
   * @schema CfnTaggingProps#ListQueryFilter
   */
  readonly listQueryFilter?: string;

  /**
   * @schema CfnTaggingProps#Variables
   */
  readonly variables?: any;

  /**
   * @schema CfnTaggingProps#Tags
   */
  readonly tags: TagObject[];

  /**
   * @schema CfnTaggingProps#Semantics
   */
  readonly semantics?: string;
}

/**
 * Converts an object of type 'CfnTaggingProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnTaggingProps(obj: CfnTaggingProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Endpoint': obj.endpoint,
    'APIKey': obj.apiKey,
    'Guid': obj.guid,
    'EntityGuid': obj.entityGuid,
    'ListQueryFilter': obj.listQueryFilter,
    'Variables': obj.variables,
    'Tags': obj.tags?.map(y => toJson_TagObject(y)),
    'Semantics': obj.semantics,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema TagObject
 */
export interface TagObject {
  /**
   * @schema TagObject#Key
   */
  readonly key: string;

  /**
   * @schema TagObject#Values
   */
  readonly values: string[];
}

/**
 * Converts an object of type 'TagObject' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TagObject(obj: TagObject | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * A CloudFormation `newrelic::cloudformation::tagging`
 *
 * @cloudformationResource newrelic::cloudformation::tagging
 * @stability external
 * @link https://github.com/newrelic-experimental/newrelic-cloudformation-resource-providers-tagging.git
 */
export class CfnTagging extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "newrelic::cloudformation::tagging";

  /**
   * Resource props.
   */
  public readonly props: CfnTaggingProps;


  /**
   * Create a new `newrelic::cloudformation::tagging`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnTaggingProps) {
    super(scope, id, { type: CfnTagging.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnTaggingProps(props)! });

    this.props = props;

  }
}