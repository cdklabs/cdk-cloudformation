// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * CRUD operations for New Relic Alerts Nrql Condition via the NerdGraph API
 *
 * @schema CfnAlertsNrqlConditionProps
 */
export interface CfnAlertsNrqlConditionProps {
  /**
   * @schema CfnAlertsNrqlConditionProps#ConditionType
   */
  readonly conditionType: ConditionType;

  /**
   * @schema CfnAlertsNrqlConditionProps#Condition
   */
  readonly condition: string;

  /**
   * @schema CfnAlertsNrqlConditionProps#PolicyId
   */
  readonly policyId: string;

  /**
   * @schema CfnAlertsNrqlConditionProps#ListQueryFilter
   */
  readonly listQueryFilter?: string;

  /**
   * @schema CfnAlertsNrqlConditionProps#Variables
   */
  readonly variables?: any;

  /**
   * @schema CfnAlertsNrqlConditionProps#Tags
   */
  readonly tags?: any;

}

/**
 * Converts an object of type 'CfnAlertsNrqlConditionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnAlertsNrqlConditionProps(obj: CfnAlertsNrqlConditionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConditionType': obj.conditionType,
    'Condition': obj.condition,
    'PolicyId': obj.policyId,
    'ListQueryFilter': obj.listQueryFilter,
    'Variables': obj.variables,
    'Tags': obj.tags,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ConditionType
 */
export enum ConditionType {
  /** Baseline */
  BASELINE = "Baseline",
  /** Static */
  STATIC = "Static",
}


/**
 * A CloudFormation `NewRelic::Observability::AlertsNrqlCondition`
 *
 * @cloudformationResource NewRelic::Observability::AlertsNrqlCondition
 * @stability external
 * @link https://github.com/newrelic/newrelic-cloudformation-resource-providers-alertsnrqlcondition.git
 */
export class CfnAlertsNrqlCondition extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "NewRelic::Observability::AlertsNrqlCondition";

  /**
   * Resource props.
   */
  public readonly props: CfnAlertsNrqlConditionProps;

  /**
   * Attribute `NewRelic::Observability::AlertsNrqlCondition.Id`
   * @link https://github.com/newrelic/newrelic-cloudformation-resource-providers-alertsnrqlcondition.git
   */
  public readonly attrId: string;
  /**
   * Attribute `NewRelic::Observability::AlertsNrqlCondition.EntityGuid`
   * @link https://github.com/newrelic/newrelic-cloudformation-resource-providers-alertsnrqlcondition.git
   */
  public readonly attrEntityGuid: string;

  /**
   * Create a new `NewRelic::Observability::AlertsNrqlCondition`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnAlertsNrqlConditionProps) {
    super(scope, id, { type: CfnAlertsNrqlCondition.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnAlertsNrqlConditionProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrEntityGuid = cdk.Token.asString(this.getAtt('EntityGuid'));
  }
}