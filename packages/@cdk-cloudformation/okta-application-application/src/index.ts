// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Manage an Application in Okta.
 *
 * @schema CfnApplicationProps
 */
export interface CfnApplicationProps {
  /**
   * @schema CfnApplicationProps#Accessibility
   */
  readonly accessibility?: Accessibility;

  /**
   * @schema CfnApplicationProps#Credentials
   */
  readonly credentials?: ApplicationCredentials;

  /**
   * User-defined display name for app
   *
   * @schema CfnApplicationProps#Label
   */
  readonly label: string;

  /**
   * Unique key for app definition
   *
   * @schema CfnApplicationProps#Name
   */
  readonly name?: string;

  /**
   * The type of JSON Web Key Set (JWKS) algorithm that must be used for signing request object
   *
   * @schema CfnApplicationProps#RequestObjectSigningAlg
   */
  readonly requestObjectSigningAlg?: CfnApplicationPropsRequestObjectSigningAlg;

  /**
   * @schema CfnApplicationProps#Settings
   */
  readonly settings?: CfnApplicationPropsSettings;

  /**
   * @schema CfnApplicationProps#SignOnMode
   */
  readonly signOnMode: SignOnMode;

  /**
   * @schema CfnApplicationProps#Visibility
   */
  readonly visibility?: Visibility;

}

/**
 * Converts an object of type 'CfnApplicationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnApplicationProps(obj: CfnApplicationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Accessibility': toJson_Accessibility(obj.accessibility),
    'Credentials': toJson_ApplicationCredentials(obj.credentials),
    'Label': obj.label,
    'Name': obj.name,
    'RequestObjectSigningAlg': obj.requestObjectSigningAlg,
    'Settings': toJson_CfnApplicationPropsSettings(obj.settings),
    'SignOnMode': obj.signOnMode,
    'Visibility': toJson_Visibility(obj.visibility),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies access settings for the application
 *
 * @schema Accessibility
 */
export interface Accessibility {
  /**
   * Custom error page for this application
   *
   * @schema Accessibility#ErrorRedirectUrl
   */
  readonly errorRedirectUrl?: string;

  /**
   * Enable self-service application assignment
   *
   * @schema Accessibility#SelfService
   */
  readonly selfService?: boolean;

}

/**
 * Converts an object of type 'Accessibility' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Accessibility(obj: Accessibility | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ErrorRedirectUrl': obj.errorRedirectUrl,
    'SelfService': obj.selfService,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies credentials and scheme for the application's signOnMode
 *
 * @schema ApplicationCredentials
 */
export interface ApplicationCredentials {
  /**
   * @schema ApplicationCredentials#OauthClient
   */
  readonly oauthClient?: OauthCredential;

  /**
   * @schema ApplicationCredentials#Password
   */
  readonly password?: string;

  /**
   * @schema ApplicationCredentials#Scheme
   */
  readonly scheme?: AuthenticationScheme;

  /**
   * @schema ApplicationCredentials#Signing
   */
  readonly signing?: SigningCredential;

  /**
   * Shared username for app
   *
   * @schema ApplicationCredentials#UserName
   */
  readonly userName?: string;

  /**
   * Whether to reveal the credential password
   *
   * @schema ApplicationCredentials#RevealPassword
   */
  readonly revealPassword?: boolean;

  /**
   * @schema ApplicationCredentials#UserNameTemplate
   */
  readonly userNameTemplate?: UserNameTemplate;

}

/**
 * Converts an object of type 'ApplicationCredentials' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationCredentials(obj: ApplicationCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'OauthClient': toJson_OauthCredential(obj.oauthClient),
    'Password': obj.password,
    'Scheme': obj.scheme,
    'Signing': toJson_SigningCredential(obj.signing),
    'UserName': obj.userName,
    'RevealPassword': obj.revealPassword,
    'UserNameTemplate': toJson_UserNameTemplate(obj.userNameTemplate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The type of JSON Web Key Set (JWKS) algorithm that must be used for signing request object
 *
 * @schema CfnApplicationPropsRequestObjectSigningAlg
 */
export enum CfnApplicationPropsRequestObjectSigningAlg {
  /** HS256 */
  HS256 = "HS256",
  /** HS384 */
  HS384 = "HS384",
  /** HS512 */
  HS512 = "HS512",
  /** RS256 */
  RS256 = "RS256",
  /** RS384 */
  RS384 = "RS384",
  /** RS512 */
  RS512 = "RS512",
  /** ES256 */
  ES256 = "ES256",
  /** ES384 */
  ES384 = "ES384",
  /** ES512 */
  ES512 = "ES512",
}

/**
 * @schema CfnApplicationPropsSettings
 */
export interface CfnApplicationPropsSettings {
  /**
   * @schema CfnApplicationPropsSettings#App
   */
  readonly app?: CfnApplicationPropsSettingsApp;

}

/**
 * Converts an object of type 'CfnApplicationPropsSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnApplicationPropsSettings(obj: CfnApplicationPropsSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'App': toJson_CfnApplicationPropsSettingsApp(obj.app),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SignOnMode
 */
export enum SignOnMode {
  /** AUTO_LOGIN */
  AUTO_UNDERSCORE_LOGIN = "AUTO_LOGIN",
  /** BASIC_AUTH */
  BASIC_UNDERSCORE_AUTH = "BASIC_AUTH",
  /** BOOKMARK */
  BOOKMARK = "BOOKMARK",
  /** BROWSER_PLUGIN */
  BROWSER_UNDERSCORE_PLUGIN = "BROWSER_PLUGIN",
  /** Custom */
  CUSTOM = "Custom",
  /** OPENID_CONNECT */
  OPENID_UNDERSCORE_CONNECT = "OPENID_CONNECT",
  /** SAML_1_1 */
  SAML_UNDERSCORE_1_UNDERSCORE_1 = "SAML_1_1",
  /** SAML_2_0 */
  SAML_UNDERSCORE_2_UNDERSCORE_0 = "SAML_2_0",
  /** SECURE_PASSWORD_STORE */
  SECURE_UNDERSCORE_PASSWORD_UNDERSCORE_STORE = "SECURE_PASSWORD_STORE",
  /** WS_FEDERATION */
  WS_UNDERSCORE_FEDERATION = "WS_FEDERATION",
}

/**
 * Specifies visibility settings for the application
 *
 * @schema Visibility
 */
export interface Visibility {
  /**
   * Automatically signs in to the app when user signs into Okta.
   *
   * @schema Visibility#AutoLaunch
   */
  readonly autoLaunch: boolean;

  /**
   * Automatically sign in when user lands on the sign-in page
   *
   * @schema Visibility#AutoSubmitToolbar
   */
  readonly autoSubmitToolbar: boolean;

  /**
   * Hides this app for specific end-user apps
   *
   * @schema Visibility#Hide
   */
  readonly hide: Hide;

}

/**
 * Converts an object of type 'Visibility' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Visibility(obj: Visibility | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AutoLaunch': obj.autoLaunch,
    'AutoSubmitToolbar': obj.autoSubmitToolbar,
    'Hide': toJson_Hide(obj.hide),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines how to authenticate the OAuth 2.0 client
 *
 * @schema OauthCredential
 */
export interface OauthCredential {
  /**
   * Requested key rotation mode
   *
   * @schema OauthCredential#AutoKeyRotation
   */
  readonly autoKeyRotation?: boolean;

  /**
   * Unique identifier for the OAuth 2.0 client application
   *
   * @schema OauthCredential#ClientId
   */
  readonly clientId?: string;

  /**
   * OAuth 2.0 client secret string
   *
   * @schema OauthCredential#ClientSecret
   */
  readonly clientSecret?: string;

  /**
   * Requested authentication method for the token endpoint
   *
   * @schema OauthCredential#TokenEndpointAuthMethod
   */
  readonly tokenEndpointAuthMethod: string;

}

/**
 * Converts an object of type 'OauthCredential' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OauthCredential(obj: OauthCredential | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AutoKeyRotation': obj.autoKeyRotation,
    'ClientId': obj.clientId,
    'ClientSecret': obj.clientSecret,
    'TokenEndpointAuthMethod': obj.tokenEndpointAuthMethod,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Authentication Scheme
 *
 * @schema AuthenticationScheme
 */
export enum AuthenticationScheme {
  /** ADMIN_SETS_CREDENTIALS */
  ADMIN_UNDERSCORE_SETS_UNDERSCORE_CREDENTIALS = "ADMIN_SETS_CREDENTIALS",
  /** EDIT_PASSWORD_ONLY */
  EDIT_UNDERSCORE_PASSWORD_UNDERSCORE_ONLY = "EDIT_PASSWORD_ONLY",
  /** EDIT_USERNAME_AND_PASSWORD */
  EDIT_UNDERSCORE_USERNAME_UNDERSCORE_AND_UNDERSCORE_PASSWORD = "EDIT_USERNAME_AND_PASSWORD",
  /** EXTERNAL_PASSWORD_SYNC */
  EXTERNAL_UNDERSCORE_PASSWORD_UNDERSCORE_SYNC = "EXTERNAL_PASSWORD_SYNC",
  /** SHARED_USERNAME_AND_PASSWORD */
  SHARED_UNDERSCORE_USERNAME_UNDERSCORE_AND_UNDERSCORE_PASSWORD = "SHARED_USERNAME_AND_PASSWORD",
}

/**
 * Determines the key used for signing assertions for the signOnMode
 *
 * @schema SigningCredential
 */
export interface SigningCredential {
  /**
   * Reference for key credential for the app
   *
   * @schema SigningCredential#Kid
   */
  readonly kid?: string;

}

/**
 * Converts an object of type 'SigningCredential' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SigningCredential(obj: SigningCredential | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Kid': obj.kid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the template used to generate a user's username when the application is assigned via a group or directly to a user
 *
 * @schema UserNameTemplate
 */
export interface UserNameTemplate {
  /**
   * mapping expression for username
   *
   * @schema UserNameTemplate#Template
   */
  readonly template?: string;

  /**
   * type of mapping expression
   *
   * @schema UserNameTemplate#Type
   */
  readonly type: UserNameTemplateType;

}

/**
 * Converts an object of type 'UserNameTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UserNameTemplate(obj: UserNameTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Template': obj.template,
    'Type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnApplicationPropsSettingsApp
 */
export interface CfnApplicationPropsSettingsApp {
  /**
   * @schema CfnApplicationPropsSettingsApp#SiteURL
   */
  readonly siteUrl?: string;

  /**
   * @schema CfnApplicationPropsSettingsApp#AuthURL
   */
  readonly authUrl?: string;

  /**
   * @schema CfnApplicationPropsSettingsApp#Url
   */
  readonly url?: string;

}

/**
 * Converts an object of type 'CfnApplicationPropsSettingsApp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnApplicationPropsSettingsApp(obj: CfnApplicationPropsSettingsApp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SiteURL': obj.siteUrl,
    'AuthURL': obj.authUrl,
    'Url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hides this app for specific end-user apps
 *
 * @schema Hide
 */
export interface Hide {
  /**
   * Okta Mobile for iOS or Android (pre-dates Android)
   *
   * @schema Hide#IOS
   */
  readonly ios: boolean;

  /**
   * Okta Web Browser Home Page
   *
   * @schema Hide#Web
   */
  readonly web: boolean;

}

/**
 * Converts an object of type 'Hide' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Hide(obj: Hide | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IOS': obj.ios,
    'Web': obj.web,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * type of mapping expression
 *
 * @schema UserNameTemplateType
 */
export enum UserNameTemplateType {
  /** NONE */
  NONE = "NONE",
  /** BUILT_IN */
  BUILT_UNDERSCORE_IN = "BUILT_IN",
  /** CUSTOM */
  CUSTOM = "CUSTOM",
}


/**
 * A CloudFormation `Okta::Application::Application`
 *
 * @cloudformationResource Okta::Application::Application
 * @stability external
 * @link https://github.com/aws-ia/cloudformation-okta-resource-providers.git
 */
export class CfnApplication extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "Okta::Application::Application";

  /**
   * Resource props.
   */
  public readonly props: CfnApplicationProps;

  /**
   * Attribute `Okta::Application::Application.Id`
   * @link https://github.com/aws-ia/cloudformation-okta-resource-providers.git
   */
  public readonly attrId: string;

  /**
   * Create a new `Okta::Application::Application`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnApplicationProps) {
    super(scope, id, { type: CfnApplication.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnApplicationProps(props)! });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt('Id'));
  }
}