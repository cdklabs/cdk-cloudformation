// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * A resource schema representing a PagerDuty Integration belonging to a Service.
 *
 * @schema CfnIntegrationProps
 */
export interface CfnIntegrationProps {
  /**
   * @schema CfnIntegrationProps#Id
   */
  readonly id?: string;

  /**
   * @schema CfnIntegrationProps#Summary
   */
  readonly summary?: string;

  /**
   * The type of integration to be created. Refer to the API documentation for list of allowed values.
   *
   * @schema CfnIntegrationProps#Type
   */
  readonly type: CfnIntegrationPropsType;

  /**
   * @schema CfnIntegrationProps#Self
   */
  readonly self?: string;

  /**
   * @schema CfnIntegrationProps#HtmlUrl
   */
  readonly htmlUrl?: string;

  /**
   * The name of integration to be created.
   *
   * @schema CfnIntegrationProps#Name
   */
  readonly name?: string;

  /**
   * The ID of the service integration should be associated with.
   *
   * @schema CfnIntegrationProps#ServiceId
   */
  readonly serviceId: string;

  /**
   * The ID of a third party vendor integration. Used for existing integrations.
   *
   * @schema CfnIntegrationProps#VendorId
   */
  readonly vendorId?: string;

  /**
   * Email address for the integration - must be set to an email address @your-subdomain.pagerduty.com. Specified only for generic_email_inbound_integration integrations.
   *
   * @schema CfnIntegrationProps#IntegrationEmail
   */
  readonly integrationEmail?: string;

  /**
   * Email incident creation. Specified only for generic_email_inbound_integration integrations.
   *
   * @schema CfnIntegrationProps#EmailIncidentCreation
   */
  readonly emailIncidentCreation?: CfnIntegrationPropsEmailIncidentCreation;

  /**
   * Email filter mode. Specified only for generic_email_inbound_integration integrations.
   *
   * @schema CfnIntegrationProps#EmailFilterMode
   */
  readonly emailFilterMode?: CfnIntegrationPropsEmailFilterMode;

  /**
   * Email parsers. Specified only for generic_email_inbound_integration integrations.
   *
   * @schema CfnIntegrationProps#EmailParsers
   */
  readonly emailParsers?: EmailParser[];

  /**
   * Email Parsing Fallback. Specified only for generic_email_inbound_integration integrations.
   *
   * @schema CfnIntegrationProps#EmailParsingFallback
   */
  readonly emailParsingFallback?: CfnIntegrationPropsEmailParsingFallback;

  /**
   * Email filters. Specified only for generic_email_inbound_integration integrations.
   *
   * @schema CfnIntegrationProps#EmailFilters
   */
  readonly emailFilters?: EmailFilter[];
}

/**
 * Converts an object of type 'CfnIntegrationProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnIntegrationProps(obj: CfnIntegrationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Id': obj.id,
    'Summary': obj.summary,
    'Type': obj.type,
    'Self': obj.self,
    'HtmlUrl': obj.htmlUrl,
    'Name': obj.name,
    'ServiceId': obj.serviceId,
    'VendorId': obj.vendorId,
    'IntegrationEmail': obj.integrationEmail,
    'EmailIncidentCreation': obj.emailIncidentCreation,
    'EmailFilterMode': obj.emailFilterMode,
    'EmailParsers': obj.emailParsers?.map(y => toJson_EmailParser(y)),
    'EmailParsingFallback': obj.emailParsingFallback,
    'EmailFilters': obj.emailFilters?.map(y => toJson_EmailFilter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The type of integration to be created. Refer to the API documentation for list of allowed values.
 *
 * @schema CfnIntegrationPropsType
 */
export enum CfnIntegrationPropsType {
  /** aws_cloudwatch_inbound_integration */
  AWS_UNDERSCORE_CLOUDWATCH_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "aws_cloudwatch_inbound_integration",
  /** cloudkick_inbound_integration */
  CLOUDKICK_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "cloudkick_inbound_integration",
  /** event_transformer_api_inbound_integration */
  EVENT_UNDERSCORE_TRANSFORMER_UNDERSCORE_API_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "event_transformer_api_inbound_integration",
  /** generic_email_inbound_integration */
  GENERIC_UNDERSCORE_EMAIL_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "generic_email_inbound_integration",
  /** generic_events_api_inbound_integration */
  GENERIC_UNDERSCORE_EVENTS_UNDERSCORE_API_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "generic_events_api_inbound_integration",
  /** keynote_inbound_integration */
  KEYNOTE_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "keynote_inbound_integration",
  /** nagios_inbound_integration */
  NAGIOS_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "nagios_inbound_integration",
  /** pingdom_inbound_integration */
  PINGDOM_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "pingdom_inbound_integration",
  /** sql_monitor_inbound_integration */
  SQL_UNDERSCORE_MONITOR_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "sql_monitor_inbound_integration",
  /** events_api_v2_inbound_integration */
  EVENTS_UNDERSCORE_API_UNDERSCORE_V2_UNDERSCORE_INBOUND_UNDERSCORE_INTEGRATION = "events_api_v2_inbound_integration",
}

/**
 * Email incident creation. Specified only for generic_email_inbound_integration integrations.
 *
 * @schema CfnIntegrationPropsEmailIncidentCreation
 */
export enum CfnIntegrationPropsEmailIncidentCreation {
  /** on_new_email */
  ON_UNDERSCORE_NEW_UNDERSCORE_EMAIL = "on_new_email",
  /** on_new_email_subject */
  ON_UNDERSCORE_NEW_UNDERSCORE_EMAIL_UNDERSCORE_SUBJECT = "on_new_email_subject",
  /** only_if_no_open_incidents */
  ONLY_UNDERSCORE_IF_UNDERSCORE_NO_UNDERSCORE_OPEN_UNDERSCORE_INCIDENTS = "only_if_no_open_incidents",
  /** use_rules */
  USE_UNDERSCORE_RULES = "use_rules",
}

/**
 * Email filter mode. Specified only for generic_email_inbound_integration integrations.
 *
 * @schema CfnIntegrationPropsEmailFilterMode
 */
export enum CfnIntegrationPropsEmailFilterMode {
  /** email */
  EMAIL = "email",
  /** or-rules-email */
  OR_HYPHEN_RULES_HYPHEN_EMAIL = "or-rules-email",
  /** and-rules-email */
  AND_HYPHEN_RULES_HYPHEN_EMAIL = "and-rules-email",
}

/**
 * @schema EmailParser
 */
export interface EmailParser {
  /**
   * @schema EmailParser#Action
   */
  readonly action?: EmailParserAction;

  /**
   * @schema EmailParser#MatchPredicate
   */
  readonly matchPredicate?: RootMatchPredicate;

  /**
   * @schema EmailParser#ValueExtractors
   */
  readonly valueExtractors?: ValueExtractor[];
}

/**
 * Converts an object of type 'EmailParser' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_EmailParser(obj: EmailParser | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Action': obj.action,
    'MatchPredicate': toJson_RootMatchPredicate(obj.matchPredicate),
    'ValueExtractors': obj.valueExtractors?.map(y => toJson_ValueExtractor(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Email Parsing Fallback. Specified only for generic_email_inbound_integration integrations.
 *
 * @schema CfnIntegrationPropsEmailParsingFallback
 */
export enum CfnIntegrationPropsEmailParsingFallback {
  /** open_new_incident */
  OPEN_UNDERSCORE_NEW_UNDERSCORE_INCIDENT = "open_new_incident",
  /** discard */
  DISCARD = "discard",
}

/**
 * @schema EmailFilter
 */
export interface EmailFilter {
  /**
   * @schema EmailFilter#SubjectMode
   */
  readonly subjectMode?: EmailFilterSubjectMode;

  /**
   * @schema EmailFilter#SubjectRegex
   */
  readonly subjectRegex?: string;

  /**
   * @schema EmailFilter#BodyMode
   */
  readonly bodyMode?: EmailFilterBodyMode;

  /**
   * @schema EmailFilter#BodyRegex
   */
  readonly bodyRegex?: string;

  /**
   * @schema EmailFilter#FromEmailMode
   */
  readonly fromEmailMode?: EmailFilterFromEmailMode;

  /**
   * @schema EmailFilter#FromEmailRegex
   */
  readonly fromEmailRegex?: string;
}

/**
 * Converts an object of type 'EmailFilter' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_EmailFilter(obj: EmailFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SubjectMode': obj.subjectMode,
    'SubjectRegex': obj.subjectRegex,
    'BodyMode': obj.bodyMode,
    'BodyRegex': obj.bodyRegex,
    'FromEmailMode': obj.fromEmailMode,
    'FromEmailRegex': obj.fromEmailRegex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema EmailParserAction
 */
export enum EmailParserAction {
  /** trigger */
  TRIGGER = "trigger",
  /** resolve */
  RESOLVE = "resolve",
}

/**
 * @schema RootMatchPredicate
 */
export interface RootMatchPredicate {
  /**
   * @schema RootMatchPredicate#Type
   */
  readonly type?: RootMatchPredicateType;

  /**
   * @schema RootMatchPredicate#Children
   */
  readonly children?: MatchPredicate[];
}

/**
 * Converts an object of type 'RootMatchPredicate' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RootMatchPredicate(obj: RootMatchPredicate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Children': obj.children?.map(y => toJson_MatchPredicate(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ValueExtractor
 */
export interface ValueExtractor {
  /**
   * @schema ValueExtractor#Type
   */
  readonly type?: ValueExtractorType;

  /**
   * @schema ValueExtractor#Part
   */
  readonly part?: ValueExtractorPart;

  /**
   * @schema ValueExtractor#ValueName
   */
  readonly valueName?: string;

  /**
   * @schema ValueExtractor#Regex
   */
  readonly regex?: string;

  /**
   * @schema ValueExtractor#StartsAfter
   */
  readonly startsAfter?: string;

  /**
   * @schema ValueExtractor#EndsBefore
   */
  readonly endsBefore?: string;
}

/**
 * Converts an object of type 'ValueExtractor' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ValueExtractor(obj: ValueExtractor | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Part': obj.part,
    'ValueName': obj.valueName,
    'Regex': obj.regex,
    'StartsAfter': obj.startsAfter,
    'EndsBefore': obj.endsBefore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema EmailFilterSubjectMode
 */
export enum EmailFilterSubjectMode {
  /** match */
  MATCH = "match",
  /** no-match */
  NO_HYPHEN_MATCH = "no-match",
  /** always */
  ALWAYS = "always",
}

/**
 * @schema EmailFilterBodyMode
 */
export enum EmailFilterBodyMode {
  /** match */
  MATCH = "match",
  /** no-match */
  NO_HYPHEN_MATCH = "no-match",
  /** always */
  ALWAYS = "always",
}

/**
 * @schema EmailFilterFromEmailMode
 */
export enum EmailFilterFromEmailMode {
  /** match */
  MATCH = "match",
  /** no-match */
  NO_HYPHEN_MATCH = "no-match",
  /** always */
  ALWAYS = "always",
}

/**
 * @schema RootMatchPredicateType
 */
export enum RootMatchPredicateType {
  /** all */
  ALL = "all",
  /** any */
  ANY = "any",
  /** not */
  NOT = "not",
}

/**
 * @schema MatchPredicate
 */
export interface MatchPredicate {
  /**
   * @schema MatchPredicate#Type
   */
  readonly type?: MatchPredicateType;

  /**
   * @schema MatchPredicate#Matcher
   */
  readonly matcher?: string;

  /**
   * @schema MatchPredicate#Part
   */
  readonly part?: MatchPredicatePart;
}

/**
 * Converts an object of type 'MatchPredicate' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_MatchPredicate(obj: MatchPredicate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Matcher': obj.matcher,
    'Part': obj.part,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ValueExtractorType
 */
export enum ValueExtractorType {
  /** entire */
  ENTIRE = "entire",
  /** regex */
  REGEX = "regex",
  /** between */
  BETWEEN = "between",
}

/**
 * @schema ValueExtractorPart
 */
export enum ValueExtractorPart {
  /** body */
  BODY = "body",
  /** subject */
  SUBJECT = "subject",
  /** from_address */
  FROM_UNDERSCORE_ADDRESS = "from_address",
}

/**
 * @schema MatchPredicateType
 */
export enum MatchPredicateType {
  /** all */
  ALL = "all",
  /** any */
  ANY = "any",
  /** not */
  NOT = "not",
  /** contains */
  CONTAINS = "contains",
  /** exactly */
  EXACTLY = "exactly",
  /** regex */
  REGEX = "regex",
}

/**
 * @schema MatchPredicatePart
 */
export enum MatchPredicatePart {
  /** body */
  BODY = "body",
  /** subject */
  SUBJECT = "subject",
  /** from_address */
  FROM_UNDERSCORE_ADDRESS = "from_address",
}


/**
 * A CloudFormation `PagerDuty::Services::Integration`
 *
 * @cloudformationResource PagerDuty::Services::Integration
 * @stability external
 * @link https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
 */
export class CfnIntegration extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "PagerDuty::Services::Integration";

  /**
   * Resource props.
   */
  public readonly props: CfnIntegrationProps;

  /**
   * Attribute `PagerDuty::Services::Integration.IntegrationUrl`
   * @link https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
   */
  public readonly attrIntegrationUrl: string;

  /**
   * Create a new `PagerDuty::Services::Integration`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnIntegrationProps) {
    super(scope, id, { type: CfnIntegration.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnIntegrationProps(props)! });

    this.props = props;

    this.attrIntegrationUrl = cdk.Token.asString(this.getAtt('IntegrationUrl'));
  }
}