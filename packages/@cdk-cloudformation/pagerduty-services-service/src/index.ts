// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Manage a Service in PagerDuty.
 *
 * @schema CfnServiceProps
 */
export interface CfnServiceProps {
  /**
   * @schema CfnServiceProps#Id
   */
  readonly id?: string;

  /**
   * @schema CfnServiceProps#Summary
   */
  readonly summary?: string;

  /**
   * @schema CfnServiceProps#HtmlUrl
   */
  readonly htmlUrl?: string;

  /**
   * The name of the service.
   *
   * @schema CfnServiceProps#Name
   */
  readonly name: string;

  /**
   * The user-provided description of the service.
   *
   * @schema CfnServiceProps#Description
   */
  readonly description?: string;

  /**
   * A number that determines time in seconds that an incident is automatically resolved if left open for that long.
   *
   * @schema CfnServiceProps#AutoResolveTimeout
   */
  readonly autoResolveTimeout?: number;

  /**
   * A number that determines time in seconds that an incident changes to the Triggered State after being Acknowledged.
   *
   * @schema CfnServiceProps#AcknowledgementTimeout
   */
  readonly acknowledgementTimeout?: number;

  /**
   * A string that represent the current state of the Service, allowed values are: active, warning, critical, maintenance, disabled.
   *
   * @schema CfnServiceProps#Status
   */
  readonly status?: CfnServicePropsStatus;

  /**
   * The ID of the Escalation Policy.
   *
   * @schema CfnServiceProps#EscalationPolicyId
   */
  readonly escalationPolicyId: string;

  /**
   * Object representing the Incident Urgency Rule.
   *
   * @schema CfnServiceProps#IncidentUrgencyRule
   */
  readonly incidentUrgencyRule?: CfnServicePropsIncidentUrgencyRule;

  /**
   * Object representing Support Hours.
   *
   * @schema CfnServiceProps#SupportHours
   */
  readonly supportHours?: CfnServicePropsSupportHours;

  /**
   * The list of scheduled actions for the service.
   *
   * @schema CfnServiceProps#ScheduledActions
   */
  readonly scheduledActions?: ScheduledActionAt[];

  /**
   * String representing whether a service creates only incidents, or both alerts and incidents.
   *
   * @schema CfnServiceProps#AlertCreation
   */
  readonly alertCreation?: CfnServicePropsAlertCreation;

  /**
   * Object that defines how alerts on this service will be automatically grouped into incidents.
   *
   * @schema CfnServiceProps#AlertGroupingParameters
   */
  readonly alertGroupingParameters?: CfnServicePropsAlertGroupingParameters;

  /**
   * Object that defines how alerts on this service are automatically suspended for a period of time before triggering, when identified as likely being transient.
   *
   * @schema CfnServiceProps#AutoPauseNotificationsParameters
   */
  readonly autoPauseNotificationsParameters?: CfnServicePropsAutoPauseNotificationsParameters;

}

/**
 * Converts an object of type 'CfnServiceProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServiceProps(obj: CfnServiceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Id': obj.id,
    'Summary': obj.summary,
    'HtmlUrl': obj.htmlUrl,
    'Name': obj.name,
    'Description': obj.description,
    'AutoResolveTimeout': obj.autoResolveTimeout,
    'AcknowledgementTimeout': obj.acknowledgementTimeout,
    'Status': obj.status,
    'EscalationPolicyId': obj.escalationPolicyId,
    'IncidentUrgencyRule': toJson_CfnServicePropsIncidentUrgencyRule(obj.incidentUrgencyRule),
    'SupportHours': toJson_CfnServicePropsSupportHours(obj.supportHours),
    'ScheduledActions': obj.scheduledActions?.map(y => y),
    'AlertCreation': obj.alertCreation,
    'AlertGroupingParameters': toJson_CfnServicePropsAlertGroupingParameters(obj.alertGroupingParameters),
    'AutoPauseNotificationsParameters': toJson_CfnServicePropsAutoPauseNotificationsParameters(obj.autoPauseNotificationsParameters),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * A string that represent the current state of the Service, allowed values are: active, warning, critical, maintenance, disabled.
 *
 * @schema CfnServicePropsStatus
 */
export enum CfnServicePropsStatus {
  /** active */
  ACTIVE = "active",
  /** warning */
  WARNING = "warning",
  /** critical */
  CRITICAL = "critical",
  /** maintenance */
  MAINTENANCE = "maintenance",
  /** disabled */
  DISABLED = "disabled",
}

/**
 * Object representing the Incident Urgency Rule.
 *
 * @schema CfnServicePropsIncidentUrgencyRule
 */
export interface CfnServicePropsIncidentUrgencyRule {
  /**
   * @schema CfnServicePropsIncidentUrgencyRule#Type
   */
  readonly type?: UrgencyType;

  /**
   * @schema CfnServicePropsIncidentUrgencyRule#Urgency
   */
  readonly urgency?: Urgency;

  /**
   * Object representing the Incident Urgency Rule during support hours.
   *
   * @schema CfnServicePropsIncidentUrgencyRule#DuringSupportHours
   */
  readonly duringSupportHours?: CfnServicePropsIncidentUrgencyRuleDuringSupportHours;

  /**
   * Object representing the Incident Urgency Rule outside support hours.
   *
   * @schema CfnServicePropsIncidentUrgencyRule#OutsideSupportHours
   */
  readonly outsideSupportHours?: CfnServicePropsIncidentUrgencyRuleOutsideSupportHours;

}

/**
 * Converts an object of type 'CfnServicePropsIncidentUrgencyRule' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServicePropsIncidentUrgencyRule(obj: CfnServicePropsIncidentUrgencyRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Urgency': obj.urgency,
    'DuringSupportHours': toJson_CfnServicePropsIncidentUrgencyRuleDuringSupportHours(obj.duringSupportHours),
    'OutsideSupportHours': toJson_CfnServicePropsIncidentUrgencyRuleOutsideSupportHours(obj.outsideSupportHours),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Object representing Support Hours.
 *
 * @schema CfnServicePropsSupportHours
 */
export interface CfnServicePropsSupportHours {
  /**
   * String representing the time zone for the support hours.
   *
   * @schema CfnServicePropsSupportHours#TimeZone
   */
  readonly timeZone?: string;

  /**
   * String representing the support hours' starting time of day (date portion is ignored).
   *
   * @schema CfnServicePropsSupportHours#StartTime
   */
  readonly startTime?: string;

  /**
   * String representing the support hours' ending time of day (date portion is ignored).
   *
   * @schema CfnServicePropsSupportHours#EndTime
   */
  readonly endTime?: string;

  /**
   * String representing the type of support hours, value must be fixed_time_per_day.
   *
   * @schema CfnServicePropsSupportHours#Type
   */
  readonly type?: CfnServicePropsSupportHoursType;

  /**
   * Array representing the days of the week for support hours.
   *
   * @schema CfnServicePropsSupportHours#DaysOfWeek
   */
  readonly daysOfWeek?: number[];

}

/**
 * Converts an object of type 'CfnServicePropsSupportHours' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServicePropsSupportHours(obj: CfnServicePropsSupportHours | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TimeZone': obj.timeZone,
    'StartTime': obj.startTime,
    'EndTime': obj.endTime,
    'Type': obj.type,
    'DaysOfWeek': obj.daysOfWeek?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Represents when scheduled action will occur, allowed values are: support_hours_start, support_hours_end.
 *
 * @schema ScheduledActionAt
 */
export enum ScheduledActionAt {
  /** support_hours_start */
  SUPPORT_UNDERSCORE_HOURS_UNDERSCORE_START = "support_hours_start",
  /** support_hours_end */
  SUPPORT_UNDERSCORE_HOURS_UNDERSCORE_END = "support_hours_end",
}

/**
 * String representing whether a service creates only incidents, or both alerts and incidents.
 *
 * @schema CfnServicePropsAlertCreation
 */
export enum CfnServicePropsAlertCreation {
  /** create_incidents */
  CREATE_UNDERSCORE_INCIDENTS = "create_incidents",
  /** create_alerts_and_incidents */
  CREATE_UNDERSCORE_ALERTS_UNDERSCORE_AND_UNDERSCORE_INCIDENTS = "create_alerts_and_incidents",
}

/**
 * Object that defines how alerts on this service will be automatically grouped into incidents.
 *
 * @schema CfnServicePropsAlertGroupingParameters
 */
export interface CfnServicePropsAlertGroupingParameters {
  /**
   * String representing the type of alert grouping, allowed values are: time, intelligent, content_based.
   *
   * @schema CfnServicePropsAlertGroupingParameters#Type
   */
  readonly type?: CfnServicePropsAlertGroupingParametersType;

  /**
   * Object representing configuration of the Alert Grouping.
   *
   * @schema CfnServicePropsAlertGroupingParameters#Config
   */
  readonly config?: CfnServicePropsAlertGroupingParametersConfig;

}

/**
 * Converts an object of type 'CfnServicePropsAlertGroupingParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServicePropsAlertGroupingParameters(obj: CfnServicePropsAlertGroupingParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Config': toJson_CfnServicePropsAlertGroupingParametersConfig(obj.config),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Object that defines how alerts on this service are automatically suspended for a period of time before triggering, when identified as likely being transient.
 *
 * @schema CfnServicePropsAutoPauseNotificationsParameters
 */
export interface CfnServicePropsAutoPauseNotificationsParameters {
  /**
   * Boolean indicating if the Auto Pause Notification is enabled.
   *
   * @schema CfnServicePropsAutoPauseNotificationsParameters#Enabled
   */
  readonly enabled?: boolean;

  /**
   * Number representing the timeout for Auto Pause Notification, valid values are: 120, 180, 300, 600, 900.
   *
   * @schema CfnServicePropsAutoPauseNotificationsParameters#Timeout
   */
  readonly timeout?: CfnServicePropsAutoPauseNotificationsParametersTimeout;

}

/**
 * Converts an object of type 'CfnServicePropsAutoPauseNotificationsParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServicePropsAutoPauseNotificationsParameters(obj: CfnServicePropsAutoPauseNotificationsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
    'Timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * String representing the type of incident urgency: whether it's constant, or it's dependent on the support hours.
 *
 * @schema UrgencyType
 */
export enum UrgencyType {
  /** constant */
  CONSTANT = "constant",
  /** use_support_hours */
  USE_UNDERSCORE_SUPPORT_UNDERSCORE_HOURS = "use_support_hours",
}

/**
 * String representing the incidents' urgency, if type is constant, allowed values are: low, high, severity_based.
 *
 * @schema Urgency
 */
export enum Urgency {
  /** low */
  LOW = "low",
  /** high */
  HIGH = "high",
  /** severity_based */
  SEVERITY_UNDERSCORE_BASED = "severity_based",
}

/**
 * Object representing the Incident Urgency Rule during support hours.
 *
 * @schema CfnServicePropsIncidentUrgencyRuleDuringSupportHours
 */
export interface CfnServicePropsIncidentUrgencyRuleDuringSupportHours {
  /**
   * @schema CfnServicePropsIncidentUrgencyRuleDuringSupportHours#Type
   */
  readonly type?: UrgencyType;

  /**
   * @schema CfnServicePropsIncidentUrgencyRuleDuringSupportHours#Urgency
   */
  readonly urgency?: Urgency;

}

/**
 * Converts an object of type 'CfnServicePropsIncidentUrgencyRuleDuringSupportHours' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServicePropsIncidentUrgencyRuleDuringSupportHours(obj: CfnServicePropsIncidentUrgencyRuleDuringSupportHours | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Urgency': obj.urgency,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Object representing the Incident Urgency Rule outside support hours.
 *
 * @schema CfnServicePropsIncidentUrgencyRuleOutsideSupportHours
 */
export interface CfnServicePropsIncidentUrgencyRuleOutsideSupportHours {
  /**
   * @schema CfnServicePropsIncidentUrgencyRuleOutsideSupportHours#Type
   */
  readonly type?: UrgencyType;

  /**
   * @schema CfnServicePropsIncidentUrgencyRuleOutsideSupportHours#Urgency
   */
  readonly urgency?: Urgency;

}

/**
 * Converts an object of type 'CfnServicePropsIncidentUrgencyRuleOutsideSupportHours' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServicePropsIncidentUrgencyRuleOutsideSupportHours(obj: CfnServicePropsIncidentUrgencyRuleOutsideSupportHours | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Urgency': obj.urgency,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * String representing the type of support hours, value must be fixed_time_per_day.
 *
 * @schema CfnServicePropsSupportHoursType
 */
export enum CfnServicePropsSupportHoursType {
  /** fixed_time_per_day */
  FIXED_UNDERSCORE_TIME_UNDERSCORE_PER_UNDERSCORE_DAY = "fixed_time_per_day",
}

/**
 * String representing the type of alert grouping, allowed values are: time, intelligent, content_based.
 *
 * @schema CfnServicePropsAlertGroupingParametersType
 */
export enum CfnServicePropsAlertGroupingParametersType {
  /** time */
  TIME = "time",
  /** intelligent */
  INTELLIGENT = "intelligent",
  /** content_based */
  CONTENT_UNDERSCORE_BASED = "content_based",
}

/**
 * Object representing configuration of the Alert Grouping.
 *
 * @schema CfnServicePropsAlertGroupingParametersConfig
 */
export interface CfnServicePropsAlertGroupingParametersConfig {
  /**
   * Number representing the timeout of timeout for the Alert Grouping.
   *
   * @schema CfnServicePropsAlertGroupingParametersConfig#Timeout
   */
  readonly timeout?: number;

}

/**
 * Converts an object of type 'CfnServicePropsAlertGroupingParametersConfig' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CfnServicePropsAlertGroupingParametersConfig(obj: CfnServicePropsAlertGroupingParametersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Number representing the timeout for Auto Pause Notification, valid values are: 120, 180, 300, 600, 900.
 *
 * @schema CfnServicePropsAutoPauseNotificationsParametersTimeout
 */
export enum CfnServicePropsAutoPauseNotificationsParametersTimeout {
  /** 120 */
  VALUE_120 = 120,
  /** 180 */
  VALUE_180 = 180,
  /** 300 */
  VALUE_300 = 300,
  /** 600 */
  VALUE_600 = 600,
  /** 900 */
  VALUE_900 = 900,
}


/**
 * A CloudFormation `PagerDuty::Services::Service`
 *
 * @cloudformationResource PagerDuty::Services::Service
 * @stability external
 * @link https://github.com/aws-ia/cloudformation-pagerduty-resource-providers.git
 */
export class CfnService extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "PagerDuty::Services::Service";

  /**
   * Resource props.
   */
  public readonly props: CfnServiceProps;

  /**
   * Attribute `PagerDuty::Services::Service.Self`
   * @link https://github.com/aws-ia/cloudformation-pagerduty-resource-providers.git
   */
  public readonly attrSelf: string;
  /**
   * Attribute `PagerDuty::Services::Service.Type`
   * @link https://github.com/aws-ia/cloudformation-pagerduty-resource-providers.git
   */
  public readonly attrType: string;

  /**
   * Create a new `PagerDuty::Services::Service`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnServiceProps) {
    super(scope, id, { type: CfnService.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnServiceProps(props)! });

    this.props = props;

    this.attrSelf = cdk.Token.asString(this.getAtt('Self'));
    this.attrType = cdk.Token.asString(this.getAtt('Type'));
  }
}