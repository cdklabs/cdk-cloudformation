// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Provides an [EC2 key pair](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) resource. A key pair is used to control login access to EC2 instances.
 *
 * Currently this resource requires an existing user-supplied key pair. This key pair's public key will be registered with AWS to allow logging-in to EC2 instances.
 *
 * When importing an existing key pair the public key material may be in any format supported by AWS. Supported formats (per the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws)) are:
 *
 * * OpenSSH public key format (the format in ~/.ssh/authorized_keys)
 * * Base64 encoded DER format
 * * SSH public key file format as specified in RFC4716
 *
 * @schema CfnKeyPairProps
 */
export interface CfnKeyPairProps {
  /**
   * The name for the key pair.
   *
   * @schema CfnKeyPairProps#KeyName
   */
  readonly keyName?: string;

  /**
   * Creates a unique name beginning with the specified prefix. Conflicts with `key_name`.
   *
   * @schema CfnKeyPairProps#KeyNamePrefix
   */
  readonly keyNamePrefix?: string;

  /**
   * The public key material.
   *
   * @schema CfnKeyPairProps#PublicKey
   */
  readonly publicKey: string;

  /**
   * Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
   *
   * @schema CfnKeyPairProps#Tags
   */
  readonly tags?: TagsDefinition[];

  /**
   * @schema CfnKeyPairProps#TagsAll
   */
  readonly tagsAll?: TagsAllDefinition[];

}

/**
 * Converts an object of type 'CfnKeyPairProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnKeyPairProps(obj: CfnKeyPairProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyName': obj.keyName,
    'KeyNamePrefix': obj.keyNamePrefix,
    'PublicKey': obj.publicKey,
    'Tags': obj.tags?.map(y => toJson_TagsDefinition(y)),
    'TagsAll': obj.tagsAll?.map(y => toJson_TagsAllDefinition(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TagsDefinition
 */
export interface TagsDefinition {
  /**
   * @schema TagsDefinition#MapKey
   */
  readonly mapKey: string;

  /**
   * @schema TagsDefinition#MapValue
   */
  readonly mapValue: string;

}

/**
 * Converts an object of type 'TagsDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TagsDefinition(obj: TagsDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MapKey': obj.mapKey,
    'MapValue': obj.mapValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TagsAllDefinition
 */
export interface TagsAllDefinition {
  /**
   * @schema TagsAllDefinition#MapKey
   */
  readonly mapKey: string;

  /**
   * @schema TagsAllDefinition#MapValue
   */
  readonly mapValue: string;

}

/**
 * Converts an object of type 'TagsAllDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TagsAllDefinition(obj: TagsAllDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MapKey': obj.mapKey,
    'MapValue': obj.mapValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `TF::AWS::KeyPair`
 *
 * @cloudformationResource TF::AWS::KeyPair
 * @stability external
 * @link https://github.com/iann0036/cfn-tf-custom-types.git
 */
export class CfnKeyPair extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "TF::AWS::KeyPair";

  /**
   * Resource props.
   */
  public readonly props: CfnKeyPairProps;

  /**
   * Attribute `TF::AWS::KeyPair.tfcfnid`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrTfcfnid: string;
  /**
   * Attribute `TF::AWS::KeyPair.Arn`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrArn: string;
  /**
   * Attribute `TF::AWS::KeyPair.Fingerprint`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrFingerprint: string;
  /**
   * Attribute `TF::AWS::KeyPair.Id`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrId: string;
  /**
   * Attribute `TF::AWS::KeyPair.KeyPairId`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrKeyPairId: string;

  /**
   * Create a new `TF::AWS::KeyPair`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnKeyPairProps) {
    super(scope, id, { type: CfnKeyPair.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnKeyPairProps(props)! });

    this.props = props;

    this.attrTfcfnid = cdk.Token.asString(this.getAtt('tfcfnid'));
    this.attrArn = cdk.Token.asString(this.getAtt('Arn'));
    this.attrFingerprint = cdk.Token.asString(this.getAtt('Fingerprint'));
    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrKeyPairId = cdk.Token.asString(this.getAtt('KeyPairId'));
  }
}