// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Manages a User within Azure Active Directory.
 *
 * -> **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Directory.ReadWrite.All` within the `Windows Azure Active Directory` API.
 *
 * @schema CfnUserProps
 */
export interface CfnUserProps {
  /**
   * `true` if the account should be enabled, otherwise `false`. Defaults to `true`.
   *
   * @default true`.
   * @schema CfnUserProps#AccountEnabled
   */
  readonly accountEnabled?: boolean;

  /**
   * The city in which the user is located.
   *
   * @schema CfnUserProps#City
   */
  readonly city?: string;

  /**
   * The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
   *
   * @schema CfnUserProps#CompanyName
   */
  readonly companyName?: string;

  /**
   * The country/region in which the user is located; for example, “US” or “UK”.
   *
   * @schema CfnUserProps#Country
   */
  readonly country?: string;

  /**
   * The name for the department in which the user works.
   *
   * @schema CfnUserProps#Department
   */
  readonly department?: string;

  /**
   * The name to display in the address book for the user.
   *
   * @schema CfnUserProps#DisplayName
   */
  readonly displayName: string;

  /**
   * `true` if the User is forced to change the password during the next sign-in. Defaults to `false`.
   *
   * @default false`.
   * @schema CfnUserProps#ForcePasswordChange
   */
  readonly forcePasswordChange?: boolean;

  /**
   * The given name (first name) of the user.
   *
   * @schema CfnUserProps#GivenName
   */
  readonly givenName?: string;

  /**
   * The value used to associate an on-premise Active Directory user account with their Azure AD user object. Deprecated in favour of `onpremises_immutable_id`.
   *
   * @schema CfnUserProps#ImmutableId
   */
  readonly immutableId?: string;

  /**
   * The user’s job title.
   *
   * @schema CfnUserProps#JobTitle
   */
  readonly jobTitle?: string;

  /**
   * The mail alias for the user. Defaults to the user name part of the User Principal Name.
   *
   * @default the user name part of the User Principal Name.
   * @schema CfnUserProps#MailNickname
   */
  readonly mailNickname?: string;

  /**
   * The primary cellular telephone number for the user. Deprecated in favour of `mobile_phone`.
   *
   * @schema CfnUserProps#Mobile
   */
  readonly mobile?: string;

  /**
   * The primary cellular telephone number for the user.
   *
   * @schema CfnUserProps#MobilePhone
   */
  readonly mobilePhone?: string;

  /**
   * The office location in the user's place of business.
   *
   * @schema CfnUserProps#OfficeLocation
   */
  readonly officeLocation?: string;

  /**
   * The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account.
   *
   * @schema CfnUserProps#OnpremisesImmutableId
   */
  readonly onpremisesImmutableId?: string;

  /**
   * The password for the User. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters.
   *
   * @schema CfnUserProps#Password
   */
  readonly password: string;

  /**
   * The office location in the user's place of business. Deprecated in favour of `office_location`.
   *
   * @schema CfnUserProps#PhysicalDeliveryOfficeName
   */
  readonly physicalDeliveryOfficeName?: string;

  /**
   * The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.
   *
   * @schema CfnUserProps#PostalCode
   */
  readonly postalCode?: string;

  /**
   * The state or province in the user's address.
   *
   * @schema CfnUserProps#State
   */
  readonly state?: string;

  /**
   * The street address of the user's place of business.
   *
   * @schema CfnUserProps#StreetAddress
   */
  readonly streetAddress?: string;

  /**
   * The user's surname (family name or last name).
   *
   * @schema CfnUserProps#Surname
   */
  readonly surname?: string;

  /**
   * The usage location of the User. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
   *
   * @schema CfnUserProps#UsageLocation
   */
  readonly usageLocation?: string;

  /**
   * The User Principal Name of the User.
   *
   * @schema CfnUserProps#UserPrincipalName
   */
  readonly userPrincipalName: string;

}

/**
 * Converts an object of type 'CfnUserProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnUserProps(obj: CfnUserProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AccountEnabled': obj.accountEnabled,
    'City': obj.city,
    'CompanyName': obj.companyName,
    'Country': obj.country,
    'Department': obj.department,
    'DisplayName': obj.displayName,
    'ForcePasswordChange': obj.forcePasswordChange,
    'GivenName': obj.givenName,
    'ImmutableId': obj.immutableId,
    'JobTitle': obj.jobTitle,
    'MailNickname': obj.mailNickname,
    'Mobile': obj.mobile,
    'MobilePhone': obj.mobilePhone,
    'OfficeLocation': obj.officeLocation,
    'OnpremisesImmutableId': obj.onpremisesImmutableId,
    'Password': obj.password,
    'PhysicalDeliveryOfficeName': obj.physicalDeliveryOfficeName,
    'PostalCode': obj.postalCode,
    'State': obj.state,
    'StreetAddress': obj.streetAddress,
    'Surname': obj.surname,
    'UsageLocation': obj.usageLocation,
    'UserPrincipalName': obj.userPrincipalName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `TF::AzureAD::User`
 *
 * @cloudformationResource TF::AzureAD::User
 * @stability external
 * @link https://github.com/iann0036/cfn-tf-custom-types.git
 */
export class CfnUser extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "TF::AzureAD::User";

  /**
   * Resource props.
   */
  public readonly props: CfnUserProps;

  /**
   * Attribute `TF::AzureAD::User.tfcfnid`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrTfcfnid: string;
  /**
   * Attribute `TF::AzureAD::User.Id`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrId: string;
  /**
   * Attribute `TF::AzureAD::User.Mail`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrMail: string;
  /**
   * Attribute `TF::AzureAD::User.ObjectId`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrObjectId: string;
  /**
   * Attribute `TF::AzureAD::User.OnpremisesSamAccountName`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrOnpremisesSamAccountName: string;
  /**
   * Attribute `TF::AzureAD::User.OnpremisesUserPrincipalName`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrOnpremisesUserPrincipalName: string;
  /**
   * Attribute `TF::AzureAD::User.UserType`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrUserType: string;

  /**
   * Create a new `TF::AzureAD::User`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnUserProps) {
    super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnUserProps(props)! });

    this.props = props;

    this.attrTfcfnid = cdk.Token.asString(this.getAtt('tfcfnid'));
    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrMail = cdk.Token.asString(this.getAtt('Mail'));
    this.attrObjectId = cdk.Token.asString(this.getAtt('ObjectId'));
    this.attrOnpremisesSamAccountName = cdk.Token.asString(this.getAtt('OnpremisesSamAccountName'));
    this.attrOnpremisesUserPrincipalName = cdk.Token.asString(this.getAtt('OnpremisesUserPrincipalName'));
    this.attrUserType = cdk.Token.asString(this.getAtt('UserType'));
  }
}