// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Provides a Cloudflare record resource.
 *
 * @schema CfnRecordProps
 */
export interface CfnRecordProps {
  /**
   * Map of attributes that constitute the record value. Primarily used for LOC and SRV record types. Either this or `value` must be specified.
   *
   * @schema CfnRecordProps#Data
   */
  readonly data?: DataDefinition[];

  /**
   * @schema CfnRecordProps#Metadata
   */
  readonly metadata?: MetadataDefinition[];

  /**
   * The name of the record.
   *
   * @schema CfnRecordProps#Name
   */
  readonly name: string;

  /**
   * The priority of the record.
   *
   * @schema CfnRecordProps#Priority
   */
  readonly priority?: number;

  /**
   * @schema CfnRecordProps#Proxiable
   */
  readonly proxiable?: boolean;

  /**
   * Whether the record gets Cloudflare's origin protection; defaults to `false`.
   *
   * @schema CfnRecordProps#Proxied
   */
  readonly proxied?: boolean;

  /**
   * The TTL of the record ([automatic: '1'](https://api.cloudflare.com/#dns-records-for-a-zone-create-dns-record)).
   *
   * @schema CfnRecordProps#Ttl
   */
  readonly ttl?: number;

  /**
   * The type of the record.
   *
   * @schema CfnRecordProps#Type
   */
  readonly type: string;

  /**
   * The (string) value of the record. Either this or `data` must be specified.
   *
   * @schema CfnRecordProps#Value
   */
  readonly value?: string;

  /**
   * The DNS zone ID to add the record to.
   *
   * @schema CfnRecordProps#ZoneId
   */
  readonly zoneId: string;

  /**
   * @schema CfnRecordProps#Timeouts
   */
  readonly timeouts?: TimeoutsDefinition;

}

/**
 * Converts an object of type 'CfnRecordProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnRecordProps(obj: CfnRecordProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Data': obj.data?.map(y => toJson_DataDefinition(y)),
    'Metadata': obj.metadata?.map(y => toJson_MetadataDefinition(y)),
    'Name': obj.name,
    'Priority': obj.priority,
    'Proxiable': obj.proxiable,
    'Proxied': obj.proxied,
    'Ttl': obj.ttl,
    'Type': obj.type,
    'Value': obj.value,
    'ZoneId': obj.zoneId,
    'Timeouts': toJson_TimeoutsDefinition(obj.timeouts),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DataDefinition
 */
export interface DataDefinition {
  /**
   * @schema DataDefinition#MapKey
   */
  readonly mapKey: string;

  /**
   * @schema DataDefinition#MapValue
   */
  readonly mapValue: string;

}

/**
 * Converts an object of type 'DataDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DataDefinition(obj: DataDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MapKey': obj.mapKey,
    'MapValue': obj.mapValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MetadataDefinition
 */
export interface MetadataDefinition {
  /**
   * @schema MetadataDefinition#MapKey
   */
  readonly mapKey: string;

  /**
   * @schema MetadataDefinition#MapValue
   */
  readonly mapValue: string;

}

/**
 * Converts an object of type 'MetadataDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MetadataDefinition(obj: MetadataDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MapKey': obj.mapKey,
    'MapValue': obj.mapValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TimeoutsDefinition
 */
export interface TimeoutsDefinition {
  /**
   * @schema TimeoutsDefinition#Create
   */
  readonly create?: string;

  /**
   * @schema TimeoutsDefinition#Update
   */
  readonly update?: string;

}

/**
 * Converts an object of type 'TimeoutsDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TimeoutsDefinition(obj: TimeoutsDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Create': obj.create,
    'Update': obj.update,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `TF::Cloudflare::Record`
 *
 * @cloudformationResource TF::Cloudflare::Record
 * @stability external
 * @link https://github.com/iann0036/cfn-tf-custom-types.git
 */
export class CfnRecord extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "TF::Cloudflare::Record";

  /**
   * Resource props.
   */
  public readonly props: CfnRecordProps;

  /**
   * Attribute `TF::Cloudflare::Record.tfcfnid`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrTfcfnid: string;
  /**
   * Attribute `TF::Cloudflare::Record.CreatedOn`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrCreatedOn: string;
  /**
   * Attribute `TF::Cloudflare::Record.Hostname`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrHostname: string;
  /**
   * Attribute `TF::Cloudflare::Record.Id`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrId: string;
  /**
   * Attribute `TF::Cloudflare::Record.ModifiedOn`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrModifiedOn: string;

  /**
   * Create a new `TF::Cloudflare::Record`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnRecordProps) {
    super(scope, id, { type: CfnRecord.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnRecordProps(props)! });

    this.props = props;

    this.attrTfcfnid = cdk.Token.asString(this.getAtt('tfcfnid'));
    this.attrCreatedOn = cdk.Token.asString(this.getAtt('CreatedOn'));
    this.attrHostname = cdk.Token.asString(this.getAtt('Hostname'));
    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrModifiedOn = cdk.Token.asString(this.getAtt('ModifiedOn'));
  }
}