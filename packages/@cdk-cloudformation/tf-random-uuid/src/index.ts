// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * CloudFormation equivalent of random_uuid
 *
 * @schema CfnUuidProps
 */
export interface CfnUuidProps {
  /**
   * @schema CfnUuidProps#Keepers
   */
  readonly keepers?: KeepersDefinition[];

}

/**
 * Converts an object of type 'CfnUuidProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnUuidProps(obj: CfnUuidProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Keepers': obj.keepers?.map(y => toJson_KeepersDefinition(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema KeepersDefinition
 */
export interface KeepersDefinition {
  /**
   * @schema KeepersDefinition#MapKey
   */
  readonly mapKey: string;

  /**
   * @schema KeepersDefinition#MapValue
   */
  readonly mapValue: string;

}

/**
 * Converts an object of type 'KeepersDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KeepersDefinition(obj: KeepersDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MapKey': obj.mapKey,
    'MapValue': obj.mapValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `TF::Random::Uuid`
 *
 * @cloudformationResource TF::Random::Uuid
 * @stability external
 * @link https://github.com/iann0036/cfn-tf-custom-types.git
 */
export class CfnUuid extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = "TF::Random::Uuid";

  /**
   * Resource props.
   */
  public readonly props: CfnUuidProps;

  /**
   * Attribute `TF::Random::Uuid.tfcfnid`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrTfcfnid: string;
  /**
   * Attribute `TF::Random::Uuid.Id`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrId: string;
  /**
   * Attribute `TF::Random::Uuid.Result`
   * @link https://github.com/iann0036/cfn-tf-custom-types.git
   */
  public readonly attrResult: string;

  /**
   * Create a new `TF::Random::Uuid`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnUuidProps) {
    super(scope, id, { type: CfnUuid.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnUuidProps(props)! });

    this.props = props;

    this.attrTfcfnid = cdk.Token.asString(this.getAtt('tfcfnid'));
    this.attrId = cdk.Token.asString(this.getAtt('Id'));
    this.attrResult = cdk.Token.asString(this.getAtt('Result'));
  }
}